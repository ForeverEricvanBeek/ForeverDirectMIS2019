<#@ template language="C#" hostspecific="true" tier="4"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Languages.Biml.Connection" #>
<#@ import namespace="Varigence.Biml.Extensions" #>
<#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
<#@ include file="ProjectSettings.cs" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">

<!-- http://www.varigence.com/Documentation/Language/Element/AstRootNode -->
<!--
	- possible loading types
		- I-SS: Insert Snapshot
        - ti : Truncate Insert
            
	
	- possible column types
		- bk: business key  (mandatory)
		- d: data column
          
      - The source (Table, View TableValuedFunction) must have the same Column names as the Target. Matching is done on Column name only
      - no explicit mappings between source and target columns are defined.
      - The source must contain all columns except for the Surrogate key and Datamart specific meta data columns:
               [InsertDateTime]
               [UpdateDateTime]
               [BatchID]
               [ProcessLogID]
      
-->

<!-- declare packages
     One package will be created per Datamart Dimension
-->
	<Packages>
          
<# 

          string sqlDatamartTable = @"SELECT     [DWHConnection]
                                                     ,[DWHSchema]
                                                     ,[DWHTable]
                                                     ,[DatamartConnection]
                                                     ,[DatamartSchema]
                                                     ,[DatamartTable]
                                                     ,[LoadingType] 
		                                 FROM       [Generator].[ForeverData01Table]
                                           WHERE      [TableType]          =  'F' 
                                           AND        [IsActive]           =  1
                                           AND        [Generate]           =  1
                                          ";
		DataTable tableDatamartTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartTable);
		foreach (DataRow rowDatamartTable in tableDatamartTable.Rows)
          {
			string varDWHConnection       = rowDatamartTable["DWHConnection"].ToString();
			string varDWHSchema           = rowDatamartTable["DWHSchema"].ToString();
			string varDWHTable            = rowDatamartTable["DWHTable"].ToString();
			string varDatamartConnection  = rowDatamartTable["DatamartConnection"].ToString();
			string varDatamartSchema      = rowDatamartTable["DatamartSchema"].ToString();
			string varDatamartTable       = rowDatamartTable["DatamartTable"].ToString();
			string varLoadingType         = rowDatamartTable["LoadingType"].ToString();

			string varDWHSchemaPlus       = varSQLServTableBeginCharacter + varDWHSchema + varSQLServTableCloseCharacter + ".";
			string varDWHTablePlus        = varSQLServTableBeginCharacter + varDWHTable + varSQLServTableCloseCharacter;
            string varDWHTableFull        = varDWHSchemaPlus + varDWHTablePlus;
			string varDatamartSchemaPlus  = varSQLServTableBeginCharacter + varDatamartSchema + varSQLServTableCloseCharacter + ".";
			string varDatamartTablePlus   = varSQLServTableBeginCharacter + varDatamartTable + varSQLServTableCloseCharacter;
            string varDatamartTableFull   = varDatamartSchemaPlus + varDatamartTablePlus;
     
			string varName                = varDatamartConnection + "-" +varDatamartSchema+"-"+varDatamartTable;
			string varNameShort           = varDatamartSchema + "-" + varDatamartTable;
			string varPackageName         = "Load Fact-" + varName;

               // Get meta data (database) from Source Columns
               string sqlSourceColumn             =  @"SELECT     dbcol.[name]                         AS [ColumnName]
                                                                 ,dbcol.[Column_id]                    AS [ColumnPosition]
                                                                 ,dbtyp.[name]                         AS [ColumnDataType]
                                                                 ,dbcol.[max_length]                   AS [ColumnDataLength]
                                                                 ,dbcol.[scale]                        AS [ColumnDataScale]
                                                                 ,dbcol.[precision]                    AS [ColumnDataPrecision]
                                                       FROM       DWH.sys.all_columns                        dbcol
                                                       JOIN       DWH.sys.types                              dbtyp
                                                       ON         dbtyp.system_type_id                                                    =  dbcol.system_type_id
                                                       WHERE      OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('" + DWHDBName + @"'))     =  '" + varDWHSchema + @"' 
                                                       AND        OBJECT_NAME(dbcol.object_id,DB_ID('" + DWHDBName + @"'))            =  '" + varDWHTable + @"' 
                                                       AND        dbtyp.[name]                                                            != 'sysname'
                                                       ORDER BY   dbcol.[column_id]
                                                      ";
            DataTable tableSourceColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceColumn);

			DataRow[] rowSourceColumns  = tableSourceColumn.Select((string)"1 = 1", (string)"ColumnPosition");

               // Get meta data (database and custom) for Target Columns
     
			string sqlDatamartColumn      =  @"SELECT     dbcol.[name]                         AS [ColumnName]
                                                                 ,ISNULL(col.[ColumnType],'mt')        AS [ColumnType]
                                                                 ,col.[ColumnInferredValue]
                                                                 ,dbtyp.[name]                         AS [ColumnDataType]
                                                                 ,dbcol.[max_length]                   AS [ColumnDataLength]
                                                                 ,dbcol.[scale]                        AS [ColumnDataScale]
                                                                 ,dbcol.[precision]                    AS [ColumnDataPrecision]
                                                                 ,typcon.[DataTypeExpression]          
                                                                 ,dbcol.[Column_ID]                    AS [ColumnPosition]
                                                                 ,dbcol.[is_nullable]                  AS [ColumnNotNullFlag]
                                                                 ,col.[ColumnDefaultValue]
                                                                 ,col.[ColumnUnknownValue]
                                                                 ,col.[LookupConnection]
                                                                 ,col.[LookupSchema]
                                                                 ,col.[LookupTable]
                                                                 ,ISNULL(col.[ColumnInferredValue],col.[LookupTable]) AS [LookupTableAlias]
                                                                 ,ISNULL(col.ColumnNotApplicableValue,col.LookupColum) AS [joinColumn]
                                                                 ,col.[LookupColum]
                                                                 ,col.[LookupJoin]
                                                                 ,ISNULL(col.ColumnDefaultValue,dbcol.[name]) AS [selectColumn]
	                                                       FROM       ForeverData01.sys.all_columns                      dbcol
                                                       JOIN       ForeverData01.sys.types                            dbtyp
                                                       ON         dbtyp.system_type_id                                                      =  dbcol.system_type_id
                                                       LEFT JOIN  [DWH_Control].[Generator].[ForeverData01Column]    col
                                                       ON         col.[ColumnName]  collate SQL_Latin1_General_CP1_CS_AS    =  dbcol.[name] collate SQL_Latin1_General_CP1_CS_AS
                                                       AND        col.[DatamartTable] collate SQL_Latin1_General_CP1_CS_AS  =  OBJECT_NAME(dbcol.object_id,DB_ID('" + DatamartDBName + @"')) collate SQL_Latin1_General_CP1_CS_AS
                                                       AND        col.[DatamartSchema] collate SQL_Latin1_General_CP1_CS_AS =  OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('" + DatamartDBName + @"')) collate SQL_Latin1_General_CP1_CS_AS
                                                       AND        col.[IsActive]                                                            =  1 
                                                       LEFT JOIN  [DWH_Control].[Generator].[DataTypeConversion]     typcon
                                                       ON         typcon.[DataType]                                                         =  dbtyp.[name]  collate SQL_Latin1_General_CP1_CS_AS
                                                       WHERE      OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('" + DatamartDBName + @"'))     =  '" + varDatamartSchema + @"' 
                                                       AND        OBJECT_NAME(dbcol.object_id,DB_ID('" + DatamartDBName + @"'))            =  '" + varDatamartTable + @"' 
                                                       AND        dbtyp.[name]                                                              != 'sysname'
                                                       ORDER BY   dbcol.[Column_ID]
                                                      ";
			DataTable tableDatamartColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartColumn);

			DataRow[] rowSurrogateKey         = tableDatamartColumn.Select((string)"ColumnType like '%sk%'"               , (string)"ColumnPosition");
			DataRow[] rowBusinessKeys         = tableDatamartColumn.Select((string)"ColumnType like '%bk%'"               , (string)"ColumnPosition");
			DataRow[] rowData1Columns         = tableDatamartColumn.Select((string)"ColumnType = 'd1'"                    , (string)"ColumnPosition");
			DataRow[] rowSCD1Columns          = tableDatamartColumn.Select((string)"ColumnType = 't1'"                    , (string)"ColumnPosition");
			DataRow[] rowSCD2Columns          = tableDatamartColumn.Select((string)"ColumnType = 't2'"                    , (string)"ColumnPosition");
			DataRow[] rowDataColumns          = tableDatamartColumn.Select((string)"ColumnType not in ('bk','sk','mt')"   , (string)"ColumnPosition");
			DataRow[] rowNonKeyColumns        = tableDatamartColumn.Select((string)"ColumnType not in ('sk')"             , (string)"ColumnPosition");
			DataRow[] rowDatamartColumns      = tableDatamartColumn.Select((string)"ColumnType <> 'mt'"                   , (string)"ColumnPosition");

               ///////////////////////////////////////////
               // sql Join for Lookups
               ///////////////////////////////////////////
               string varLookupJoinClause   = "";
               if (rowSurrogateKey.Length > 0)
               {
                    for(int i = 0; i < rowSurrogateKey.Length; i ++)
                    {
                         string varLookupConnection     = rowSurrogateKey[i]["LookupConnection"].ToString();
                         string varLookupSchema         = rowSurrogateKey[i]["LookupSchema"].ToString();
                         string varLookupTable          = rowSurrogateKey[i]["LookupTable"].ToString();
                         string varLookupTableAlias     = rowSurrogateKey[i]["LookupTableAlias"].ToString();
                         string varLookupColum          = rowSurrogateKey[i]["LookupColum"].ToString();
                         string varjoinColumn          = rowSurrogateKey[i]["joinColumn"].ToString();
                         string varLookupJoin           = rowSurrogateKey[i]["LookupJoin"].ToString();
                         string varColumnName     = (string)rowSurrogateKey[i]["ColumnName"];

                         varLookupConnection    = varSQLServColumnBeginCharacter + varLookupConnection + varSQLServColumnCloseCharacter;
                         varLookupSchema        = varSQLServColumnBeginCharacter + varLookupSchema + varSQLServColumnCloseCharacter;
                         varLookupTable         = varSQLServColumnBeginCharacter + varLookupTable + varSQLServColumnCloseCharacter;
                         varLookupJoin           += " ";
                         string varLookupJoin2 = varLookupJoin.Replace("<", "&lt;");
                         varLookupJoin = varLookupJoin2;


                         varLookupJoinClause      += " LEFT JOIN "+ varLookupConnection + "." + varLookupSchema + "." + varLookupTable + " AS " + varLookupTableAlias + " ON 1=1 ";

                         if (String.IsNullOrEmpty(varLookupColum))
                         {
                            varLookupJoinClause    += " AND " + varLookupJoin;
                         }
                         else
                         {
                            string[] varArrayLookupColumn  = varLookupColum.Split(',');
                            string[] varArrayjoinColumn    = varjoinColumn.Split(',');
                            int zz = 0;
                            varLookupJoinClause = varLookupJoinClause;
                            foreach (string varSingleLookupColumn in varArrayLookupColumn)
                            {
                            string varSingleLookupColumn2    = varSQLServColumnBeginCharacter + varSingleLookupColumn + varSQLServColumnCloseCharacter;
                            varLookupJoinClause      += " AND " + varLookupTableAlias + "." + varSingleLookupColumn2 +" = ms." + varArrayjoinColumn[zz] + " ";
                            zz++;
                            }
                         }
                         varLookupJoinClause         += " AND " + varLookupTableAlias +".IsActual=1 ";
                    }

                 
               }    


               ///////////////////////////////////////////
               // sql select for Fact
               ///////////////////////////////////////////
               string varSelectClause   = "";
               varSelectClause  += " Select ";

                    for(int i = 0; i < rowDatamartColumns.Length; i ++)
                    {
                         string varLookupTable    = rowDatamartColumns[i]["LookupTable"].ToString();
                         string varLookupTableAlias    = rowDatamartColumns[i]["LookupTableAlias"].ToString();  
                         string varselectColumn    = rowDatamartColumns[i]["selectColumn"].ToString();
                         string varColumnName     = rowDatamartColumns[i]["ColumnName"].ToString();
                         string varUnknownValue   = rowDatamartColumns[i]["ColumnUnknownValue"].ToString();

                         if (varLookupTable.Length > 0)
                         {
                            varSelectClause += " isnull(" + varLookupTableAlias + "." + varselectColumn +"," + varUnknownValue + "),"; //varColumnName varselectColumn
                         }
                         else
                         {
                            varSelectClause += "ms." + varColumnName +",";
                         }
                        
                    }
            // sql for selectionDate
            string varSQLSelectionDate =  "select CONVERT(VARCHAR, MAX(DATEADD(DD,-1,StartDateTime)), 120)  from [DWH_Control].[Logging].[BatchLog] where BatchID = ?" ;
               string varSqlMerge            = "";
               string varSqlSCD1Update       = "";
               string varDollarAction        = "$action AS [MergeAction]";
                  
               switch (varLoadingType.ToLower())
               {
               // Create sql Merge statement for SCD-2 and an Sql Update statement for SCD-1
               // New Records and SCD-2 changes are handled by the MERGE. SCD-1 changes to existing records by an UPDATE.

                case "i-ss":
                    varSqlMerge += @"
                    DECLARE @SelectionDate nvarchar(10) = ?
                    DELETE FROM " + varDatamartTableFull + @" WHERE DateKey = rtrim(convert(char,cast( @SelectionDate As Date),112))
                    
                    INSERT INTO " + varDatamartTableFull + @" 
                    " + varSelectClause + @"
                     SYSDATETIME()             AS [InsertDateTime]
                    ,SYSDATETIME()             AS [UpdateDateTime]
                    ,?                         AS [BatchID]
                    ,?                         AS [ProcessLogID]                
                    FROM "+ varDWHConnection  +@". "+ varDWHSchema  +@". "+ varDWHTable  +@" ms 
                    "+ varLookupJoinClause + @"
                    SELECT COUNT(1) AS [insert], 0, 0 FROM " + varDatamartTableFull + @" WHERE DateKey = rtrim(convert(char,cast( @SelectionDate As Date),112)) 
                    ";       
                break;
                    case "ti":
                    varSqlMerge += @"
                    INSERT INTO " + varDatamartTableFull + @" 
                    " + varSelectClause + @"
                     SYSDATETIME()             AS [InsertDateTime]
                    ,SYSDATETIME()             AS [UpdateDateTime]
                    ,?                         AS [BatchID]
                    ,?                         AS [ProcessLogID]                
                    FROM "+ varDWHConnection  +@". "+ varDWHSchema  +@". "+ varDWHTable  +@" ms 
                    "+ varLookupJoinClause + @"
                    SELECT COUNT(1) AS [insert] FROM " + varDatamartTableFull + @"
                    ";       
                break;

                }
 
               string varStgRowCountSQLStatement    = @"SELECT COUNT(1) AS [Total_Stg]
                                                        FROM " +  varDWHTableFull;  

               string varDWHRowCountSQLStatement    = @"SELECT COUNT(1) AS [Total_DWH]
                                                        FROM " + varDatamartSchemaPlus + varDatamartTablePlus;                                                    
                                                        
               string varTargetRowCountSQLStatement = @"SELECT COUNT(1) AS [Total]
                                                             , 0 AS [Actual]
                                                             , 0 AS [Inferred]
                                                             , 0 AS [Deleted] 
                                                        FROM " + varDatamartTableFull;
#>

		     <Package Name="<#=varPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>">
<!-- declare package parameters -->
                    <Parameters>
                         <Parameter Name="BatchID"              DataType="Int64">-1</Parameter>
                         <Parameter Name="ProcessLogParentID"   DataType="Int64">0</Parameter>
                    </Parameters>
<!-- declare variables -->
			     <!-- http://varigence.com/Documentation/Language/Element/AstVariableNode -->
			     <Variables>
				     <Variable Name="AuditActionStart"       DataType="String" Namespace="Audit">S</Variable>
				     <Variable Name="AuditBatchActionNone"   DataType="String" Namespace="Audit">N</Variable>
				     <Variable Name="AuditActionFinish"      DataType="String" Namespace="Audit">F</Variable>
				     <Variable Name="AuditActionError"       DataType="String" Namespace="Audit">E</Variable>
                     <Variable Name="AuditProcessLogID"      DataType="Int64"  Namespace="Audit">0</Variable>
                     <Variable Name="AuditBatchID"           DataType="Int64"  Namespace="Audit">0</Variable>
				     <Variable Name="RowCountExtract"        DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountTarget"         DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountError"          DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="PackageName"            DataType="String" Namespace="User"><#=varPackageName#></Variable>
				     <Variable Name="LoadingType"            DataType="String" Namespace="User"><#=varLoadingType#></Variable>
				     <Variable Name="RowCountSourceSTG"      DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountSourceDWH"      DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountNew"            DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountInferred"       DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountDeleted"        DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountSCD1"           DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountSCD2"           DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountUnchanged"      DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountTargetTotal"    DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountTargetActual"   DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountTargetInferred" DataType="Int32"  Namespace="RC">0</Variable>
				     <Variable Name="RowCountTargetDeleted"  DataType="Int32"  Namespace="RC">0</Variable>
                     <Variable Name="SelectionDate"          DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                    </Variables>


<!-- declare tasks -->
			     <Tasks>

<!-- <tasks> package log start -->
				     <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
					     <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] 
                                                   @Action                           = ?
                                                  ,@BatchAction                      = ?
                                                  ,@BatchID                          = ?
                                                  ,@ProcessLogParentID               = ?
                                                  ,@ProcessLogID                     = ?
                                                  ,@PackageName                      = ?
                                                  ,@SysPkgID                         = ?
                                                  ,@SysPkgName                       = ?
                                                  ,@SysPkgVersionGUID                = ?	
                                                  ,@SysPkgVersionMajor               = ?
                                                  ,@SysPkgVersionMinor               = ?
                                                  ,@SysPkgExecutionMachineName       = ?
                                                  ,@SysPkgExecutionUserName          = ?
                                                  ,@SysPkgExecutionInstanceGUID      = ?
                                                  ,@ExtractionType                   = ? 
                              </DirectInput>
					     <Parameters>
						     <Parameter Name="0"  VariableName="Audit.AuditActionStart"       Direction="Input"   DataType="String"/>
                                   <Parameter Name="1"  VariableName="Audit.AuditBatchActionNone"   Direction="Input"   DataType="String"/>
                                   <Parameter Name="2"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="3"  VariableName="ProcessLogParentID"           Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="4"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
						     <Parameter Name="5"  VariableName="User.PackageName"             Direction="Input"   DataType="String" />
						     <Parameter Name="6"  VariableName="System.PackageID"             Direction="Input"   DataType="String" />
						     <Parameter Name="7"  VariableName="System.PackageName"           Direction="Input"   DataType="String" />
						     <Parameter Name="8"  VariableName="System.VersionGUID"           Direction="Input"   DataType="String" />
						     <Parameter Name="9"  VariableName="System.VersionMajor"          Direction="Input"   DataType="Int32" />
						     <Parameter Name="10" VariableName="System.VersionMinor"          Direction="Input"   DataType="Int32" />
						     <Parameter Name="11" VariableName="System.MachineName"           Direction="Input"   DataType="String" />
						     <Parameter Name="12" VariableName="System.UserName"              Direction="Input"   DataType="String" />
						     <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input"   DataType="String" />
						     <Parameter Name="14" VariableName="User.LoadingType"             Direction="Input"   DataType="String" />
					     </Parameters>
					     <Results>
						     <Result Name="0" VariableName="Audit.AuditBatchID" />
						     <Result Name="1" VariableName="Audit.AuditProcessLogID" />
					     </Results>
				     </ExecuteSQL>

				     <Container Name="SC Load dimension <#=varDatamartTable#>" ConstraintMode="Linear">
					     <!--<PrecedenceConstraints>-->
						     <!--<Inputs>-->
							     <!--<Input OutputPathName="SQL Start Audit Package <#=varName#>.Output"/>-->
						     <!--</Inputs>-->
					     <!--</PrecedenceConstraints>-->
				          <Tasks>
                                   <ExecuteSQL Name="Source Row Count <#=varDatamartTable#>" ConnectionName ="<#=varDWHConnection#>" ResultSet="SingleRow" Disabled="false" >
					               <DirectInput><#=varStgRowCountSQLStatement#></DirectInput>
					               <Results>
						               <Result Name="0" VariableName="RC.RowCountSourceSTG" />
					               </Results>
				               </ExecuteSQL>
                                   <ExecuteSQL Name="DWH Row Count <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false" >
					               <DirectInput><#=varDWHRowCountSQLStatement#></DirectInput>
					               <Results>
						               <Result Name="0" VariableName="RC.RowCountSourceDWH" />
					               </Results>
				               </ExecuteSQL>

<#
                                   if (varLoadingType == "TI")
                                   {
#>
                                        <ExecuteSQL Name="SQL Truncate <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="None" Disabled="false">
						               <DirectInput>TRUNCATE TABLE <#=varDatamartSchemaPlus#><#=varDatamartTablePlus#></DirectInput>
                                        </ExecuteSQL>
<#
                                   }
                                   switch (varLoadingType.ToLower())
                                   {
/*                                        case "ui-t2":
#>
                                             <ExecuteSQL Name="SQL Update SCD-1 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
						                    <DirectInput><#=varSqlSCD1Update#></DirectInput>
					                         <Parameters>
                                                       <Parameter Name="0"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                                       <Parameter Name="1"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                                  </Parameters>
					                         <Results>
						                         <Result Name="0" VariableName="RC.RowCountNew" />
						                         <Result Name="1" VariableName="RC.RowCountSCD1" />
                                                       <Result Name="2" VariableName="RC.RowCountDeleted" />
					                         </Results>
                                             </ExecuteSQL>
                                             <ExecuteSQL Name="SQL Merge SCD-2 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
						                    <DirectInput><#=varSqlMerge#></DirectInput>
					                         <Parameters>
                                                       <Parameter Name="0"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                                       <Parameter Name="1"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                                  </Parameters>
					                         <Results>
						                         <Result Name="0" VariableName="RC.RowCountNew" />
						                         <Result Name="1" VariableName="RC.RowCountSCD2" />
                                                       <Result Name="2" VariableName="RC.RowCountDeleted" />
					                         </Results>
                                             </ExecuteSQL>
<#
                                             break;
                                        case "ui-t1":
                                        default:
#>                              
                                             <ExecuteSQL Name="SQL Merge SCD-1 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
						                    <DirectInput><#=varSqlMerge#></DirectInput>
					                         <Parameters>
                                                       <Parameter Name="0"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                                       <Parameter Name="1"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                                  </Parameters>
					                         <Results>
						                         <Result Name="0" VariableName="RC.RowCountNew" />
						                         <Result Name="1" VariableName="RC.RowCountSCD2" />
                                                       <Result Name="2" VariableName="RC.RowCountDeleted" />
					                         </Results>
                                             </ExecuteSQL>
<#     
                                             break;
 */                                     case "i-ss":
                                        default:
#>                              
                                            <!-- <tasks> Get selection Date -->
				                             <ExecuteSQL Name="SQL Get Selection Date  <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow" Disabled="false" >
					                            <DirectInput><#=varSQLSelectionDate#></DirectInput>
					                            <Results>
						                          <Result Name="0" VariableName="User.SelectionDate" />
					                            </Results>
                                                <Parameters>
						                          <Parameter Name="0" VariableName="Audit.AuditBatchID" DataType="Int64" />
						                         </Parameters>
				                             </ExecuteSQL>

                                             <ExecuteSQL Name="SQL Merge I-SS <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
						                    <DirectInput><#=varSqlMerge#></DirectInput>
					                         <Parameters>
                                                       <Parameter Name="0"  VariableName="User.SelectionDate" DataType="String" />
                                                       <Parameter Name="1"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                                       <Parameter Name="2"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
						                               
                                                  </Parameters>
					                         <Results>
						                         <Result Name="0" VariableName="RC.RowCountNew" />
						                         <Result Name="1" VariableName="RC.RowCountSCD2" />
                                                 <Result Name="2" VariableName="RC.RowCountDeleted" />
					                         </Results>
                                             </ExecuteSQL>
<#     
                                             break;
                                        case "ti":
                                        
#>                              
                                             <ExecuteSQL Name="SQL Insert TI <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
						                    <DirectInput><#=varSqlMerge#></DirectInput>
					                         <Parameters>
                                                       <Parameter Name="0"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                                       <Parameter Name="1"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                                  </Parameters>
					                         <Results>
						                         <Result Name="0" VariableName="RC.RowCountNew" />
					                         </Results>
                                             </ExecuteSQL>
<#     
                                             break;
                                   }
#>
				               <ExecuteSQL Name="Target Row Count <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false" >
					               <DirectInput><#=varTargetRowCountSQLStatement#></DirectInput>
					               <Results>
						               <Result Name="0" VariableName="RC.RowCountTargetTotal" />
						               <Result Name="1" VariableName="RC.RowCountTargetActual" />
						               <Result Name="2" VariableName="RC.RowCountTargetInferred" />
						               <Result Name="3" VariableName="RC.RowCountTargetDeleted" />
					               </Results>
				               </ExecuteSQL>

				          </Tasks>
				     </Container>

				     <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
					     <!--<PrecedenceConstraints>-->
						     <!--<Inputs>-->
							     <!--<Input OutputPathName="SC Load dimension <#=varDatamartTable#>.Output"/>-->
						     <!--</Inputs>-->
					     <!--</PrecedenceConstraints>-->
					     <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] 
                                                   @Action                           = ?
                                                  ,@BatchAction                      = ?
                                                  ,@BatchID                          = ?
                                                  ,@ProcessLogID                     = ?
								          ,@RowCountSourceSTG                = ?
                                                  ,@RowCountSourceDWH                = ?
								          ,@RowCountNew                      = ?
                                                  ,@RowCountInferred                 = ?
                                                  ,@RowCountDeleted                  = ?
								          ,@RowCountSCD1                     = ?
                                                  ,@RowCountSCD2                     = ?
								          ,@RowCountUnchanged                = ?
								          ,@RowCountTargetTotal              = ?
                                                  ,@RowCountTargetActual             = ?
								          ,@RowCountTargetDeleted            = ?
                                                  ,@RowCountTargetInferred           = ?
                              </DirectInput>
					     <Parameters>
						     <Parameter Name="0"  VariableName="Audit.AuditActionFinish"      Direction="Input"   DataType="String"/>
                                   <Parameter Name="1"  VariableName="Audit.AuditBatchActionNone"   Direction="Input"   DataType="String"/>
                                   <Parameter Name="2"  VariableName="Audit.AuditBatchID"           Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="3"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
						     <Parameter Name="4"  VariableName="RC.RowCountSourceSTG"         Direction="Input"   DataType="Int32" />
						     <Parameter Name="5"  VariableName="RC.RowCountSourceDWH"         Direction="Input"   DataType="Int32" />
						     <Parameter Name="6"  VariableName="RC.RowCountNew"               Direction="Input"   DataType="Int32" />
						     <Parameter Name="7"  VariableName="RC.RowCountInferred"          Direction="Input"   DataType="Int32" />
						     <Parameter Name="8"  VariableName="RC.RowCountDeleted"           Direction="Input"   DataType="Int32" />
						     <Parameter Name="9"  VariableName="RC.RowCountSCD1"              Direction="Input"   DataType="Int32" />
						     <Parameter Name="10" VariableName="RC.RowCountSCD2"              Direction="Input"   DataType="Int32" />
						     <Parameter Name="11" VariableName="RC.RowCountUnchanged"         Direction="Input"   DataType="Int32" />
						     <Parameter Name="12" VariableName="RC.RowCountTargetTotal"       Direction="Input"   DataType="Int32" />
						     <Parameter Name="13" VariableName="RC.RowCountTargetActual"      Direction="Input"   DataType="Int32" />
						     <Parameter Name="14" VariableName="RC.RowCountTargetDeleted"     Direction="Input"   DataType="Int32" />
						     <Parameter Name="15" VariableName="RC.RowCountTargetInferred"    Direction="Input"   DataType="Int32" />
					     </Parameters>
				     </ExecuteSQL>

     		     </Tasks>

<!-- OnError event -->
			<Events>
				<Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
					<Tasks>
<!-- <tasks> package log error -->
						<ExecuteSQL Name="SQL Error Audit Package <#=varDatamartTable#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
					          <DirectInput>exec [Logging].[PrcLogMessage]
                                                           @ProcessLogID                       = ?
                                                          ,@BatchID                            = ?
                                                          ,@SourceName                         = ?
  						          ,@EventCode                          = ?
                                                          ,@EventDescription                   = ?    
                                        </DirectInput>
						          <Parameters>
						               <Parameter Name="0"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                       <Parameter Name="1"  VariableName="Audit.AuditBatchID"           Direction="Input"   DataType="Int64"/>
                                       <Parameter Name="2"  VariableName="System.PackageName"             Direction="Input"   DataType="String"/>
                                       <Parameter Name="3"  VariableName="System.ErrorCode"             Direction="Input"   DataType="Int32"/>
						               <Parameter Name="4"  VariableName="System.ErrorDescription"      Direction="Input"   DataType="String" />
							     </Parameters>
						</ExecuteSQL>
					</Tasks>
				</Event>
			</Events>

		     </Package>
<# 
          } 
// create overall package

          string sqlDatamartSchemas = @"SELECT     DISTINCT 
                                                        [DatamartConnection]
                                                       ,[DatamartSchema]
                                             FROM       [Generator].[ForeverData01Table] 
                                             WHERE      [TableType]                       = 'F' 
                                             AND        [IsActive]                        = 1";
		DataTable tableDatamartSchemas = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartSchemas);
		foreach (DataRow rowDatamartSchemas in tableDatamartSchemas.Rows) 
          {
			string varDatamartConnection = rowDatamartSchemas["DatamartConnection"].ToString();
			string varDatamartSchema     = rowDatamartSchemas["DatamartSchema"].ToString();
			string varOverallPackageName      = "CTRL-Facts-" + varDatamartConnection + "-" + varDatamartSchema + "-Total";

               string varName                    = varDatamartConnection + "-" + varDatamartSchema;

			string sqlDatamartPackages      = @"SELECT   [DatamartConnection]
                                                                ,[DatamartSchema]
                                                                ,[DatamartTable]
                                                        FROM     [Generator].[ForeverData01Table] st 
                                                        WHERE    [DatamartConnection] = '" + varDatamartConnection + @"' 
                                                        AND      [DatamartSchema]     = '" + varDatamartSchema + @"' 
                                                        AND      [TableType]               = 'F' 
                                                        AND      [IsActive]                =  1 
                                                        ORDER BY [DatamartTable]
                                                       ";
			DataTable tableDatamartPackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartPackages);
#>
<!-- create overall package -->
		     <Package Name="<#=varOverallPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>" >
                    <Parameters>
                         <Parameter Name="BatchID"                    DataType="Int64">-1</Parameter>
                         <Parameter Name="ProcessLogParentID"         DataType="Int64">0</Parameter>
                    </Parameters>

     <!-- declare variables -->
			     <Variables>
				     <Variable Name="AuditActionStart"       DataType="String" Namespace="Audit">S</Variable>
				     <Variable Name="AuditBatchActionStart"  DataType="String" Namespace="Audit">S</Variable>
				     <Variable Name="AuditBatchActionNone"   DataType="String" Namespace="Audit">N</Variable>
				     <Variable Name="AuditBatchActionError"  DataType="String" Namespace="Audit">E</Variable>
				     <Variable Name="AuditBatchActionFinish" DataType="String" Namespace="Audit">F</Variable>
				     <Variable Name="AuditActionFinish"      DataType="String" Namespace="Audit">F</Variable>
				     <Variable Name="AuditActionError"       DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID"      DataType="Int64"  Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID"           DataType="Int64"  Namespace="Audit">-1</Variable>
                         <Variable Name="PackageName"            DataType="String" Namespace="User"><#=varOverallPackageName#></Variable>
			     </Variables>
			     <Tasks>
<!-- <tasks> package log start -->
				     <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
					     <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] 
                                                   @Action                           = ?
                                                  ,@BatchAction                      = ?
                                                  ,@BatchID                          = ?
                                                  ,@ProcessLogParentID               = ?
                                                  ,@ProcessLogID                     = ?
                                                  ,@PackageName                      = ?
                                                  ,@SysPkgID                         = ?
                                                  ,@SysPkgName                       = ?
                                                  ,@SysPkgVersionGUID                = ?	
                                                  ,@SysPkgVersionMajor               = ?
                                                  ,@SysPkgVersionMinor               = ?
                                                  ,@SysPkgExecutionMachineName       = ?
                                                  ,@SysPkgExecutionUserName          = ?
                                                  ,@SysPkgExecutionInstanceGUID      = ?
                              </DirectInput>
					     <Parameters>
						     <Parameter Name="0"  VariableName="Audit.AuditActionStart"       Direction="Input"   DataType="String"/>
                                   <Parameter Name="1"  VariableName="Audit.AuditBatchActionNone"   Direction="Input"   DataType="String"/>
                                   <Parameter Name="2"  VariableName="BatchID"                      Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="3"  VariableName="ProcessLogParentID"           Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="4"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
						     <Parameter Name="5"  VariableName="User.PackageName"             Direction="Input"   DataType="String" />
						     <Parameter Name="6"  VariableName="System.PackageID"             Direction="Input"   DataType="String" />
						     <Parameter Name="7"  VariableName="System.PackageName"           Direction="Input"   DataType="String" />
						     <Parameter Name="8"  VariableName="System.VersionGUID"           Direction="Input"   DataType="String" />
						     <Parameter Name="9"  VariableName="System.VersionMajor"          Direction="Input"   DataType="Int32" />
						     <Parameter Name="10" VariableName="System.VersionMinor"          Direction="Input"   DataType="Int32" />
						     <Parameter Name="11" VariableName="System.MachineName"           Direction="Input"   DataType="String" />
						     <Parameter Name="12" VariableName="System.UserName"              Direction="Input"   DataType="String" />
						     <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input"   DataType="String" />
					     </Parameters>
					     <Results>
						     <Result Name="0" VariableName="Audit.AuditBatchID" />
						     <Result Name="1" VariableName="Audit.AuditProcessLogID" />
					     </Results>
				     </ExecuteSQL>
				     <Container Name="SC Load Facts <#=varName#>" ConstraintMode="Parallel">
					     <!--<PrecedenceConstraints>-->
						     <!--<Inputs>-->
							     <!--<Input OutputPathName="SQL Start Audit Package <#=varName#>.Output"/>-->
						     <!--</Inputs>-->
					     <!--</PrecedenceConstraints>-->

                              <Tasks>
<# 
                                   foreach (DataRow rowDatamartPackages in tableDatamartPackages.Rows) 
                                   { 
                                        string varDatamartTable      = rowDatamartPackages["DatamartTable"].ToString();
                                        string varPackageName             = "Load Fact-" + varDatamartConnection + "-" + varDatamartSchema + "-" + varDatamartTable + ".dtsx";
#>
                                        <ExecutePackage Name="<#=varPackageName#>">
                                             <ExternalProjectPackage Package="<#=varPackageName#>"/>
                                             <ParameterBindings>
                                                  <ParameterBinding VariableName="Audit.AuditBatchID"       Name="BatchID" />
                                                  <ParameterBinding VariableName="Audit.AuditProcessLogID"  Name="ProcessLogParentID" />
                                             </ParameterBindings>
                              
					               </ExecutePackage>
<# 
                                   }
#>

                              </Tasks>
                         </Container>

<!-- <tasks> package log finish -->
				     <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
					     <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] 
                                                   @Action                           = ?
                                                  ,@BatchAction                      = ?
                                                  ,@BatchID                          = ?
                                                  ,@ProcessLogID                     = ?
                              </DirectInput>
					     <Parameters>
						     <Parameter Name="0"  VariableName="Audit.AuditActionFinish"      Direction="Input"   DataType="String"/>
                                   <Parameter Name="1"  VariableName="Audit.AuditActionFinish"   Direction="Input"   DataType="String"/>
                                   <Parameter Name="2"  VariableName="Audit.AuditBatchID"           Direction="Input"   DataType="Int64"/>
                                   <Parameter Name="3"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
					     </Parameters>
				     </ExecuteSQL>
			     </Tasks>

<!-- OnError event -->
			<Events>
				<Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
					<Tasks>
<!-- <tasks> package log error -->
						<ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
					          <DirectInput>exec [Logging].[PrcLogMessage]
                                                           @ProcessLogID                       = ?
                                                          ,@BatchID                            = ?
                                                          ,@SourceName                         = ?
  						          ,@EventCode                          = ?
                                                          ,@EventDescription                   = ?    
                                        </DirectInput>
						          <Parameters>
						               <Parameter Name="0"  VariableName="Audit.AuditProcessLogID"      Direction="Input"   DataType="Int64"/>
                                       <Parameter Name="1"  VariableName="Audit.AuditBatchID"           Direction="Input"   DataType="Int64"/>
                                       <Parameter Name="2"  VariableName="System.PackageName"             Direction="Input"   DataType="String"/>
                                       <Parameter Name="3"  VariableName="System.ErrorCode"             Direction="Input"   DataType="Int32"/>
						               <Parameter Name="4"  VariableName="System.ErrorDescription"      Direction="Input"   DataType="String" />
							     </Parameters>
						</ExecuteSQL>
					</Tasks>
				</Event>
			</Events>

		     </Package>
<# 
          }
#>

	</Packages>

</Biml>
