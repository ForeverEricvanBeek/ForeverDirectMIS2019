

Create view  [FDV].[GEN_LED_VOUCHER_ROW_UNION] as 
(SELECT GVR.COMPANY COMPANY
	,GVR.VOUCHER_TYPE VOUCHER_TYPE
	,GVR.VOUCHER_NO VOUCHER_NO
	,GVR.ROW_NO ROW_NO
	,GVR.ACCOUNTING_YEAR ACCOUNTING_YEAR
	,GVR.ACCOUNTING_PERIOD ACCOUNTING_PERIOD
	,GVR.VOUCHER_DATE VOUCHER_DATE
	,'NOVALUE' YEAR_PERIOD
	,GVR.YEAR_PERIOD_KEY YEAR_PERIOD_KEY
	,GVR.INTERNAL_SEQ_NUMBER INTERNAL_SEQ_NUMBER
	,CC.POSTING_COMBINATION_ID POSTING_COMBINATION_ID
	,CC.ACCOUNT ACCOUNT
	--API
	/* DECODE(CC.ACCOUNT, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEA', CC.ACCOUNT))
                                                ACCOUNT_DESC,
       CC.CODE_B                                CODE_B,
       DECODE(CC.CODE_B, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEB', CC.CODE_B))
                                                CODE_B_DESC,
       CC.CODE_C                                CODE_C,
       DECODE(CC.CODE_C, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEC', CC.CODE_C))
                                                CODE_C_DESC,
       CC.CODE_D                                CODE_D,
       DECODE(CC.CODE_D, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODED', CC.CODE_D))
                                                CODE_D_DESC,
       CC.CODE_E                                CODE_E,
       DECODE(CC.CODE_E, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEE', CC.CODE_E))
                                                CODE_E_DESC,
       CC.CODE_F                                CODE_F,
       DECODE(CC.CODE_F, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEF', CC.CODE_F))
                                                CODE_F_DESC,
       CC.CODE_G                                CODE_G,
       DECODE(CC.CODE_G, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEG', CC.CODE_G))
                                                CODE_G_DESC,
       CC.CODE_H                                CODE_H,
       DECODE(CC.CODE_H, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEH', CC.CODE_H))
                                                CODE_H_DESC,
       CC.CODE_I                                CODE_I,
       DECODE(CC.CODE_I, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEI', CC.CODE_I))
                                                CODE_I_DESC,
       CC.CODE_J                                CODE_J,
       DECODE(CC.CODE_J, NULL, NULL, AUTHORIZE_COMB_FINANCE_API.GET_CODE_PART_TEXT(GVR.COMPANY, 'CODEJ', CC.CODE_J))
                                                CODE_J_DESC,*/
	,UPPER(GVR.TRANS_CODE) TRANS_CODE
	,GVR.TEXT TEXT
	,GVR.CURRENCY_DEBET_AMOUNT CURRENCY_DEBET_AMOUNT
	,GVR.CURRENCY_CREDIT_AMOUNT CURRENCY_CREDIT_AMOUNT
	,ISNULL(GVR.CURRENCY_DEBET_AMOUNT, 0) - ISNULL(GVR.CURRENCY_CREDIT_AMOUNT, 0) CURRENCY_AMOUNT
	,GVR.DEBET_AMOUNT DEBET_AMOUNT
	,GVR.CREDIT_AMOUNT CREDIT_AMOUNT
	,ISNULL(GVR.DEBET_AMOUNT, 0) - ISNULL(GVR.CREDIT_AMOUNT, 0) AMOUNT
	
	--API
	--GEN_LED_VOUCHER_ROW_API.GET_CORRECTION_ALL__(GVR.COMPANY, GVR.VOUCHER_TYPE, GVR.ACCOUNTING_YEAR, GVR.VOUCHER_NO,
	--GVR.REFERENCE_ROW_NO, NVL(GVR.DEBET_AMOUNT,GVR.CREDIT_AMOUNT),
	--GVR.AUTO_TAX_VOU_ENTRY)
	    -- CORRECTION,
	,'N' HEADER_CORRECTION
	,GVR.CURRENCY_CODE CURRENCY_CODE
	,GVR.QUANTITY QUANTITY
	,GVR.PROCESS_CODE PROCESS_CODE
	,GVR.OPTIONAL_CODE OPTIONAL_CODE
	,GVR.PROJECT_ACTIVITY_ID PROJECT_ACTIVITY_ID
	,GVR.PARTY_TYPE_ID PARTY_TYPE_ID
	,GVR.REFERENCE_SERIE REFERENCE_SERIE
	,GVR.REFERENCE_NUMBER REFERENCE_NUMBER
	,GVR.TRANSFER_ID TRANSFER_ID
	,GVR.CORRECTED CORRECTED
	,GVR.THIRD_CURRENCY_DEBIT_AMOUNT THIRD_CURRENCY_DEBIT_AMOUNT
	,GVR.THIRD_CURRENCY_CREDIT_AMOUNT THIRD_CURRENCY_CREDIT_AMOUNT
	,ISNULL(GVR.THIRD_CURRENCY_DEBIT_AMOUNT, 0) - ISNULL(GVR.THIRD_CURRENCY_CREDIT_AMOUNT, 0) THIRD_CURRENCY_AMOUNT
	,GVR.CURRENCY_RATE CURRENCY_RATE
	,GVR.CONVERSION_FACTOR CONVERSION_FACTOR
	,GVR.MULTI_COMPANY_ID MULTI_COMPANY_ID
	
	-- DECODE(ISNULL(GVR.MULTI_COMPANY_ID,' '),' ','FALSE','TRUE')
	  --IS_MULTI_COMPANY_VOUCHER,
	--aangepast
	,CASE WHEN ISNULL(GVR.MULTI_COMPANY_ID,' ')= ' ' THEN 'FALSE'
		 ELSE 'TRUE' 
		 END IS_MULTI_COMPANY_VOUCHER
	,GV.SIMULATION_VOUCHER SIMULATION_VOUCHER
	,GV.FUNCTION_GROUP FUNCTION_GROUP
	,GVR.MATCHING_DATE MATCHING_DATE
	,GVR.MATCHING_PERIOD MATCHING_PERIOD
	,GVR.MATCHING_NO MATCHING_NO
	,GVR.MATCHING_YEAR MATCHING_YEAR
	,GVR.AUTO_TAX_VOU_ENTRY AUTO_TAX_VOU_ENTRY
	,GVR.REFERENCE_ROW_NO REFERENCE_ROW_NO
	,GVR.PERIOD_ALLOCATION PERIOD_ALLOCATION
	,GVR.AUT_CODING_RULE AUT_CODING_RULE
	,GVR.ORG_PARENT_ROW ORG_PARENT_ROW
	,GVR.PARENT_ROW PARENT_ROW
	,GVR.AUTOBOOK AUTOBOOK
	,GVR.AUT_CODING_SEQ AUT_CODING_SEQ
	,GVR.AUT_CODING_PARENT_ROW AUT_CODING_PARENT_ROW
	,ISNULL(GVR.INTERNAL_ACCOUNTING, 'N') INTERNAL_ACCOUNTING
	,ISNULL(GVR.CURR_ACCOUNTING, 'N') CURR_ACCOUNTING_DB
	,ISNULL(GVR.PROJECT_ACCOUNTING, 'N') PROJECT_ACCOUNTING_DB
	,ISNULL(GVR.SUMMERIZED, 'N') SUMMERIZED_DB
	,GVR.OLD_ROW_NO OLD_ROW_NO
	,GVR.OLD_PERIOD OLD_PERIOD
	,GVR.SEQUENCE_NO SEQUENCE_NO
	,NCF_SETTLEMENT_DATE NCF_SETTLEMENT_DATE
	,MPCCOM_ACCOUNTING_ID MPCCOM_ACCOUNTING_ID
	,GV.ACCOUNTING_YEAR_REFERENCE ACCOUNTING_YEAR_REFERENCE
	,GV.DATE_REG ENTRY_DATE
	,GV.USERID USERID
	,GVR.JOURNAL_ID JOURNAL_ID
	,GV.VOUCHER_TYPE_REFERENCE VOUCHER_TYPE_REFERENCE
	,GV.VOUCHER_NO_REFERENCE VOUCHER_NO_REFERENCE
	,GVR.ROW_GROUP_ID ROW_GROUP_ID
	,
	-- BUG 69803 START
	GVR.ALLOCATION_ID ALLOCATION_ID
	,GVR.ALLOC_LINE_ID ALLOC_LINE_ID
	
	--API
	-- PERIOD_ALLOCATION_RULE_API.GET_CREATOR_DESC (GVR.ALLOCATION_ID)
	--CREATOR_DESC
	
	-- BUG 69803 END
	-- GVR.ROWID                                OBJID, 
	--RTRIM(RPAD(TO_CHAR(GVR.ROWVERSION,'YYYYMMDDHH24MISS'),2000))
	--  OBJVERSION
	,GVR.[OBJVERSION] OBJVERSION --aangepast
FROM IFS.GEN_LED_VOUCHER_ROW GVR
JOIN IFS.GEN_LED_VOUCHER GV 
    ON GVR.COMPANY = GV.COMPANY
	AND GVR.VOUCHER_TYPE = GV.VOUCHER_TYPE
	AND GVR.ACCOUNTING_YEAR = GV.ACCOUNTING_YEAR
	AND GVR.VOUCHER_NO = GV.VOUCHER_NO
JOIN IFS.CODESTRING_COMBINATION CC 
    ON GVR.POSTING_COMBINATION_ID = CC.POSTING_COMBINATION_ID
	--API
	--AND    ('TRUE'=(SELECT AUTHORIZE_COMB_FINANCE_API.IS_ALLOWED(GVR.COMPANY, GVR.POSTING_COMBINATION_ID) FROM DUAL))
	WHERE GVR.ActInd = 'Y'
		AND GV.ActInd = 'Y'
		AND CC.ActInd = 'Y'
	)