<#@ template language ="C#" tier="1"#>
<#@ import namespace="System.Data" #>

<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <#@include file="ProjectSettings.cs"#>
     <Connections>
        <# string ProjectConnections = @"SELECT c.Name AS ConnectionName, c.ConnectionString, c.Options, c.IsProjectConnection, c.Type FROM Generator.Connection c WHERE c.IsActive = 1 AND c.Name in ('Reports','ReportsADO','DWH_Control','WMS')";
        DataTable Connections=ExternalDataAccess.GetDataTable(conGeneratorConnectionString,ProjectConnections);
        foreach (DataRow Connection in Connections.Rows) {
            string ConnectionName = Connection["ConnectionName"].ToString();
            string ConnectionString = Connection["ConnectionString"].ToString();
            string ConnectionOptions = Connection["Options"].ToString();
            bool ConnectionIsProjectConn = (bool)Connection["IsProjectConnection"];
            string ConnectionType = Connection["Type"].ToString();
            string ConnectionExpression = @"@[$Project::Con" + ConnectionName + "]";
            string ConnectionSSISOptions = "";
            if (ConnectionIsProjectConn) {
                ConnectionSSISOptions = ProjectConnectionOption;
            }
            switch (ConnectionType) {
                    case "SQLServerADO":#>
                <Connection Name="<#=ConnectionName#>" ConnectionString="<#=ConnectionString#>" <#=ConnectionSSISOptions#> >
                    <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                </Connection>
                <#break;
                case "SQLServer":
                default:#>
                <Connection Name="<#=ConnectionName#>" ConnectionString="<#=ConnectionString#>" <#=ConnectionSSISOptions#> >
                    <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                </Connection>
                <#break;
                break;
            }
        }#>
        <SmtpConnection Name="reportMail" SmtpServer="FDXEXMP01.foreverdirect.local" />
    </Connections>
    
    <Databases>
    <#foreach (DataRow Connection in Connections.Rows) {
        string ConnectionType = Connection["Type"].ToString();
        string ConnectionName = Connection["ConnectionName"].ToString();
            switch (ConnectionType) {
                case "CSV":
                    ConnectionType = ConnectionType;
                    break;
                default:#>
                    <Database Name="<#=ConnectionName#>" ConnectionName="<#=ConnectionName#>" />
                    <#break;
            }
    }#>     
    </Databases>
    
    <Schemas>
        <#string SQLDBSchemas = @"SELECT DISTINCT st.TargetSchema, st.TargetConnection FROM Generator.LoadReportTables st WHERE st.IsActive = 1";
        DataTable DBSchemas=ExternalDataAccess.GetDataTable(conGeneratorConnectionString,SQLDBSchemas);
        foreach (DataRow DBSchema in DBSchemas.Rows) {
            string TargetSchema = DBSchema["TargetSchema"].ToString();
            string TargetConnection = DBSchema["TargetConnection"].ToString();#>
            <Schema Name="<#=TargetSchema#>" DatabaseName="<#=TargetConnection#>" />
        <#}#>     
    </Schemas>
    
    <Projects>
        <PackageProject Name="<#=stagingProjectName#>" ProtectionLevel="<#=ProjectProtectionLevel#>">
            <Parameters>
                <Parameter Name="ServerName" DataType="String" IsRequired="true"><#=projectServerName#></Parameter>
                <Parameter Name="InstanceName" DataType="String" IsRequired="true"><#=projectDatabaseInstanceName#></Parameter>
                <Parameter Name="DirWork" DataType="String" IsRequired="true"><#=projectWorkDir#></Parameter>
                <Parameter Name="DirExport" DataType="String" IsRequired="true"><#=ExportDir#></Parameter>
                <Parameter Name="DirReports" DataType="String" IsRequired="true"><#=ReportsDir#></Parameter>
                <Parameter Name="DirArchive" DataType="String" IsRequired="true"><#=ArchiveDir#></Parameter>
                <Parameter Name="DirError" DataType="String" IsRequired="true"><#=ErrorDir#></Parameter>
                <Parameter Name="Environment" DataType="String" IsRequired="true"><#=Environment#></Parameter>
                <Parameter Name="TestMail" DataType="String" IsRequired="true"><#=TestMail#></Parameter>
                <#foreach (DataRow Connection in Connections.Rows) {
                    string ConnectionName = Connection["ConnectionName"].ToString();
                    string ConnectionString = Connection["ConnectionString"].ToString();
                    string ConnectionIsProjectConn = Connection["IsProjectConnection"].ToString();
                    string ConnectionType = Connection["Type"].ToString();
                    string ConnectionOptions = Connection["Options"].ToString();#>
                    <Parameter Name="Con<#=ConnectionName#>"  DataType="String" IsRequired="true"><#=ConnectionString#></Parameter>
                <#}#>
            </Parameters>
            <Packages>
                <#string sqlPackage = @"SELECT SourceConnection AS SourceConnection, con.Type AS ConnectionType, SourceSchema AS SourceSchema, ReportID AS ReportID, ExtractionType, 'Reports' AS PackagePrefix FROM Generator.LoadReportTables st Left JOIN Generator.Connection con on st.SourceConnection = con.Name WHERE st.IsActive =  1 UNION SELECT DISTINCT SourceConnection, null, TargetSchema, 'Total' AS ReportID, null, 'CTRL_Reports' AS PackagePrefix FROM Generator.LoadReportTables st";
                DataTable SSISPackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlPackage);
                foreach (DataRow SSISPackage in SSISPackages.Rows) {
                    string varSourceConnection = SSISPackage["SourceConnection"].ToString();
                    string varSourceConnectionType = SSISPackage["ConnectionType"].ToString();
                    string varSourceSchema = SSISPackage["SourceSchema"].ToString();
                    string varExtractionType = SSISPackage["ExtractionType"].ToString();
                    string varPackagePrefix = SSISPackage["PackagePrefix"].ToString();
                    string varReportID = SSISPackage["ReportID"].ToString();
                    string varPackageName = varPackagePrefix + "_" + varSourceSchema + "_" + varReportID;#>
                    <Package PackageName="<#=varPackageName#>"/>
                <#}#>               
            </Packages>
        </PackageProject>
    </Projects>
</Biml>