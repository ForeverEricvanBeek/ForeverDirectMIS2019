<#@ template language="C#" hostspecific="true" tier="3"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Languages.Biml.Connection" #>
<#@ import namespace="Varigence.Biml.Extensions" #>
<#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
<#@ include file="ProjectSettings.cs" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Packages>
        <#
        string allSourceTables = "";
        string sqlSourceExtractionTable = @"with COLUMN_CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME) AS (select TC.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, TC.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS, COLUMN_NAME Collate SQL_Latin1_General_CP1_CS_AS from [Reports].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC JOIN [Reports].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCL ON TC.CONSTRAINT_CATALOG = CCL.CONSTRAINT_CATALOG AND	TC.CONSTRAINT_SCHEMA = CCL.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CCL.CONSTRAINT_NAME),CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, PK) AS (select distinct T1.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, T1.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS, STUFF((SELECT  ',' + T2.COLUMN_NAME from COLUMN_CONSTRAINTS T2 where T1.TABLE_SCHEMA = T2.TABLE_SCHEMA AND T1.TABLE_NAME = T2.TABLE_NAME FOR XML PATH('')),1 ,1, '') PK from COLUMN_CONSTRAINTS T1) SELECT ST.SourceConnection AS [SourceConnection],ST.[SourceSchema] AS [SourceSchema],ST.[SourceTable] AS [SourceTable],SC.[Type] AS [SourceType],SC.[Options],SC.[ConnectionString],ST.[ExtractionType],'Reports' AS [TargetConnection],ST.[TargetSchema],ST.[TargetTable],CS.PK AS [PrimaryKey],ST.RunSchedule,ST.RunParam1,ST.RunParam2,ST.RunParam3,ST.Output,ST.ReportID,ST.Filename,ST.EmailTo,ST.EmailCC,ST.EmailBCC,ST.EmailAttachment,ST.IgnoreEmpty,ST.FriendlyName,'Reports' AS PackagePrefix FROM [Generator].[LoadReportTables] ST LEFT JOIN [Generator].[Connection] SC ON ST.[SourceConnection] = SC.[Name] LEFT JOIN CONSTRAINTS CS ON ST.[TargetSchema] = CS.[TABLE_SCHEMA] AND ST.[TargetTable] = CS.[TABLE_NAME] WHERE ST.[IsActive] = 1";
        DataTable tableSourceExtractionTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionTable);
        foreach (DataRow rowSourceExtractionTable in tableSourceExtractionTable.Rows) {
            allSourceTables = allSourceTables + "'" + rowSourceExtractionTable["ReportID"].ToString() + "',";
            string varExtractionSourceConnection  = rowSourceExtractionTable["SourceConnection"].ToString();
            string varExtractionFriendlyName  = rowSourceExtractionTable["FriendlyName"].ToString();
            string varReportID  = rowSourceExtractionTable["ReportID"].ToString();
            string varExtractionSourceSchema = rowSourceExtractionTable["SourceSchema"].ToString();
            string varExtractionSourceTable = rowSourceExtractionTable["SourceTable"].ToString();
            string varExtractionSourceType = rowSourceExtractionTable["SourceType"].ToString();
            string varExtractionOptions = rowSourceExtractionTable["Options"].ToString();
            string varExtractionConnectionString = rowSourceExtractionTable["ConnectionString"].ToString();
            string varExtractionType = rowSourceExtractionTable["ExtractionType"].ToString();
            string varExtractionTargetConnection = rowSourceExtractionTable["TargetConnection"].ToString();
            string varExtractionTargetSchema = rowSourceExtractionTable["TargetSchema"].ToString();
            string varExtractionTargetTable = rowSourceExtractionTable["TargetTable"].ToString();
            string varExtractionTargetTablePK = rowSourceExtractionTable["PrimaryKey"].ToString();
            string varExtractionPackagePrefix = rowSourceExtractionTable["PackagePrefix"].ToString();
            string varExtractionOutput = rowSourceExtractionTable["Output"].ToString();
            string varExtractionFilename = rowSourceExtractionTable["Filename"].ToString();
            string varExtractionEmailTo = rowSourceExtractionTable["EmailTo"].ToString();
            string varExtractionEmailCC = rowSourceExtractionTable["EmailCC"].ToString();
            string varExtractionEmailBCC = rowSourceExtractionTable["EmailBCC"].ToString();
            string varExtractionEmailAttachment = rowSourceExtractionTable["EmailAttachment"].ToString();
            string varExtractionRunSchedule = rowSourceExtractionTable["RunSchedule"].ToString();
            string varExtractionRunParam1 = rowSourceExtractionTable["RunParam1"].ToString();
            string varExtractionRunParam2 = rowSourceExtractionTable["RunParam2"].ToString();
            string varExtractionRunParam3 = rowSourceExtractionTable["RunParam3"].ToString();
            int varExtractionIgnoreEmpty = (int)rowSourceExtractionTable["IgnoreEmpty"];
            string varTargetName = varExtractionTargetConnection + "_" + varExtractionTargetSchema + "_" + varExtractionTargetTable;
            string varScriptCoreName = "ST_232feca_" + varExtractionSourceTable + "_script_1";
            string varDirectIndirect = "";
            if (varExtractionType == "D") {
                varDirectIndirect = "Direct";
            } else {
                varDirectIndirect = "Indirect";
            }

            string varSQLRowCountTargetTable = "\"SELECT count(*) FROM " + varExtractionTargetSchema + "." + varExtractionTargetTable + " WHERE Request_ID = '\" + (DT_WSTR, 100)@[User::varRequestID] + \"'\"";
            string varSQLRowCountSourceTable = "\"SELECT count(*) FROM " + varExtractionSourceSchema + "." + varExtractionSourceTable;
            string varSQLTruncateTargetTable = "TRUNCATE TABLE " + varExtractionTargetSchema    + "." + varExtractionTargetTable;
            string varSQLSelectSourceExtractionControl = "SELECT CONVERT(VARCHAR, MAX([LastLoadDate]), 120) \nFROM [Control].[DWHControl] \nWHERE [SourceConnection] = '"+varExtractionSourceConnection+"' \nAND [SourceSchema] = '"+varExtractionTargetSchema+"' \nAND [SourceTable] = '"+varExtractionTargetTable+"'";
            string varSQLUpdateDWHControl = "MERGE [Control].[DWHControl] T   \n USING (Select '"+varExtractionSourceConnection+"' as [SourceConnection] \n , '"+varExtractionTargetSchema+"' as [SourceSchema] \n , '"+varExtractionTargetTable+"' as [SourceTable] \n , '"+varExtractionType+"' as [ExtractionType] \n , ? as [BatchID]  \n , ? as [RowCountExtract]  \n , ? as [RowCountTarget]  \n , ? as [RowCountError]  \n , ? as [LastLoadDate]  \n ) S  \n ON  T.[SourceConnection] = S.[SourceConnection] AND  T.[SourceSchema] = S.[SourceSchema]  AND T.[SourceTable] = S.[SourceTable]  \n WHEN NOT MATCHED BY TARGET THEN INSERT ([SourceConnection], [SourceSchema], [SourceTable], [ExtractionType], [BatchID], [RowCountExtract],[RowCountTarget],[RowCountError],[LastLoadDate])VALUES ( S.[SourceConnection] \n , S.[SourceSchema] \n , S.[SourceTable] \n , S.[ExtractionType] \n , S.[BatchID] \n , S.[RowCountExtract] \n , S.[RowCountTarget] \n , S.[RowCountError] \n , S.[LastLoadDate]   )   \n WHEN MATCHED  THEN \n UPDATE \n SET \n  [ExtractionType] = S.[ExtractionType] \n , [BatchID] = S.[BatchID] \n , [RowCountExtract] = S.[RowCountExtract] \n , [RowCountTarget] = S.[RowCountTarget] \n , [RowCountError] = S.[RowCountError] \n , [LastLoadDate] = S.[LastLoadDate] ;";

            string varName = varExtractionTargetConnection + "_" + varExtractionSourceSchema + "_" + varReportID;
            string varPackageName = varExtractionPackagePrefix + "_" + varExtractionSourceSchema + "_" + varReportID;
    
            string varExtractionDateConversion = "CONVERT(DATETIME2(7), &apos;&quot; + @[User::LastExtractionDate] + &quot;&apos;, 120)";
            
            string varExtractionSQLStatement = "\"SELECT * FROM " + varExtractionSourceSchema + "." + varExtractionSourceTable;

            string varInsertLogStartSQL = "@[$Package::parRequestID_PP] == \"0\" ? \"INSERT INTO RC.Log (Log_Page,Log_Func,Log_RequestID,Log_Status,Log_Package,Log_Log,Log_CreatedDate) VALUES ('Package','Started','\" + (DT_WSTR, 100)@[User::varRequestID] + \"',60,'\" + @[System::PackageName] + \"','\" + (DT_WSTR, 100)@[User::varLogParameters] + \"',GETDATE())\" : \"INSERT INTO RC.Log (Log_Page,Log_Func,Log_RequestID,Log_ExecutionID,Log_Status,Log_Package,Log_Log,Log_CreatedDate) VALUES ('Package','Started','\" + (DT_WSTR, 100)@[$Package::parRequestID_PP] + \"','\" + (DT_WSTR, 100)@[$Package::parLogExecutionID_PP] + \"',70,'\" + @[System::PackageName] + \"','\" + (DT_WSTR, 100)@[User::varLogParameters] + \"',GETDATE())\"";
            string varInsertLogEndSQL = "@[$Package::parRequestID_PP] == \"0\" ? \"INSERT INTO RC.Log (Log_Page,Log_Func,Log_RequestID,Log_Status,Log_Package,Log_Log,Log_CreatedDate) VALUES ('Package','Ended','\" + (DT_WSTR, 100)@[User::varRequestID] + \"',90,'\" + @[System::PackageName] + \"','\" + (DT_WSTR, 100)@[User::varLogParameters] + \"',GETDATE())\" : \"INSERT INTO RC.Log (Log_Page,Log_Func,Log_RequestID,Log_ExecutionID,Log_Status,Log_Package,Log_Log,Log_CreatedDate) VALUES ('Package','Ended','\" + (DT_WSTR, 100)@[$Package::parRequestID_PP] + \"','\" + (DT_WSTR, 100)@[$Package::parLogExecutionID_PP] + \"',90,'\" + @[System::PackageName] + \"','\" + (DT_WSTR, 100)@[User::varLogParameters] + \"',GETDATE())\"";
            string varInsertRequestSQL = "@[$Package::parRequestID_PP] == \"0\" ? \"INSERT INTO RC.Request (Request_ReportID, Request_FriendlyName, Request_Status, Request_Email, Request_User, Request_DateStart) VALUES ('" + varReportID + "','" + varExtractionFriendlyName + "', 60, '', 'System', '\" + @[User::currentDate] + \"');SELECT SCOPE_IDENTITY() AS newID;\":\"UPDATE RC.Request SET Request_Status = 70, Request_Log = \" +  (DT_WSTR, 100)@[User::varLogExecutionID] + \" WHERE Request_ID = \" +  (DT_WSTR, 10) @[$Package::parRequestID_PP] + \"; SELECT \" +  (DT_WSTR, 10) @[$Package::parRequestID_PP] + \" AS newID\"";
            string varInsertParamsSQL = "@[$Package::parRequestID_PP] == \"0\" ? \"";
            
            string sqlparamXcolumns = @"SELECT ViewPredicatesName, ViewPredicatesFriendlyName, ViewPredicatesType FROM DWH_Control.Generator.LoadReportTablePredicates WHERE ReportID = '" + varReportID + @"' AND IsActive = 1";
                    DataTable tableparamXcolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlparamXcolumns);
                    foreach (DataRow rowparamXcolumns in tableparamXcolumns.Rows) {
                        varInsertParamsSQL = varInsertParamsSQL + "INSERT INTO RC.Param (Param_RequestID, Param_Name, Param_Value, Param_FriendlyName, Param_Type) VALUES (\" + (DT_WSTR, 100)@[User::varRequestID] + \",'" + rowparamXcolumns["ViewPredicatesName"].ToString() + "','\" + @[$Package::" + rowparamXcolumns["ViewPredicatesName"].ToString() + "_PP] + \"','" + rowparamXcolumns["ViewPredicatesFriendlyName"].ToString() + "','" + rowparamXcolumns["ViewPredicatesType"].ToString() + "');";
                    }
            varInsertParamsSQL = varInsertParamsSQL + "\" : \"SELECT 1;\"";    
            
            string varUpdateRequestSQL = "";
            if (varExtractionType == "D") {
                varUpdateRequestSQL = "\"UPDATE RC.Request SET Request_Status = 90, Request_Log = '\" + (DT_WSTR, 100)@[User::varLogExecutionID] + \"', Request_Rows = \" + (DT_WSTR, 100)@[RC::RowCountExtract] + \", Request_File = '\" + @[User::varFileAttachments] + \"', Request_DateEnd = '\" + @[User::currentDate] + \"' WHERE Request_ID = '\" +  (DT_WSTR, 100) @[User::varRequestID] + \"'\"";
            } else {
                varUpdateRequestSQL = "\"UPDATE RC.Request SET Request_Status = 90, Request_Log = '\" + (DT_WSTR, 100)@[User::varLogExecutionID] + \"', Request_Rows = \" + (DT_WSTR, 100)@[RC::RowCountTarget] + \", Request_File = '\" + @[User::varFileAttachments] + \"', Request_DateEnd = '\" + @[User::currentDate] + \"' WHERE Request_ID = '\" +  (DT_WSTR, 100) @[User::varRequestID] + \"'\"";
            }

            string MergeSQlStatementColumnsInsert = "";
            string MergeSQlStatementColumnsInto = "";
            
            string ExcelHeaderRow = "";
            string ExcelRowsValue = "";
            string ExcelRowsStyle = "";
            string CSVHeaderRow = "";
            string CSVRowsValue = "";
            string ExcelScale = "0";
            string WhereClause = " WHERE 1=1";
            string WhereRequestClause = " AND Request_ID = \" + (DT_WSTR, 100)@[User::varRequestID] + \"";
            string LogParameters = "";
            string varOutputPathName = "";
            
            string sqlwherecolumns = @"SELECT ViewPredicatesColumn, ViewPredicatesName FROM DWH_Control.Generator.LoadReportTablePredicates WHERE ReportID = '" + varReportID + @"' AND IsActive = 1";
            DataTable tablewherecolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlwherecolumns);
            foreach (DataRow rowwherecolumns in tablewherecolumns.Rows) {
                string VarWhereColumnExpression = rowwherecolumns["ViewPredicatesColumn"].ToString();
                string VarWhereColumnName = rowwherecolumns["ViewPredicatesName"].ToString();
                WhereClause =  WhereClause + " AND " + VarWhereColumnExpression + "'\" + @[$Package::" + VarWhereColumnName + "_PP] + \"'";
                LogParameters = LogParameters + "@[$Package::" + VarWhereColumnName + "_PP] + \" | \" + ";
            }
                LogParameters = LogParameters + "\"\"";
            
            string sqlsourcecolumns = @"select COL.TABLE_NAME, COL.COLUMN_NAME	AS SOURCE_COLUMN_NAME, CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN DWC.DWHColumnExpression1 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME, CASE WHEN DWC.DWHColumnExpression2 IS NOT NULL THEN DWC.DWHColumnExpression2 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME2, CASE WHEN CCU.CONSTRAINT_NAME IS NOT NULL THEN 1 else 0 end AS [PrimaryKey], CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN 1 ELSE 0 END AS ExpressionColumn, COL.ORDINAL_POSITION, CASE WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')'WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')' WHEN COL.DATA_TYPE = 'numeric' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')' WHEN COL.DATA_TYPE = 'decimal' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')' WHEN COL.DATA_TYPE = 'datetime2' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.DATETIME_PRECISION AS NVARCHAR(10)) + ')' ELSE '[' + COL.DATA_TYPE + ']' END + CASE WHEN COL.IS_NULLABLE = 'YES' THEN ' NULL' ELSE ' NOT NULL' END AS DATATYPE , COL.DATA_TYPE AS DATA_TYPE , COL.NUMERIC_SCALE AS NUMERIC_SCALE from Reports.INFORMATION_SCHEMA.COLUMNS COL LEFT JOIN [Reports].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC ON TC.TABLE_NAME = COL.TABLE_NAME AND TC.TABLE_SCHEMA = COL.TABLE_SCHEMA LEFT JOIN [Reports].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCU ON TC.CONSTRAINT_CATALOG = CCU.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = CCU.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CCU.CONSTRAINT_NAME AND COL.COLUMN_NAME = CCU.COLUMN_NAME LEFT JOIN DWH_Control.Generator.DWHExtractionColumn DWC ON DWC.DWHSchema = COL.TABLE_SCHEMA AND DWC.DWHTable = COL.TABLE_NAME AND DWC.DWHColumnName = COL.COLUMN_NAME where COL.TABLE_NAME= '" + varExtractionTargetTable + @"' and COL.TABLE_SCHEMA = '" + varExtractionTargetSchema + @"' order by COL.TABLE_NAME, COL.ORDINAL_POSITION";
            DataTable tablesourcecolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlsourcecolumns);
            foreach (DataRow rowsourcecolumns in tablesourcecolumns.Rows) {
                string VarSourceColumnName = rowsourcecolumns["SOURCE_COLUMN_NAME"].ToString();
                string VarTargetColumnName = rowsourcecolumns["TARGET_COLUMN_NAME"].ToString();
                string VarTempColumnName = rowsourcecolumns["DATATYPE"].ToString();
                string VarExcelDataType = rowsourcecolumns["DATA_TYPE"].ToString();
                string VarExcelDataScale = rowsourcecolumns["NUMERIC_SCALE"].ToString();
                string VarTargetColumnNameExp = rowsourcecolumns["TARGET_COLUMN_NAME2"].ToString();
                string VarColumnPK = rowsourcecolumns["PrimaryKey"].ToString();
                string VarColumnExpression = rowsourcecolumns["ExpressionColumn"].ToString();
                string varTargetColumnPosition = rowsourcecolumns["ORDINAL_POSITION"].ToString();
                if (VarSourceColumnName == "ProcessLogID") {
                    MergeSQlStatementColumnsInsert = MergeSQlStatementColumnsInsert + VarSourceColumnName +" ";
                } else {
                    MergeSQlStatementColumnsInsert = MergeSQlStatementColumnsInsert + VarSourceColumnName +", ";
                }
            
                if (VarSourceColumnName != "ProcessLogID" && VarSourceColumnName != "BatchID" && VarSourceColumnName != "Request_ID") {
                    MergeSQlStatementColumnsInto = MergeSQlStatementColumnsInto + VarSourceColumnName +", ";
                    ExcelHeaderRow = ExcelHeaderRow + "worksheet.Cells[1, " + varTargetColumnPosition + "].Value = \"" + VarTargetColumnName + "\";" + "\n";
                    CSVHeaderRow = CSVHeaderRow + "\"" + VarTargetColumnName + "\" + \",\" + ";
                    CSVRowsValue = CSVRowsValue + "reader[\"" + VarTargetColumnName + "\"]" + " + \",\" + ";
                    if(VarExcelDataType == "numeric" || VarExcelDataType == "decimal") {
                        if (VarExcelDataScale == "2") {
                            ExcelScale = "0.00";
                        } else if (VarExcelDataScale == "4") {
                            ExcelScale = "0.0000";
                        } else {
                            ExcelScale = "0";
                        }
                        ExcelRowsValue = ExcelRowsValue + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Value = reader[\"" + VarTargetColumnName + "\"];" + "\n";
                        ExcelRowsStyle = ExcelRowsStyle + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Style.Numberformat.Format = \"" + ExcelScale + "\";" + "\n";
                    } else if (VarExcelDataType == "bigint" || VarExcelDataType == "int" || VarExcelDataType == "smallint" || VarExcelDataType == "tinyint") {
                        ExcelRowsValue = ExcelRowsValue + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Value = reader[\"" + VarTargetColumnName + "\"];" + "\n";
                        ExcelRowsStyle = ExcelRowsStyle + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Style.Numberformat.Format = \"0\";" + "\n";
                    } else if (VarExcelDataType == "datetime2") {
                        ExcelRowsValue = ExcelRowsValue + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Value = reader[\"" + VarTargetColumnName + "\"];" + "\n";
                        ExcelRowsStyle = ExcelRowsStyle + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Style.Numberformat.Format = \"dd-MM-yyyy HH:mm\";" + "\n";                                       
                    } else {
                        ExcelRowsValue = ExcelRowsValue + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Value = reader[\"" + VarTargetColumnName + "\"].ToString();" + "\n";
                        ExcelRowsStyle = ExcelRowsStyle + "worksheet.Cells[row_index, " + varTargetColumnPosition + "].Style.Numberformat.Format = \"General\";" + "\n";
                    }
                }
            }
            CSVHeaderRow = "sb.AppendLine(" + CSVHeaderRow.Substring(0, CSVHeaderRow.Length - 9) + ");";
            CSVRowsValue = "sb.AppendLine(" + CSVRowsValue.Substring(0, CSVRowsValue.Length - 9) + ");";
            string sqlStatementScript = "";
            if (varDirectIndirect == "Direct") {
                        sqlStatementScript = "SELECT " + MergeSQlStatementColumnsInto + "'-' AS PH FROM " + varExtractionSourceSchema + "." + varExtractionSourceTable;
            } else {
                        sqlStatementScript = "SELECT " + MergeSQlStatementColumnsInto + "'-' AS PH FROM " + varExtractionTargetSchema + "." + varExtractionTargetTable + " WHERE Request_ID = ";
            }
            string MergeSQlStatement = "\"INSERT INTO Reports." + varExtractionTargetSchema + "."+ varExtractionTargetTable + "(";
            MergeSQlStatement = MergeSQlStatement + MergeSQlStatementColumnsInsert;
            MergeSQlStatement = MergeSQlStatement + ") SELECT ";
            MergeSQlStatement = MergeSQlStatement + MergeSQlStatementColumnsInto + "? AS Request_ID, ? AS BatchID, ? as ProcessLogID";
            MergeSQlStatement = MergeSQlStatement + " FROM " + varExtractionSourceSchema + "." + varExtractionSourceTable + " " + WhereClause + "\"";
            
            varSQLRowCountSourceTable = varSQLRowCountSourceTable + " " + WhereClause + "\"";
            varExtractionSQLStatement = varExtractionSQLStatement + " " + WhereClause + "\"";
            #>
    
            <Package Name="<#=varPackageName#>" ConstraintMode="Linear" ProtectionLevel="<#=ProjectProtectionLevel#>">
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                    <Parameter Name="parToLine_PP" DataType="String"><#=varExtractionEmailTo#></Parameter>
                    <Parameter Name="parCCLine_PP" DataType="String"><#=varExtractionEmailCC#></Parameter>
                    <Parameter Name="parBCCLine_PP" DataType="String"><#=varExtractionEmailBCC#></Parameter>
                    <Parameter Name="parRequestID_PP" DataType="String">0</Parameter>
                    <Parameter Name="parWhere_PP" DataType="String">Schedule</Parameter>
                    <Parameter Name="parLogExecutionID_PP" DataType="String">0</Parameter>
                    <#  string sqlparam1columns = @"SELECT ViewPredicatesName ,ViewPredicatesValue FROM DWH_Control.Generator.LoadReportTablePredicates WHERE ReportID = '" + varReportID + @"' AND IsActive = 1";
                    DataTable tableparam1columns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlparam1columns);
                    foreach (DataRow rowparam1columns in tableparam1columns.Rows) {
                        #><Parameter Name="<#=rowparam1columns["ViewPredicatesName"].ToString()#>_PP" DataType="String"><#=rowparam1columns["ViewPredicatesName"].ToString()#></Parameter><#
                    }#>
                </Parameters>
    
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64" Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64" Namespace="Audit">-1</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                    <Variable Name="RowCountExtract" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountTarget" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountError" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="LastExtractionDate" DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                    <Variable Name="ExtractionType" DataType="String" Namespace="User"><#=varExtractionType#></Variable>
                    <Variable Name="SelectionDate" DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                    <#if (varExtractionSourceType == "Oracle") {#>
                    <Variable Name="SourceExtractionSQL" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=varExtractionSQLStatement#></Variable>
                    <#}#>
                    <Variable Name="varFileAttachments" DataType="String" Namespace="User">\\FDOFS01\Data\Reports\Temp\test.csv</Variable>
                    <Variable Name="varEmailBody" DataType="String" Namespace="User">Something went wrong!</Variable>
                    <Variable Name="IgnoreEmpty" DataType="Int32" Namespace="User"><#=varExtractionIgnoreEmpty#></Variable>
                    <Variable Name="sqlCountDWH" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=varSQLRowCountSourceTable#></Variable>
                    <Variable Name="sqlCountResult" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=varSQLRowCountTargetTable#></Variable>
                    <Variable Name="sqlInsertReport" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@MergeSQlStatement#></Variable>
                    <Variable Name="sqlInsertRequest" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@varInsertRequestSQL#></Variable>
                    <Variable Name="sqlInsertParams" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@varInsertParamsSQL#></Variable>
                    <Variable Name="sqlUpdateRequest" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@varUpdateRequestSQL#></Variable>
                    <Variable Name="sqlInsertLogStart" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@varInsertLogStartSQL#></Variable>
                    <Variable Name="sqlInsertLogEnd" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@varInsertLogEndSQL#></Variable>
                     <#if (varDirectIndirect == "Direct") {#>
                    <Variable Name="sqlWhereClause" DataType="String" Namespace="User" EvaluateAsExpression="true">"<#=WhereClause#>"</Variable>
                    <#}#>
                    <Variable Name="varToLine" DataType="String" Namespace="User" EvaluateAsExpression="true">@[$Project::Environment]  == "PRD" ? @[$Package::parToLine_PP] : @[$Project::TestMail]</Variable>
                    <Variable Name="varCCLine" DataType="String" Namespace="User" EvaluateAsExpression="true">@[$Project::Environment]  == "PRD" ? @[$Package::parCCLine_PP] : ""</Variable>
                    <Variable Name="varBCCLine" DataType="String" Namespace="User" EvaluateAsExpression="true">@[$Project::Environment]  == "PRD" ? @[$Package::parBCCLine_PP] : ""</Variable>
                    <Variable Name="varWhere" DataType="String" Namespace="User" EvaluateAsExpression="true">@[$Package::parWhere_PP]</Variable>
                    <Variable Name="varLogExecutionID" DataType="String" Namespace="User" EvaluateAsExpression="true">@[$Package::parLogExecutionID_PP]</Variable>
                    <Variable Name="varRequestID" DataType="String" Namespace="User">0</Variable>
                    <Variable Name="currentDate" DataType="String" Namespace="User" EvaluateAsExpression="true">(DT_WSTR,50) GETDATE()</Variable>
                    <Variable Name="varLogParameters" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=@LogParameters#></Variable>
                </Variables>
    
                <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?,@ExtractionType = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0"  VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1"  VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2"  VariableName="BatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3"  VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4"  VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5"  VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6"  VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7"  VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8"  VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9"  VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                            <Parameter Name="14" VariableName="User.ExtractionType" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
    
                    <Container Name="SC Load <#=varName#>">
                        <Tasks>

                            <ExecuteSQL Name="SQL Insert Request <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <VariableInput VariableName="User.sqlInsertRequest" />
                                <Parameters>
                                    <Parameter Name="0" VariableName="User.currentDate" DataType="String" />
                                </Parameters>
                                <Results><Result Name="0" VariableName="User.varRequestID" /></Results>                         
                            </ExecuteSQL>

                            <ExecuteSQL Name="SQL Insert Log Start <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Insert Request <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <VariableInput VariableName="User.sqlInsertLogStart" />
                            </ExecuteSQL>                            
                            
                            <ExecuteSQL Name="SQL Get last extraction date <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Insert Log Start <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <DirectInput><#=varSQLSelectSourceExtractionControl#></DirectInput>
                                <Results><Result Name="0" VariableName="User.LastExtractionDate" /></Results>
                            </ExecuteSQL>
                            
                            <#if (varExtractionType == "FQ") {#>
                                <ExecuteSQL Name="SQL Truncate target <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Get last extraction date <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                    <DirectInput><#=varSQLTruncateTargetTable#></DirectInput>
                                </ExecuteSQL>
                            <#}#>

                            <ExecuteSQL Name="SQL Source row count <#=varName#>" ConnectionName ="<#=varExtractionSourceConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <#if (varExtractionType == "FQ") {#>
                                            <Input OutputPathName="SQL Truncate target <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                        <#} else {#>
                                            <Input OutputPathName="SQL Get last extraction date <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />   
                                        <#}#>
                                    </Inputs>
                                </PrecedenceConstraints>
                                <VariableInput VariableName="User.sqlCountDWH" />
                                <Results><Result Name="0" VariableName="RC.RowCountExtract" /></Results>
                            </ExecuteSQL>
   
                            <ExecuteSQL Name="SQL Insert Param <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Source row count <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <VariableInput VariableName="User.sqlInsertParams" />
                                <Parameters>
                                    <Parameter Name="0" VariableName="User.varRequestID" DataType="Int64" />
                                </Parameters>
                            </ExecuteSQL>
                            
                            <#if (varExtractionSourceType == "SQLServer") {#>
                            <ExecuteSQL Name="SQL Insert <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Insert Param <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <VariableInput VariableName="User.sqlInsertReport" />
                                <Parameters>
                                    <Parameter Name="0" VariableName="User.varRequestID" DataType="Int64" />
                                    <Parameter Name="1" VariableName="Audit.AuditBatchID" DataType="Int64" />
                                    <Parameter Name="2" VariableName="Audit.AuditProcessLogID" DataType="Int64" />
                                </Parameters>
                            </ExecuteSQL>
                            
                            <# } else if (varExtractionSourceType == "Oracle") {

                            string sqlSourceExtractionColumn = @"SELECT ic.COLUMN_NAME AS [SourceColumnName],ic.COLUMN_NAME AS [SourceColumnExpression],ic.DATA_TYPE AS [SourceColumnType],ISNULL(ic.CHARACTER_MAXIMUM_LENGTH, 0) AS [SourceColumnLength],ISNULL(ic.NUMERIC_PRECISION, 0) AS [SourceColumnPrecision],ISNULL(ic.NUMERIC_SCALE, 0) AS [SourceColumnScale],ic.COLUMN_NAME AS [TargetColumnName],ic.COLUMN_NAME AS [TargetColumnExpression],ic.DATA_TYPE AS [TargetColumnType],ISNULL(ic.CHARACTER_MAXIMUM_LENGTH, 0) AS [TargetColumnLength],ISNULL(ic.NUMERIC_PRECISION, 0) AS [TargetColumnPrecision] ,ISNULL(ic.NUMERIC_SCALE, 0) AS [TargetColumnScale] ,0 AS [ColumnConversionNecessary] ,dc.[DataTypeExpression] FROM [Reports].INFORMATION_SCHEMA.COLUMNS ic INNER JOIN [Generator].[LoadReportTables] st ON st.TargetSchema = ic.TABLE_SCHEMA AND st.TargetTable = ic.TABLE_NAME AND st.[IsActive] = 1 LEFT JOIN [Generator].[DataTypeConversion] dc ON ic.DATA_TYPE collate SQL_Latin1_General_CP1_CS_AS = [DataType] collate SQL_Latin1_General_CP1_CS_AS WHERE st.[SourceConnection] = '" + varExtractionSourceConnection + @"' AND st.[SourceSchema] = '" + varExtractionSourceSchema + @"' AND st.[SourceTable] = '" + varExtractionSourceTable + @"'  AND ic.COLUMN_NAME not in ('BatchID','ProcessLogID') ORDER BY ic.ORDINAL_POSITION";
                                DataTable tableSourceExtractionColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionColumn);
                                int varSourceExtractionColumnCount = tableSourceExtractionColumn.Rows.Count;
                                
                                string varSQLStatementColumns = "";
                                foreach (DataRow rowSourceExtractionColumn in tableSourceExtractionColumn.Rows) {
                                    string varSourceColumnName = rowSourceExtractionColumn["SourceColumnExpression"].ToString();
                                    if (varSourceColumnName == rowSourceExtractionColumn["SourceColumnName"].ToString() && varExtractionSourceType == "SQLServer") {
                                        varSourceColumnName = "[" + varSourceColumnName + "]";
                                    }
                                    int varSourceColumnConversionNecessary = (int)rowSourceExtractionColumn["ColumnConversionNecessary"];
                                    varSQLStatementColumns += ", " + varSourceColumnName;
                                }
                                if (varSQLStatementColumns.Length > 0) { //remove first comma
                                    varSQLStatementColumns = varSQLStatementColumns.Substring(2, varSQLStatementColumns.Length - 2);
                                } else {
                                    varSQLStatementColumns = "*";
                                }
                                string varExtractionIDConversion = "0";
                                varExtractionIDConversion = "&apos;&quot; + @[User::LastExtractionID] + &quot;&apos;";
                                switch (varExtractionSourceType) {
                                    case "SQLServer":
                                        varExtractionDateConversion = "CONVERT(DATETIME2(7), &apos;&quot; + @[User::LastExtractionDate] + &quot;&apos;, 120)";
                                        break;
                                    case "Oracle":
                                        varExtractionDateConversion = "TO_DATE(&apos;&quot; + @[User::LastExtractionDate] + &quot;&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;)"; 
                                        break;
                                    default:
                                        varExtractionDateConversion = "CAST(&apos;&quot; + @[User::LastExtractionDate] + &quot;&apos; AS TIMESTAMP)";
                                        break;
                                }
                            
                            #>
                            <Dataflow Name="Dataflow Extract <#=varName#>">
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Insert Param <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <Transformations>
                                    <#varOutputPathName = "OLEDB Source " + varName;#>
                                    <OleDbSource Name="<#=varOutputPathName#>" ConnectionName="<#=varExtractionSourceConnection#>" ValidateExternalMetadata="true">
                                        <ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
                                        <VariableInput VariableName="User.SourceExtractionSQL" />
                                    </OleDbSource>

                                    <DerivedColumns Name="Derived Columns Error <#=varName#>"> 
                                    <InputPath OutputPathName="<#=varOutputPathName#>.Error" />

                                        <#// Voeg primary key toe aan error message
                                        string varExtractionTargetTablePKLogging =" + (DT_WSTR,50)" + varExtractionTargetTablePK.Replace(",","+ \"; \" + (DT_WSTR,50)");
                                        if (varExtractionTargetTablePK.Length > 1) {
                                            varExtractionTargetTablePKLogging = varExtractionTargetTablePKLogging;
                                        } else {
                                            varExtractionTargetTablePKLogging = " + \"unknown\"";
                                        }#>
                                        <Columns>
                                            <Column Name="RecordType" DataType="String" Length="1"  ReplaceExisting="false">(DT_WSTR,1)"E"</Column>
                                            <Column Name="ErrorMessage" DataType="String" Length="200" ReplaceExisting="false">(DT_WSTR,6)"Code: " + (DT_WSTR,12)[ErrorCode] + (DT_WSTR,10)"; Column: " + (DT_WSTR,2)" (" + (DT_WSTR,4)[ErrorColumn] + (DT_WSTR,1)")" + " Key: "<#=varExtractionTargetTablePKLogging#></Column>
                                        </Columns>
                                    </DerivedColumns>
                                        
                                        <RowCount Name="RowCount Error <#=varName#>" VariableName="RC.RowCountError">
                                            <InputPath OutputPathName="Derived Columns Error <#=varName#>.Output" />
                                        </RowCount>

                                        
                                        <UnionAll Name="Union <#=varName#>">
                                            <InputPaths>
                                                <InputPath OutputPathName="<#=varOutputPathName#>.Output" />
                                                <InputPath OutputPathName="RowCount Error <#=varName#>.Output" /> 
                                            </InputPaths>
                                        </UnionAll>
                                        <#varOutputPathName = "Union " + varName + ".Output";#>
 
                                        <DerivedColumns Name="Derived Column <#=varName#>">
                                            <InputPath OutputPathName="<#=varOutputPathName#>" />
                                            <Columns>
                                                <#foreach (DataRow rowSourceExtractionColumn in tableSourceExtractionColumn.Rows) {
                                                    string varSourceColumnName = rowSourceExtractionColumn["SourceColumnName"].ToString();
                                                    string varTargetColumnExpression = rowSourceExtractionColumn["TargetColumnExpression"].ToString();
                                                    string varSourceColumnType = rowSourceExtractionColumn["SourceColumnType"].ToString();
                                                    string varTargetDataTypeExpression = rowSourceExtractionColumn["DataTypeExpression"].ToString();
                                                    
                                                    if (varTargetColumnExpression == varSourceColumnName && varExtractionSourceType == "SQLServer")  {
                                                        varTargetColumnExpression = "[" + varTargetColumnExpression + "]";
                                                    }
                                                    
                                                    if (AllCharacterDataTypes.ToLower().IndexOf("-"+varSourceColumnType.ToLower()+"-") != -1) {#>
                                                        <Column Name="<#=varSourceColumnName#>" DataType="<#=varTargetDataTypeExpression#>" ReplaceExisting="true">TRIM(<#=varTargetColumnExpression#>)</Column>
                                                        <#} else if (varSourceColumnName != rowSourceExtractionColumn["TargetColumnExpression"].ToString()) {#>
                                                        <Column Name="<#=varSourceColumnName#>" DataType="<#=varTargetDataTypeExpression#>" ReplaceExisting="true"><#=varTargetColumnExpression#></Column>
                                                    <#}
                                                } #>
                                                <Column Name="BatchID" DataType="Int64" Length="8" ReplaceExisting="false">@[Audit::AuditBatchID]</Column>
                                                <Column Name="ProcessLogID" DataType="Int64" Length="8" ReplaceExisting="false">@[Audit::AuditProcessLogID]</Column>
                                                <Column Name="Request_ID" DataType="Int64" ReplaceExisting="false">@[User::varRequestID]</Column>
                                            </Columns>
                                        </DerivedColumns>
 
                                         <#DataRow[] DataConversionRows;
                                        string FilterExpression = "ColumnConversionNecessary = 1";
                                        DataConversionRows = tableSourceExtractionColumn.Select(FilterExpression);
                                        
                                        if (DataConversionRows.Count() > 0) {                         #>
                                            <DataConversion Name="Data Conversion <#=varName#>">
                                            <InputPath OutputPathName="Derived Column <#=varName#>.Output" />
                                                <Columns>
                                                    <#foreach (DataRow rowSourceExtractionColumn in tableSourceExtractionColumn.Rows)  {
                                                        string varSourceColumnName = rowSourceExtractionColumn["SourceColumnName"].ToString();
                                                        string varTargetColumnName = rowSourceExtractionColumn["TargetColumnName"].ToString();
                                                        string varTargetColumnType = rowSourceExtractionColumn["TargetColumnType"].ToString();
                                                        string varTargetDataTypeExpression = rowSourceExtractionColumn["DataTypeExpression"].ToString();
                                                        int varTargetColumnLength = (int)rowSourceExtractionColumn["TargetColumnLength"];
                                                        int varTargetColumnPrecision = (int)rowSourceExtractionColumn["TargetColumnPrecision"];
                                                        int varTargetColumnScale = (int)rowSourceExtractionColumn["TargetColumnScale"];
                                                        int varSourceColumnConversionNecessary = (int)rowSourceExtractionColumn["ColumnConversionNecessary"];
                                                        
                                                        if (varSourceColumnConversionNecessary == 1) {#>
                                                            <Column SourceColumn="<#=varSourceColumnName#>" TargetColumn="dc.<#=varSourceColumnName#>" DataType="<#=varTargetDataTypeExpression#>" Length="<#=varTargetColumnLength#>" Precision="<#=varTargetColumnPrecision#>" Scale="<#=varTargetColumnScale#>" />
                                                        <#}
                                                    }#>
                                                </Columns>
                                            </DataConversion>
                                            <#varOutputPathName = "Data Conversion " + varName;
                                            } else {
                                                varOutputPathName = "Derived Column " + varName;
                                            }#>
    
                                            <RowCount Name="RowCount Extraction <#=varName#>" VariableName="RC.RowCountExtract">
                                                <InputPath OutputPathName="<#=varOutputPathName#>.Output" />
                                            </RowCount>
                                    
                                            <OleDbDestination Name="OLEDB Target <#=varName#>" ConnectionName="<#=varExtractionTargetConnection#>" ValidateExternalMetadata="false" TableLock="false">
                                                <InputPath OutputPathName = "RowCount Extraction <#=varName#>.Output" />
                                                <ExternalTableOutput Table = "[<#=varExtractionTargetSchema + "].[" + varExtractionTargetTable#>]" />
                                                <#var StgConnection = RootNode.DbConnections[ReportConnection];
                                                var StgMetadata = StgConnection.ImportDB(varExtractionTargetSchema, varExtractionTargetTable, ImportOptions.ExcludeForeignKey | ImportOptions.ExcludeColumnDefault | ImportOptions.ExcludeViews);
                                                foreach (var TabTargetTable in StgMetadata.TableNodes.Where(item => item.Name == varExtractionTargetTable)) {#>
                                                    <Columns>
                                                    <#foreach (var column in TabTargetTable.Columns) {
                                                        string varSourceColumnName = "";
                                                        string varTargetColumnName = "";
                                                        int varSourceColumnConversionNecessary  = 0;
                                                        FilterExpression = "TargetColumnName = '" + column.Name + "'";
                                                        DataRow[] SourceExtractionRows;
                                                        SourceExtractionRows = tableSourceExtractionColumn.Select(FilterExpression);
                                                        if (SourceExtractionRows.Count() > 0) {
                                                            DataRow rowSourceExtractionColumn  = SourceExtractionRows[0];
                                                            varSourceColumnName = rowSourceExtractionColumn["SourceColumnName"].ToString();
                                                            varTargetColumnName = rowSourceExtractionColumn["TargetColumnName"].ToString();
                                                            varSourceColumnConversionNecessary = (int)rowSourceExtractionColumn["ColumnConversionNecessary"];
                                                        } else {
                                                            varSourceColumnName = column.Name;
                                                            varTargetColumnName = column.Name;
                                                        }
                                                        if (varSourceColumnConversionNecessary == 1)  { #>
                                                            <Column SourceColumn="dc.<#=varSourceColumnName#>" TargetColumn="<#=varTargetColumnName#>" />
                                                            <#} else {#>
                                                            <Column SourceColumn="<#=varSourceColumnName#>" TargetColumn="<#=varTargetColumnName#>" />
                                                        <#}        
                                                    }#>
                                                    </Columns>
                                                <#}#>
                                            </OleDbDestination>
                                        </Transformations>
                                    </Dataflow>
                                <#}#>

                            <#if (varDirectIndirect == "Indirect") {#>
                            <ExecuteSQL Name="SQL Target row count <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <#if (varExtractionSourceType == "SQLServer") {#>
                                            <Input OutputPathName="SQL Insert <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                        <#} else if (varExtractionSourceType == "Oracle") {#>
                                            <Input OutputPathName="Dataflow Extract <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                        <#}#>    
                                    </Inputs>
                                </PrecedenceConstraints>
                                <VariableInput VariableName="User.sqlCountResult" />
                                <Results><Result Name="0" VariableName="RC.RowCountTarget" /></Results>
                            </ExecuteSQL>
                            <#}#>
    
                            <ExecuteSQL Name="SQL Update contol record <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None" Disabled="false" >
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <#if (varDirectIndirect == "Indirect") {#>
                                            <Input OutputPathName="SQL Target row count <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                        <#} else {#>
                                            <#if (varExtractionSourceType == "SQLServer") {#>
                                                <Input OutputPathName="SQL Insert <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                            <#} else if (varExtractionSourceType == "Oracle") {#>
                                                <Input OutputPathName="Dataflow Extract <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                            <#}#>                                            
                                        <#}#>
                                    </Inputs>
                                </PrecedenceConstraints>
                                <DirectInput><#=varSQLUpdateDWHControl#></DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="BatchID" DataType="Int64" />
                                    <Parameter Name="1" VariableName="RC.RowCountExtract" DataType="Int32" />
                                    <Parameter Name="2" VariableName="RC.RowCountTarget" DataType="Int32" />
                                    <Parameter Name="3" VariableName="RC.RowCountError" DataType="Int32" />
                                    <Parameter Name="4" VariableName="System.StartTime" DataType="DateTime" />
                                </Parameters>
                            </ExecuteSQL>
                            
                            <#if (varExtractionOutput == "CSV") {#>
                            <Script ProjectCoreName="<#=varScriptCoreName#>" Name="Script <#=varExtractionFilename#>">
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Update contol record <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="ExpressionAndConstraint" Expression="@[RC::RowCountExtract] > 0"/>
                                    </Inputs>
                                </PrecedenceConstraints>
                                <ScriptTaskProject>
                                    <ScriptTaskProject ProjectCoreName="<#=varScriptCoreName#>" Name="<#=varExtractionSourceTable#>">
                                        <AssemblyReferences>
                                            <AssemblyReference AssemblyPath="System.dll" />
                                            <AssemblyReference AssemblyPath="System.IO.dll" />
                                            <AssemblyReference AssemblyPath="System.Data.dll" />
                                            <AssemblyReference AssemblyPath="Microsoft.SqlServer.ManagedDTS.dll" />
                                            <AssemblyReference AssemblyPath="System.Windows.Forms.dll" />
                                            <AssemblyReference AssemblyPath="System.Core.dll" />
                                            <AssemblyReference AssemblyPath="System.Xml.dll" />
                                            <AssemblyReference AssemblyPath="Microsoft.SqlServer.ScriptTask" />
                                        </AssemblyReferences>
                                        <Files>
                                            <File Path="AssemblyInfo.cs">
#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Text;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_7604ef180b844ecc9d9a43d7036fe914 {
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase {
		public void Main() {                
		    string vOutputPath = (string)Dts.Variables["DirReports"].Value;
		    string vRequestID = (string)Dts.Variables["varRequestID"].Value;
		    <#if (varDirectIndirect == "Direct") {#>
		    string vWhereClause = (string)Dts.Variables["sqlWhereClause"].Value;
		    <#}#>
            string vYear = DateTime.Now.ToString("yyyy");
            string vMonth = DateTime.Now.ToString("MM");
            string vTimeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            string vOutputPathFull = vOutputPath + @"\<#=varExtractionFilename#>\" + vYear + @"\" + vMonth + @"\<#=varExtractionFilename#>_" + vTimeStamp  + "_" + vRequestID + ".csv";
            string vOutPutPathCheck = vOutputPath + @"\<#=varExtractionFilename#>\" + vYear + @"\" + vMonth;
            string mySqlStatement = "<#=sqlStatementScript#>";
            <#if (varDirectIndirect == "Direct") {#>
            mySqlStatement += vWhereClause;
            <#} else {#>
            mySqlStatement += vRequestID;
            <#}#>
            int row_index = 2;
            System.Data.SqlClient.SqlConnection myADONETConnection = new SqlConnection();
            myADONETConnection = (SqlConnection)(Dts.Connections["ReportsADO"].AcquireConnection(Dts.Transaction) as SqlConnection);
            System.Data.SqlClient.SqlCommand myCommand = new System.Data.SqlClient.SqlCommand(mySqlStatement, myADONETConnection);
            SqlDataReader reader = myCommand.ExecuteReader(CommandBehavior.CloseConnection);
            
            Dts.Variables["varFileAttachments"].Value = vOutputPathFull;
            StringBuilder sb = new StringBuilder();
            
            #region ExcelHeader
            <#=CSVHeaderRow#>
            #endregion

            #region ExcelBody
            while (reader.Read()) {
                <#=CSVRowsValue#>
                row_index += 1;
            }
            #endregion

            reader.Close();
            myADONETConnection.Close();

            #region ExcelFooter
            #endregion

            #region MailData
            string emailBody = @"This is an automated email containing an Data warehouse report.
Report is located at: ";
            Dts.Variables["varEmailBody"].Value = emailBody + vOutputPathFull;
            #endregion
            
            Directory.CreateDirectory(vOutPutPathCheck);
            File.WriteAllText(vOutputPathFull, sb.ToString());
            
			Dts.TaskResult = (int)ScriptResults.Success;
		}
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

	}
}
                                            </File>
                                        </Files>
                                        <ReadOnlyVariables>
                                            <Variable Namespace="$Project" DataType="String" VariableName="DirReports" />
                                            <Variable Namespace="User" DataType="String" VariableName="varRequestID" />
                                            <#if (varDirectIndirect == "Direct") {#>
                                            <Variable Namespace="User" DataType="String" VariableName="sqlWhereClause" />
                                            <#}#>
                                        </ReadOnlyVariables>
                                        <ReadWriteVariables>
                                            <Variable Namespace="User" DataType="String" VariableName="varFileAttachments" />
                                            <Variable Namespace="User" DataType="String" VariableName="varEmailBody" />
                                        </ReadWriteVariables>
                                    </ScriptTaskProject>
                                </ScriptTaskProject>
                            </Script>
                            <#}#>
                            <#if (varExtractionOutput == "Excel") {#>
                            <Script ProjectCoreName="<#=varScriptCoreName#>" Name="Script <#=varExtractionFilename#>">
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Update contol record <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="ExpressionAndConstraint" Expression="@[RC::RowCountExtract] > 0" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <ScriptTaskProject>
                                    <ScriptTaskProject ProjectCoreName="<#=varScriptCoreName#>" Name="<#=varExtractionSourceTable#>">
                                        <AssemblyReferences>
                                            <AssemblyReference AssemblyPath="System.dll" />
                                            <AssemblyReference AssemblyPath="System.IO.dll" />
                                            <AssemblyReference AssemblyPath="System.Data.dll" />
                                            <AssemblyReference AssemblyPath="Microsoft.SqlServer.ManagedDTS.dll" />
                                            <AssemblyReference AssemblyPath="System.Windows.Forms.dll" />
                                            <AssemblyReference AssemblyPath="System.Core.dll" />
                                            <AssemblyReference AssemblyPath="C:\Windows\Microsoft.NET\assembly\GAC_64\EPPlus\v4.0_4.5.3.1__ea159fdaa78159a1\EPPlus.dll" />
                                            <AssemblyReference AssemblyPath="System.Xml.dll" />
                                            <AssemblyReference AssemblyPath="Microsoft.SqlServer.ScriptTask" />
                                        </AssemblyReferences>
                                        <Files>
                                            <File Path="AssemblyInfo.cs">
#region Namespaces
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using OfficeOpenXml;
using OfficeOpenXml.Style;
#endregion

namespace ST_7604ef180b844ecc9d9a43d7036fe914 {
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase {
		public void Main() {
            using (var package = new ExcelPackage()) {
                string vOutputPath = (string)Dts.Variables["DirReports"].Value;
                string vRequestID = (string)Dts.Variables["varRequestID"].Value;
                <#if (varDirectIndirect == "Direct") {#>
    		    string vWhereClause = (string)Dts.Variables["sqlWhereClause"].Value;
    		    <#}#>
                string vYear = DateTime.Now.ToString("yyyy");
                string vMonth = DateTime.Now.ToString("MM");
                string vTimeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                string vOutputPathFull = vOutputPath + @"\<#=varExtractionFilename#>\" + vYear + @"\" + vMonth + @"\<#=varExtractionFilename#>_" + vTimeStamp  + "_" + vRequestID  + ".xlsx";
                string vOutPutPathCheck = vOutputPath + @"\<#=varExtractionFilename#>\" + vYear + @"\" + vMonth;
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("<#=varExtractionFilename#>");
                string mySqlStatement = "<#=sqlStatementScript#>";
                <#if (varDirectIndirect == "Direct") {#>
                mySqlStatement += vWhereClause;
                <#} else {#>
                mySqlStatement += vRequestID;
                <#}#>
                int row_index = 2;
                System.Data.SqlClient.SqlConnection myADONETConnection = new SqlConnection();
                myADONETConnection = (SqlConnection)(Dts.Connections["ReportsADO"].AcquireConnection(Dts.Transaction) as SqlConnection);
                System.Data.SqlClient.SqlCommand myCommand = new System.Data.SqlClient.SqlCommand(mySqlStatement, myADONETConnection);
                SqlDataReader reader = myCommand.ExecuteReader(CommandBehavior.CloseConnection);
                
                Dts.Variables["varFileAttachments"].Value = vOutputPathFull;
                
                #region ExcelHeader
                <#=ExcelHeaderRow#>
                #endregion

                #region ExcelBody
                while (reader.Read()) {
                    <#=ExcelRowsValue#>
                    <#=ExcelRowsStyle#>
                    row_index += 1;
                }
                #endregion

                reader.Close();
                myADONETConnection.Close();

                #region ExcelFooter
                worksheet.Cells.AutoFitColumns(0); 
                package.Workbook.Properties.Title = "<#=varExtractionFilename#>";
                package.Workbook.Properties.Author = "Data warehouse";
                package.Workbook.Properties.Comments = "<#=varExtractionFilename#> report";
                package.Workbook.Properties.Company = "Forever Direct EU";
                #endregion

                #region MailData
                string emailBody = @"This is an automated email containing an Data warehouse report.
Report is located at: ";
                Dts.Variables["varEmailBody"].Value = emailBody + vOutputPathFull;
                #endregion

                Directory.CreateDirectory(vOutPutPathCheck);
                var xlFile = new System.IO.FileInfo(vOutputPathFull);
                package.SaveAs(xlFile);
            }
			Dts.TaskResult = (int)ScriptResults.Success;
		}
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };

	}
}
                                            </File>
                                        </Files>
                                        <ReadOnlyVariables>
                                            <Variable Namespace="$Project" DataType="String" VariableName="DirReports" />
                                            <Variable Namespace="User" DataType="String" VariableName="varRequestID" />
                                            <#if (varDirectIndirect == "Direct") {#>
                                            <Variable Namespace="User" DataType="String" VariableName="sqlWhereClause" />
                                            <#}#>
                                        </ReadOnlyVariables>
                                        <ReadWriteVariables>
                                            <Variable Namespace="User" DataType="String" VariableName="varFileAttachments" />
                                            <Variable Namespace="User" DataType="String" VariableName="varEmailBody" />
                                        </ReadWriteVariables>
                                    </ScriptTaskProject>
                                </ScriptTaskProject>
                            </Script>
                            <#}#>
                            <#if (!string.IsNullOrEmpty(varExtractionEmailTo)) {#>
                            <SendMail Name="Send Mail" ConnectionName="reportMail" FromLine="reports@foreverdirect.eu" Subject="Email report <#=varExtractionFilename#>" ToLine="">
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="Script <#=varExtractionFilename#>.Output" EvaluationValue="Success" EvaluationOperation="Constraint" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <DirectInput>User::varEmailBody</DirectInput>
                                <Expressions>
                                <#if (varExtractionEmailAttachment == "Y") {#>
                                    <Expression PropertyName="FileAttachments">@[User::varWhere]  == "Schedule" ? @[User::varFileAttachments] : ""</Expression>
                                <#}#>
                                    <Expression PropertyName="MessageSourceType">2</Expression>
                                    <Expression PropertyName="ToLine">@[User::varToLine]</Expression>
                                    <Expression PropertyName="CCLine">@[User::varCCLine]</Expression>
                                    <Expression PropertyName="BCCLine">@[User::varBCCLine]</Expression>
                                </Expressions>
                            </SendMail>
                            <#}#>
                            <#if (!string.IsNullOrEmpty(varExtractionEmailTo)) {#>
                            <SendMail Name="Empty Send Mail" ConnectionName="reportMail" FromLine="reports@foreverdirect.eu" ToLine="" Subject="Empty Email report <#=varExtractionFilename#>">
                                <PrecedenceConstraints LogicalType="And">
                                    <Inputs>
                                        <Input OutputPathName="SQL Update contol record <#=varName#>.Output" EvaluationValue="Success" EvaluationOperation="ExpressionAndConstraint" Expression="@[RC::RowCountExtract] == 0 &amp;&amp; @[User::IgnoreEmpty] == 0" />
                                    </Inputs>
                                </PrecedenceConstraints>
                                <DirectInput>Report is empty, no data found</DirectInput>
                                <Expressions>
                                    <Expression PropertyName="MessageSourceType">0</Expression>
                                    <Expression PropertyName="ToLine">@[User::varToLine]</Expression>
                                    <Expression PropertyName="CCLine">@[User::varCCLine]</Expression>
                                    <Expression PropertyName="BCCLine">@[User::varBCCLine]</Expression>
                                </Expressions>
                            </SendMail>
                            <#}#>
                            
                        </Tasks>
                    </Container>
                    <ExecuteSQL Name="SQL Update Request <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                        <VariableInput VariableName="User.sqlUpdateRequest" />
                        <Parameters>
                            <Parameter Name="0" VariableName="User.varRequestID" DataType="String" />
                            <Parameter Name="1" VariableName="User.varLogExecutionID" DataType="String" />
                        </Parameters>
                    </ExecuteSQL>
                    
                 <ExecuteSQL Name="SQL Insert Log End <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                    <VariableInput VariableName="User.sqlInsertLogEnd" />
                </ExecuteSQL>                   
                    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?,@LastExtractionDate = ?,@RowCountExtract = ?,@RowCountTarget = ?,@RowCountError = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="User.LastExtractionDate" Direction="Input" DataType="String" />
                            <Parameter Name="5" VariableName="RC.RowCountExtract" Direction="Input" DataType="Int32" />
                            <Parameter Name="6" VariableName="RC.RowCountTarget" Direction="Input" DataType="Int32" />
                            <Parameter Name="7" VariableName="RC.RowCountError" Direction="Input" DataType="Int32" />
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>
    
                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                            <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                                <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="2" VariableName="System.PackageName" Direction="Input" DataType="String"/>
                                    <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                    <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                                </Parameters>
                            </ExecuteSQL>
                                
                            <ExecuteSQL Name="SQL Update Error Request <#=varName#>" ConnectionName ="<#=varExtractionTargetConnection#>" ResultSet="None" Disabled="false" >
                                <DirectInput>UPDATE RC.Request SET Request_Status = 99, Request_Log = 'System', Request_Rows = 0, Request_File = '' WHERE Request_ID = ?; INSERT INTO RC.Log(Log_Page,Log_Func,Log_RequestID,Log_Status,Log_Package,Log_CreatedDate,Log_ExecutionID,Log_Log) VALUES ('Package','Error',?,99,?,GETDATE(),?,?);</DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="User.varRequestID" Direction="Input" DataType="String"/>
                                    <Parameter Name="1" VariableName="User.varRequestID" Direction="Input" DataType="String"/>
                                    <Parameter Name="2" VariableName="System.PackageName" Direction="Input" DataType="String"/>
                                    <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                    <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                                </Parameters>
                            </ExecuteSQL>

                        </Tasks>
                    </Event>
                </Events>
            </Package>
        <#}

        allSourceTables = allSourceTables.Substring(0, allSourceTables.Length - 1);
        string sqlTargetSchemas = @"SELECT DISTINCT TargetConnection, TargetSchema, 'Total' AS TargetTable, 'CTRL_Reports' AS PackagePrefix FROM Generator.LoadReportTables st WHERE st.IsActive = 1";
        DataTable tableTargetSchemas = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlTargetSchemas);
        foreach (DataRow rowTargetSchemas in tableTargetSchemas.Rows) {
            string varTargetConnection = rowTargetSchemas["TargetConnection"].ToString();
            string varTargetSchema = rowTargetSchemas["TargetSchema"].ToString();
            string varTargetTable = rowTargetSchemas["TargetTable"].ToString();
            string varPackagePrefix = rowTargetSchemas["PackagePrefix"].ToString();
            string varName = varTargetConnection + "_" + varTargetSchema + "_" + varTargetTable;
            string varPackageName = varPackagePrefix + "_" + varTargetSchema + "_" + varTargetTable;#>
    
            <Package Name="<#=varPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>" >
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                </Parameters>
    
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditBatchActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditBatchActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64"  Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64"  Namespace="Audit">-1</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                    <#  string sqlvarcolumns = @"SELECT ReportID + '_' + ViewPredicatesName AS ViewPredicatesName, ViewPredicatesValue, ViewPredicatesExpression FROM DWH_Control.Generator.LoadReportTablePredicates WHERE ReportID IN (" + allSourceTables + @") AND IsActive = 1";
                    DataTable tablevarcolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlvarcolumns);
                    foreach (DataRow rowvarcolumns in tablevarcolumns.Rows) {
                        if((bool)rowvarcolumns["ViewPredicatesExpression"]) {  
                            #><Variable Name="<#=rowvarcolumns["ViewPredicatesName"].ToString()#>_CV" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=rowvarcolumns["ViewPredicatesValue"].ToString()#></Variable><#
                        } else {
                            #><Variable Name="<#=rowvarcolumns["ViewPredicatesName"].ToString()#>_CV" DataType="String" Namespace="User"><#=rowvarcolumns["ViewPredicatesValue"].ToString()#></Variable><#
                        }
                    }#>
                </Variables>
    
                <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5" VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6" VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7" VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8" VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9" VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
                    
                    <Container Name="SC Extract <#=varName#>" ConstraintMode="Parallel">
                        <Tasks>
                            <#string sqlSourcePackages  = @"SELECT SourceConnection, Type AS ConnectionType, SourceSchema AS SourceSchema, SourceTable AS SourceTable,'Reports' AS PackagePrefix, st.RunParam1, st.RunParam2, st.RunParam3, st.RunSchedule, st.Available, st.ReportID FROM Generator.LoadReportTables st INNER JOIN Generator.Connection con ON st.SourceConnection = con.Name WHERE TargetSchema = '" + varTargetSchema + @"' AND st.IsActive = 1 AND st.RunSchedule <> 'H' ORDER BY SourceTable";
                            DataTable tableSourcePackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourcePackages);
                            foreach (DataRow rowSourcePackages in tableSourcePackages.Rows) { 
                                string varSourceConnection = rowSourcePackages["SourceConnection"].ToString();
                                string varReportID = rowSourcePackages["ReportID"].ToString();
                                string varConnectionType = rowSourcePackages["ConnectionType"].ToString();
                                string varSourceSchema = rowSourcePackages["SourceSchema"].ToString();
                                string varSourceTable = rowSourcePackages["SourceTable"].ToString();
                                string varAvailable = rowSourcePackages["Available"].ToString();
                                string varPackagePrfx = rowSourcePackages["PackagePrefix"].ToString();
                                string varPackage = varPackagePrfx + "_" + varSourceSchema + "_" + varReportID + ".dtsx";
                                
                                string varRunParam1 = rowSourcePackages["RunParam1"].ToString();
                                string varRunParam2 = rowSourcePackages["RunParam2"].ToString();
                                string varRunParam3 = rowSourcePackages["RunParam3"].ToString();
                                string varRunSchedule = rowSourcePackages["RunSchedule"].ToString();
                                string varPackageRun = "\"" + varRunSchedule + "\" == \"D\" ? FALSE: \"" + varRunSchedule + "\" == \"W\" &amp;&amp; FINDSTRING(\"" + varRunParam1 + "\",(DT_WSTR,3)((DATEPART(\"DW\",GETDATE()) == 7) ? \"sun\" : (DATEPART(\"DW\",GETDATE()) == 1) ? \"mon\" : (DATEPART(\"DW\",GETDATE()) == 2) ? \"tue\" : (DATEPART(\"DW\",GETDATE()) == 3) ? \"wed\" : (DATEPART(\"DW\",GETDATE()) == 4) ? \"thu\" : (DATEPART(\"DW\",GETDATE()) == 5) ? \"fri\" : (DATEPART(\"DW\",GETDATE()) == 6) ? \"sat\" : \"NULL\"),1) > 0 ? FALSE : \"" + varRunSchedule + "\" == \"M\" &amp;&amp; FINDSTRING(\"" + varRunParam1 + "\",(DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2),1) > 0 ? FALSE:  \"" + varRunSchedule + "\" == \"Q\" &amp;&amp; FINDSTRING(\"" + varRunParam2 + "\",(DT_WSTR,3)( (DATEPART(\"m\",GETDATE()) == 1) ? \"jan\" : (DATEPART(\"m\",GETDATE()) == 2) ? \"feb\" : (DATEPART(\"m\",GETDATE()) == 3) ? \"mar\" : (DATEPART(\"m\",GETDATE()) == 4) ? \"apr\" : (DATEPART(\"m\",GETDATE()) == 5) ? \"may\" : (DATEPART(\"m\",GETDATE()) == 6) ? \"jun\" : (DATEPART(\"m\",GETDATE()) == 7) ? \"jul\" : (DATEPART(\"m\",GETDATE()) == 8) ? \"sep\" : (DATEPART(\"m\",GETDATE()) == 9) ? \"aug\" : (DATEPART(\"m\",GETDATE()) == 10) ? \"okt\" : (DATEPART(\"m\",GETDATE()) == 11) ? \"nov\" : (DATEPART(\"m\",GETDATE()) == 112) ? \"dec\" : \"NULL\"),1) > 0 &amp;&amp; \"" + varRunParam1 + "\" == (DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2) ? FALSE : \"" + varRunSchedule + "\" == \"Y\" &amp;&amp; FINDSTRING(\"" + varRunParam2 + "\",(DT_WSTR,3)( (DATEPART(\"m\",GETDATE()) == 1) ? \"jan\" : (DATEPART(\"m\",GETDATE()) == 2) ? \"feb\" : (DATEPART(\"m\",GETDATE()) == 3) ? \"mar\" : (DATEPART(\"m\",GETDATE()) == 4) ? \"apr\" : (DATEPART(\"m\",GETDATE()) == 5) ? \"may\" : (DATEPART(\"m\",GETDATE()) == 6) ? \"jun\" : (DATEPART(\"m\",GETDATE()) == 7) ? \"jul\" : (DATEPART(\"m\",GETDATE()) == 8) ? \"sep\" : (DATEPART(\"m\",GETDATE()) == 9) ? \"aug\" : (DATEPART(\"m\",GETDATE()) == 10) ? \"okt\" : (DATEPART(\"m\",GETDATE()) == 11) ? \"nov\" : (DATEPART(\"m\",GETDATE()) == 112) ? \"dec\" : \"NULL\"),1) > 0 &amp;&amp; \"" + varRunParam1 + "\" == (DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2) ? FALSE : TRUE";
                                #>
                                
                                <ExecutePackage Name="<#=varPackage#>">
                                    <ExternalProjectPackage Package="<#=varPackage#>"/>
                                    <ParameterBindings>
                                        <ParameterBinding VariableName="Audit.AuditBatchID" Name="BatchID" />
                                        <ParameterBinding VariableName="Audit.AuditProcessLogID"  Name="ProcessLogParentID" />
                                        <#  string sqlparam2columns = @"SELECT ViewPredicatesName, ReportID + '_' + ViewPredicatesName AS ViewPredicatesName2,ViewPredicatesValue FROM DWH_Control.Generator.LoadReportTablePredicates WHERE ReportID = '" + varReportID + @"' AND IsActive = 1";
                                            DataTable tableparam2columns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlparam2columns);
                                            foreach (DataRow rowparam2columns in tableparam2columns.Rows) {
                                                #><ParameterBinding VariableName="User.<#=rowparam2columns["ViewPredicatesName2"].ToString()#>_CV" Name="<#=rowparam2columns["ViewPredicatesName"].ToString()#>_PP" /><#
                                            }#>
                                    </ParameterBindings>
                                    <Expressions>
                                        <Expression PropertyName="Disable"><#=varPackageRun#></Expression>
                                    </Expressions>
                                </ExecutePackage>
                            <#}#>
                        </Tasks>
                    </Container>
    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>
    
                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                        <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                            <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                            <Parameters>
                                <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="2" VariableName="User.PackageName" Direction="Input" DataType="String"/>
                                <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                            </Parameters>
                        </ExecuteSQL>
                        </Tasks>
                    </Event>
                </Events>
            </Package>
      <#}#>
    </Packages>
</Biml>