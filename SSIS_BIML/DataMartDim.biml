<#@ template language="C#" hostspecific="true" tier="2"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Languages.Biml.Connection" #>
<#@ import namespace="Varigence.Biml.Extensions" #>
<#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
<#@ property name="Schema" type="String" #>
<#@ include file="ProjectSettings.cs" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Packages>
        <#string sqlDatamartTable = @"SELECT DWHConnection,DWHSchema,DWHTable,DatamartConnection,DatamartSchema,DatamartTable,LoadingType FROM Generator." + Schema + @"Table WHERE TableType IN ('D', 'DF') AND IsActive =  1 AND Generate =  1";
        DataTable tableDatamartTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartTable);
        foreach (DataRow rowDatamartTable in tableDatamartTable.Rows) {
            string varDWHConnection = rowDatamartTable["DWHConnection"].ToString();
            string varDWHSchema = rowDatamartTable["DWHSchema"].ToString();
            string varDWHTable = rowDatamartTable["DWHTable"].ToString();
            string varDatamartConnection = rowDatamartTable["DatamartConnection"].ToString();
            string varDatamartSchema = rowDatamartTable["DatamartSchema"].ToString();
            string varDatamartTable = rowDatamartTable["DatamartTable"].ToString();
            string varLoadingType = rowDatamartTable["LoadingType"].ToString();
            string varLoadingTypeDeleteNeeded = "";
            
            if (varLoadingType.ToLower() == "dm-d1") {
                varLoadingTypeDeleteNeeded = "yes";
                varLoadingType = "dm-t1";
            }
            if (varLoadingType.ToLower() == "dm-d2") {
                varLoadingTypeDeleteNeeded = "yes";
                varLoadingType = "dm-t2";
            }

            string varDWHTableFull = varSQLServTableBeginCharacter + varDWHSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varDWHTable + varSQLServTableCloseCharacter;
            string varDatamartTableFull = varSQLServTableBeginCharacter + "Shadow" + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varDatamartTable + varSQLServTableCloseCharacter;
            string varName = varDatamartConnection + "-" +varDatamartSchema+"-"+varDatamartTable;
            string varPackageName = "Load Dim-" + varName;
            
            string sqlSourceColumn = @"SELECT dbcol.[name] AS [ColumnName],dbcol.[column_id] AS [ColumnPosition],dbtyp.[name] AS [ColumnDataType],dbcol.[max_length] AS [ColumnDataLength],dbcol.[scale] AS [ColumnDataScale],dbcol.[precision] AS [ColumnDataPrecision] FROM DWH.sys.all_columns dbcol INNER JOIN DWH.sys.types dbtyp ON dbtyp.system_type_id =  dbcol.system_type_id WHERE OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('DWH')) =  '" + varDWHSchema + @"' AND OBJECT_NAME(dbcol.object_id,DB_ID('DWH')) =  '" + varDWHTable + @"' AND dbtyp.[name] != 'sysname' ORDER BY dbcol.[column_id]";
            DataTable tableSourceColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceColumn);
            DataRow[] rowSourceColumns = tableSourceColumn.Select((string)"1 = 1", (string)"ColumnPosition");
            
            string sqlDatamartColumn =  @"SELECT dbcol.[name] AS [ColumnName],ISNULL(col.[ColumnType],'mt') AS [ColumnType],col.[ColumnInferredValue],dbtyp.[name] AS [ColumnDataType],dbcol.[max_length] AS [ColumnDataLength],dbcol.[scale] AS [ColumnDataScale],dbcol.[precision] AS [ColumnDataPrecision],typcon.[DataTypeExpression],dbcol.[column_id] AS [ColumnPosition],dbcol.[is_nullable] AS [ColumnNotNullFlag],col.[ColumnDefaultValue],col.[ColumnUnknownValue],col.[LookupConnection],col.[LookupSchema],col.[LookupTable],ISNULL(col.[ColumnInferredValue],col.[LookupTable]) AS [LookupTableAlias],ISNULL(col.ColumnNotApplicableValue,col.LookupColum) AS [joinColumn],col.[LookupColum],col.[LookupJoin],dbcol.[is_identity],ISNULL(col.ColumnDefaultValue,dbcol.[name]) AS [selectColumn] FROM " + Schema + @".sys.all_columns dbcol INNER JOIN " + Schema + @".sys.types dbtyp ON dbtyp.system_type_id =  dbcol.system_type_id LEFT JOIN [DWH_Control].[Generator].[" + Schema + @"Column] col ON col.[ColumnName]  collate SQL_Latin1_General_CP1_CS_AS =  dbcol.[name] collate SQL_Latin1_General_CP1_CS_AS AND col.[DatamartTable] collate SQL_Latin1_General_CP1_CS_AS =  OBJECT_NAME(dbcol.object_id,DB_ID('" + Schema + @"')) collate SQL_Latin1_General_CP1_CS_AS AND col.[DatamartSchema] collate SQL_Latin1_General_CP1_CS_AS =  OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('" + Schema + @"')) collate SQL_Latin1_General_CP1_CS_AS AND col.[IsActive] =  1 LEFT JOIN  [DWH_Control].[Generator].[DataTypeConversion] typcon ON typcon.[DataType] =  dbtyp.[name]  collate SQL_Latin1_General_CP1_CS_AS WHERE OBJECT_SCHEMA_NAME(dbcol.object_id,DB_ID('" + Schema + @"')) = '" + varDatamartSchema + @"' AND OBJECT_NAME(dbcol.object_id,DB_ID('" + Schema + @"')) = '" + varDatamartTable + @"' AND dbtyp.[name] != 'sysname' ORDER BY dbcol.[column_id]";
            DataTable tableDatamartColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartColumn);
            DataRow[] rowSurrogateKey = tableDatamartColumn.Select((string)"ColumnType like '%-sk%'" , (string)"ColumnPosition");
            DataRow[] rowBusinessKeys = tableDatamartColumn.Select((string)"ColumnType like '%bk%'" , (string)"ColumnPosition");
            DataRow[] rowSCD1Columns = tableDatamartColumn.Select((string)"ColumnType = 't1'" , (string)"ColumnPosition");
            DataRow[] rowSCD2Columns = tableDatamartColumn.Select((string)"ColumnType = 't2'" , (string)"ColumnPosition");
            DataRow[] rowDataColumns = tableDatamartColumn.Select((string)"ColumnType not in ('bk','sk','mt')" , (string)"ColumnPosition");
            DataRow[] rowDatamartColumns = tableDatamartColumn.Select((string)"ColumnType not in ('mt','sk')" , (string)"ColumnPosition");
            DataRow[] rowDatamartColumnsAll = tableDatamartColumn.Select((string)"ColumnType not in ('sk')" , (string)"ColumnPosition");
            
            string varDWHColumns = "";
            string varDatamartColumns = "";
            string varSqlDWHColumns = "";
            string varIdentityInsert = "--";
			string varLookupJoinClause = "";
			string varIdentity = "";
			string varSelectClause = "";
			
            if (rowSurrogateKey.Length > 0) {
                for(int i = 0; i < rowSurrogateKey.Length; i ++) {
                    string varLookupConnection = rowSurrogateKey[i]["LookupConnection"].ToString();
                    string varLookupSchema = rowSurrogateKey[i]["LookupSchema"].ToString();
                    string varLookupTable = rowSurrogateKey[i]["LookupTable"].ToString();
                    string varLookupTableAlias = rowSurrogateKey[i]["LookupTableAlias"].ToString();
                    string varLookupColum = rowSurrogateKey[i]["LookupColum"].ToString();
                    string varjoinColumn = rowSurrogateKey[i]["joinColumn"].ToString();
                    string varLookupJoin = rowSurrogateKey[i]["LookupJoin"].ToString();
                    string varColumnName = (string)rowSurrogateKey[i]["ColumnName"];
                    varIdentity += varColumnName + ",";
                    varLookupConnection = varSQLServColumnBeginCharacter + varLookupConnection + varSQLServColumnCloseCharacter;
                    varLookupSchema = varSQLServColumnBeginCharacter + varLookupSchema + varSQLServColumnCloseCharacter;
                    varLookupTable = varSQLServColumnBeginCharacter + varLookupTable + varSQLServColumnCloseCharacter;
                    varLookupJoin = varLookupJoin.Replace("<", "&lt;") +  " ";
                    varLookupJoinClause += " LEFT JOIN "+ varLookupConnection + "." + varLookupSchema + "." + varLookupTable + " AS " + varLookupTableAlias + " ON 1=1 ";
                    if (String.IsNullOrEmpty(varLookupColum)) {
                        varLookupJoinClause += " AND " + varLookupJoin;
                    } else {
                        string[] varArrayLookupColumn  = varLookupColum.Split(',');
                        string[] varArrayjoinColumn    = varjoinColumn.Split(',');
                        int zz = 0;
                        varLookupJoinClause = varLookupJoinClause;
                        foreach (string varSingleLookupColumn in varArrayLookupColumn) {
                            string varSingleLookupColumn2 = varSQLServColumnBeginCharacter + varSingleLookupColumn + varSQLServColumnCloseCharacter;
                            varLookupJoinClause += " AND " + varLookupTableAlias + "." + varSingleLookupColumn2 +" = ms." + varArrayjoinColumn[zz] + " ";
                            zz++;
                        }
                    }
                    varLookupJoinClause += " AND " + varLookupTableAlias +".IsActual=1 ";
                }
            }

            for(int i = 0; i < rowDatamartColumns.Length; i ++) {
                string varLookupTable = rowDatamartColumns[i]["LookupTable"].ToString();
                string varLookupTableAlias = rowDatamartColumns[i]["LookupTableAlias"].ToString();  
                string varselectColumn = rowDatamartColumns[i]["selectColumn"].ToString();
                string varColumnName = rowDatamartColumns[i]["ColumnName"].ToString();
                string varUnknownValue = rowDatamartColumns[i]["ColumnUnknownValue"].ToString();
                bool is_identity = (bool)rowDatamartColumns[i]["is_identity"];
                
                if (is_identity) {
                    varIdentityInsert = "";
                }
                
                if (varLookupTable.Length > 0) {
                    varSelectClause += " isnull(" + varLookupTableAlias + "." + varselectColumn +"," + varUnknownValue + ") AS " + varselectColumn + @",";
                } else {
                    varSelectClause += "ms." + varColumnName +" AS " + varselectColumn + @",";
                }
            }
			
            for(int i = 0; i < rowSourceColumns.Length; i ++) {
                string varColumnName = varSQLServColumnBeginCharacter + rowSourceColumns[i]["ColumnName"].ToString() + varSQLServColumnCloseCharacter;
                varDWHColumns += ", " + varColumnName + "\n";
                varSqlDWHColumns += ", ms." + varColumnName + "\n"; 
            }
            
            if (varDWHColumns.Length > 2) {
                varDWHColumns = varDWHColumns.Substring(2, varDWHColumns.Length - 2);
                varSqlDWHColumns = varSqlDWHColumns.Substring(2, varSqlDWHColumns.Length - 2);
            }
            
            for(int i = 0; i < rowDatamartColumnsAll.Length; i ++) {
                string varColumnName = varSQLServColumnBeginCharacter + rowDatamartColumnsAll[i]["ColumnName"].ToString() + varSQLServColumnCloseCharacter;
                varDatamartColumns += ", " + varColumnName + "\n";
            }
            
            if (varDatamartColumns.Length > 2) {
                varDatamartColumns = varDatamartColumns.Substring(2, varDatamartColumns.Length - 2);
            }
            
            
        
            string varCheckSumColumn = "";
            if (rowDataColumns.Length > 0) {
                for(int i = 0; i < rowDataColumns.Length; i ++) {
                    string varColumnName = varSQLServColumnBeginCharacter + rowDataColumns[i]["ColumnName"].ToString() + varSQLServColumnCloseCharacter;
                    string varColumnDataType = rowDataColumns[i]["ColumnDataType"].ToString();
                    string varColumnDataPrecision = rowDataColumns[i]["ColumnDataPrecision"].ToString();
                    if (AllCharacterDataTypes.ToLower().IndexOf("-"+varColumnDataType.ToLower()+"-") != -1) {
                        varCheckSumColumn += "+ ISNULL(ms." + varColumnName + ",'')";
                    } else {
                        varCheckSumColumn += "+ ISNULL(CAST(ms." + varColumnName + " AS VARCHAR(" + varColumnDataPrecision + ")),'')";
                    }
                }
				varCheckSumColumn = "HASHBYTES(\'MD5\'," + varCheckSumColumn.Substring(2, varCheckSumColumn.Length - 2) + "+ \'00\')";
            } else {
                varCheckSumColumn = "HASHBYTES('MD5','')";
            }
        
            string varCheckSumSCD1Column = "";
            if (rowSCD1Columns.Length > 0) {
                for(int i = 0; i < rowSCD1Columns.Length; i ++) {
                    string varColumnName = varSQLServColumnBeginCharacter + rowSCD1Columns[i]["ColumnName"].ToString() + varSQLServColumnCloseCharacter;
                    string varColumnDataType = rowSCD1Columns[i]["ColumnDataType"].ToString();
                    string varColumnDataPrecision = rowSCD1Columns[i]["ColumnDataPrecision"].ToString();
                    if (AllCharacterDataTypes.ToLower().IndexOf("-"+varColumnDataType.ToLower()+"-") != -1) {
                        varCheckSumSCD1Column += "+ ISNULL(ms." + varColumnName + ",'')";
                    } else {
                        varCheckSumSCD1Column += "+ ISNULL(CAST(ms." + varColumnName + " AS VARCHAR(" + varColumnDataPrecision + ")),'')";
                    }
                }
				varCheckSumSCD1Column = "HASHBYTES(\'MD5\'," + varCheckSumSCD1Column.Substring(2, varCheckSumSCD1Column.Length - 2) + ")";
            } else {
                varCheckSumSCD1Column = "HASHBYTES('MD5','')";
            }
        
            string varCheckSumSCD2Column = "";
            if (rowSCD2Columns.Length > 0) {
                for(int i = 0; i < rowSCD2Columns.Length; i ++) {
                    string varColumnName          = varSQLServColumnBeginCharacter + rowSCD2Columns[i]["ColumnName"].ToString()  + varSQLServColumnCloseCharacter;
                    string varColumnDataType      = rowSCD2Columns[i]["ColumnDataType"].ToString();
                    string varColumnDataPrecision = rowSCD2Columns[i]["ColumnDataPrecision"].ToString();
                    if (AllCharacterDataTypes.ToLower().IndexOf("-"+varColumnDataType.ToLower()+"-") != -1) {
                        varCheckSumSCD2Column += "+ ISNULL(" + varColumnName + ",'')";
                    } else {
                        varCheckSumSCD2Column += "+ ISNULL(CAST(ms." + varColumnName + " AS VARCHAR(" + varColumnDataPrecision + ")),'')";
                    }
                }
				varCheckSumSCD2Column = "HASHBYTES(\'MD5\'," + varCheckSumSCD2Column.Substring(2, varCheckSumSCD2Column.Length - 2) + " + \'00\')";
            } else {
                varCheckSumSCD2Column = "HASHBYTES('MD5','')";
            }
        
            string varBKJoinClause = "";
            string varBKDelete = "";
            if (rowBusinessKeys.Length > 0) {
                for(int i = 0; i < rowBusinessKeys.Length; i ++) {
                    string varColumnName = (string)rowBusinessKeys[i]["ColumnName"];
                    varColumnName = varSQLServColumnBeginCharacter + varColumnName + varSQLServColumnCloseCharacter;
                    varBKJoinClause += "AND ms." + varColumnName + " = mt." + varColumnName;
                    varBKDelete += "AND " + varColumnName + " &lt;> -1";
                }
                varBKJoinClause = varBKJoinClause.Substring(4, varBKJoinClause.Length - 4); 
                varBKDelete = varBKDelete.Substring(4, varBKDelete.Length - 4); 
            }
            
            string varUpdateSCD1Clause = "";
            if (rowSCD1Columns.Length > 0) {                         
                for(int i = 0; i < rowSCD1Columns.Length; i ++) {
                    string varColumnName = (string)rowSCD1Columns[i]["ColumnName"];
                    varColumnName = varSQLServColumnBeginCharacter + varColumnName + varSQLServColumnCloseCharacter;
                    varUpdateSCD1Clause += ", " + varColumnName + " = ms." + varColumnName  + "\n";
                }
                varUpdateSCD1Clause = varUpdateSCD1Clause.Substring(2, varUpdateSCD1Clause.Length - 2); 
            }
            
        string varSqlMerge = "";
        switch (varLoadingType.ToLower()) {
			case "dm-f1":
				varSqlMerge += @"
				-- Declare
				DECLARE @CountInsert INT = 0;
				
                -- Insert
                INSERT INTO " + varDatamartTableFull + @"
				(
				" + varDatamartColumns  + @"
				)
                SELECT
                " + varSelectClause  + @"
                1 AS IsActual,0 AS IsInferred,0 AS IsDeleted,SYSDATETIME() AS EffectiveDate,'31-DEC-9999' AS ExpiryDate,SYSDATETIME() AS [InsertDateTime],SYSDATETIME() AS [UpdateDateTime],? AS [BatchID],? AS [ProcessLogID]
                FROM " + varDWHConnection + "." + varDWHTableFull + @" ms
				"+ varLookupJoinClause + @";
				SELECT @CountInsert = @@ROWCOUNT;
				SELECT @CountInsert;";
            break;
            case "dm-t1":
                varSqlMerge += @"
				-- Declare
				DECLARE @CountUpdate INT = 0;
				DECLARE @CountInsert INT = 0;
				DECLARE @CountDelete INT = 0; 

                -- Update
                UPDATE mt
                SET
                " + varUpdateSCD1Clause + @"
                ,[CheckSum] = " + varCheckSumColumn  + @",[CheckSumSCD1] = " + varCheckSumSCD1Column + @",[CheckSumSCD2] = " + varCheckSumSCD2Column + @",[IsActual] = 1,[IsInferred] = 0,[IsDeleted] = 0,[ExpiryDate] = '31-DEC-9999',[UpdateDateTime] = SYSDATETIME(),[BatchID] = ?,[ProcessLogID] = ?
                FROM " + varDatamartTableFull + @" mt
                INNER JOIN " + varDWHConnection + "." + varDWHTableFull + @" ms
                ON " + varBKJoinClause + @"
				AND (mt.[CheckSum] &lt;> " + varCheckSumColumn  + @" OR mt.IsDeleted = 1);
				SELECT @CountUpdate = @@ROWCOUNT;
                
                -- Insert
                INSERT INTO " + varDatamartTableFull + @"
				(
				" + varDWHColumns  + @"
				,[CheckSum],[CheckSumSCD1],[CheckSumSCD2],[IsActual],[IsInferred],[IsDeleted],[EffectiveDate],[ExpiryDate],[InsertDateTime],[UpdateDateTime],[BatchID],[ProcessLogID]
				)
                SELECT 
                " + varDWHColumns  + @"
                , " + varCheckSumColumn  + @", " + varCheckSumSCD1Column + @", " + varCheckSumSCD2Column + @",1 AS [IsActual],0 AS [IsInferred],0 AS [IsDeleted],SYSDATETIME() AS [EffectiveDate],'31-DEC-9999' AS [ExpiryDate],SYSDATETIME() AS [InsertDateTime],SYSDATETIME() AS [UpdateDateTime],? AS [BatchID],? AS [ProcessLogID]
                FROM " + varDWHConnection + "." + varDWHTableFull + @" ms
                WHERE NOT EXISTS (SELECT NULL FROM " + varDatamartTableFull + @" mt WHERE " + varBKJoinClause + @"); 
                SELECT @CountInsert = @@ROWCOUNT;
				
                -- Delete
                UPDATE mt
                SET
                [IsActual] = 0,[IsInferred] = 0,[IsDeleted] = 1,[ExpiryDate] = SYSDATETIME(),[UpdateDateTime] = SYSDATETIME(),[BatchID] = ?,[ProcessLogID] = ?
                FROM " + varDatamartTableFull + @" mt
                WHERE [IsDeleted] = 0
                AND NOT EXISTS (SELECT NULL FROM " + varDWHConnection + "." + varDWHTableFull + @" ms WHERE " + varBKJoinClause + @");
                SELECT @CountDelete = @@ROWCOUNT;
				SELECT @CountUpdate, @CountInsert, @CountDelete";
            break;
            case "dm-t2":
                varSqlMerge += @"
                -- Update
                UPDATE mt
                SET
                " + varUpdateSCD1Clause + @"
                ,[CheckSum] = " + varCheckSumColumn  + @",[CheckSumSCD1] = " + varCheckSumSCD1Column + @",[CheckSumSCD2] = " + varCheckSumSCD2Column + @",[IsActual] = 1,[IsInferred] = 0,[IsDeleted] = 0,[ExpiryDate] = '31-DEC-9999',[UpdateDateTime] = SYSDATETIME(),[BatchID] = ?,[ProcessLogID] = ?
                FROM " + varDatamartTableFull + @" mt
                INNER JOIN " + varDWHConnection + "." + varDWHTableFull + @" ms
                ON " + varBKJoinClause + @"
				AND (mt.[CheckSum] &lt;> " + varCheckSumColumn  + @" OR mt.IsDeleted = 1);
				SELECT @CountUpdate = @@ROWCOUNT;
                
                -- Insert
                INSERT INTO " + varDatamartTableFull + @"
                SELECT 
                " + varDWHColumns  + @"
                , " + varCheckSumColumn  + @", " + varCheckSumSCD1Column + @", " + varCheckSumSCD2Column + @",1 AS [IsActual],0 AS [IsInferred],0 AS [IsDeleted],SYSDATETIME() AS [EffectiveDate],'31-DEC-9999' AS [ExpiryDate],SYSDATETIME() AS [InsertDateTime],SYSDATETIME() AS [UpdateDateTime],? AS [BatchID],? AS [ProcessLogID]
                FROM " + varDWHConnection + "." + varDWHTableFull + @" ms
                WHERE NOT EXISTS (SELECT NULL FROM " + varDatamartTableFull + @" mt WHERE " + varBKJoinClause + @") 
                SELECT @CountInsert = @@ROWCOUNT;
				
                -- Delete
                UPDATE mt
                SET
                [IsActual] = 1,[IsInferred] = 0,[IsDeleted] = 1,[ExpiryDate] = SYSDATETIME(),[UpdateDateTime] = SYSDATETIME(),[BatchID] = ?,[ProcessLogID] = ?
                FROM " + varDatamartTableFull + @" mt
                WHERE [IsDeleted] = 0
                AND NOT EXISTS (SELECT NULL FROM " + varDWHConnection + "." + varDWHTableFull + @" ms WHERE " + varBKJoinClause + @");
                SELECT @CountDelete = @@ROWCOUNT;
				SELECT @CountUpdate, @CountInsert, @CountDelete";
            break;
        }
        #>
        
        <Package Name="<#=varPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>">
            <Parameters>
                <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
            </Parameters>
            
            <Variables>
                <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                <Variable Name="AuditProcessLogID" DataType="Int64" Namespace="Audit">0</Variable>
                <Variable Name="AuditBatchID" DataType="Int64" Namespace="Audit">0</Variable>
                <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                <Variable Name="LoadingType" DataType="String" Namespace="User"><#=varLoadingType#></Variable>
				<Variable Name="CountInserted" DataType="Int64" Namespace="Count">0</Variable>
				<Variable Name="CountUpdated" DataType="Int64" Namespace="Count">0</Variable>
				<Variable Name="CountDeleted" DataType="Int64" Namespace="Count">0</Variable>
            </Variables>
            
            <Tasks>
                <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                    <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?,@ExtractionType = ? </DirectInput>
                    <Parameters>
                        <Parameter Name="0" VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                        <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                        <Parameter Name="2" VariableName="BatchID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="3" VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="4" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="5" VariableName="User.PackageName" Direction="Input" DataType="String" />
                        <Parameter Name="6" VariableName="System.PackageID" Direction="Input" DataType="String" />
                        <Parameter Name="7" VariableName="System.PackageName" Direction="Input" DataType="String" />
                        <Parameter Name="8" VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                        <Parameter Name="9" VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                        <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                        <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                        <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                        <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                        <Parameter Name="14" VariableName="User.LoadingType" Direction="Input" DataType="String" />
                    </Parameters>
                    <Results>
                        <Result Name="0" VariableName="Audit.AuditBatchID" />
                        <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                    </Results>
                </ExecuteSQL>
        
                <Container Name="SC Load dimension <#=varDatamartTable#>" ConstraintMode="Linear">
                    <Tasks>
                        <#if (varLoadingType.ToLower() == "dm-f1") {#>
                            <ExecuteSQL Name="SQL TRUNCATE <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="None" Disabled="false">
                                <DirectInput>TRUNCATE TABLE <#=varDatamartTableFull#></DirectInput>
                            </ExecuteSQL>
                        <#}
                        
                        if (varLoadingTypeDeleteNeeded == "yes") {#>
                            <ExecuteSQL Name="SQL delete <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="None" Disabled="false">
                                <DirectInput>DELETE FROM <#=varDatamartTableFull#> WHERE <#=varBKDelete#>; DBCC CHECKIDENT ('<#=varDatamartTableFull#>', RESEED, 0);</DirectInput>
                            </ExecuteSQL>
                        <#}
                        
                        switch (varLoadingType.ToLower()) {
                            case "dm-t1":
                            #>                              
                                <ExecuteSQL Name="SQL Merge DM-T1 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
                                    <DirectInput><#=varSqlMerge#></DirectInput>
                                    <Parameters>
                                        <Parameter Name="0"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="1"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
										<Parameter Name="2"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="3"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
										<Parameter Name="4"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="5"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
                                    </Parameters>
									<Results>
										<Result Name="0" VariableName="Count.CountUpdated" />
										<Result Name="1" VariableName="Count.CountInserted" />
										<Result Name="2" VariableName="Count.CountDeleted" />
									</Results>
                                </ExecuteSQL>
                                <#break;
                            case "dm-t2":
                            #>                              
                                <ExecuteSQL Name="SQL Merge DM-T2 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
                                    <DirectInput><#=varSqlMerge#></DirectInput>
                                    <Parameters>
                                        <Parameter Name="0"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="1"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
										<Parameter Name="2"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="3"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
										<Parameter Name="4"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="5"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
                                    </Parameters>
									<Results>
										<Result Name="0" VariableName="Count.CountUpdated" />
										<Result Name="1" VariableName="Count.CountInserted" />
										<Result Name="2" VariableName="Count.CountDeleted" />
									</Results>
                                </ExecuteSQL>
                                <#break;
                            case "dm-f1":
                            #>                              
                                <ExecuteSQL Name="SQL INSERT DM-F1 <#=varDatamartTable#>" ConnectionName ="<#=varDatamartConnection#>" ResultSet="SingleRow" Disabled="false">
                                    <DirectInput><#=varSqlMerge#></DirectInput>
                                    <Parameters>
                                        <Parameter Name="0"  VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                                        <Parameter Name="1"  VariableName="Audit.AuditProcessLogID" Direction="Input"   DataType="Int64"/>
                                    </Parameters>
									<Results>
										<Result Name="0" VariableName="Count.CountInserted" />
									</Results>
                                </ExecuteSQL>
                                <#break;
                        }#>
                    </Tasks>
                </Container>
                
                <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                    <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?,@RowCountInferred = ?,@RowCountNew = ?,@RowCountDeleted = ?</DirectInput>
                    <Parameters>
                        <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                        <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                        <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
						<Parameter Name="4" VariableName="Count.CountUpdated" Direction="Input" DataType="Int64"/>
						<Parameter Name="5" VariableName="Count.CountInserted" Direction="Input" DataType="Int64"/>
						<Parameter Name="6" VariableName="Count.CountDeleted" Direction="Input" DataType="Int64"/>
                    </Parameters>
                </ExecuteSQL>
            </Tasks>
            
            <Events>
                <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                    <Tasks>
                        <ExecuteSQL Name="SQL Error Audit Package <#=varDatamartTable#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                            <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                            <Parameters>
                                <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="2" VariableName="System.PackageName" Direction="Input" DataType="String"/>
                                <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                            </Parameters>
                        </ExecuteSQL>
                    </Tasks>
                </Event>
            </Events>
        </Package>
    
        <#} 
        
        string sqlDatamartSchemas = @"SELECT DISTINCT [DatamartConnection] ,[DatamartSchema] FROM [Generator].[" + Schema + @"Table] WHERE [TableType] = 'D' AND [IsActive] = 1";
        DataTable tableDatamartSchemas = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartSchemas);
        foreach (DataRow rowDatamartSchemas in tableDatamartSchemas.Rows) {
            string varDatamartConnection = rowDatamartSchemas["DatamartConnection"].ToString();
            string varDatamartSchema = rowDatamartSchemas["DatamartSchema"].ToString();
            string varOverallPackageName = "CTRL-Dimensions-" + varDatamartConnection + "-" + varDatamartSchema + "-Total";
            string varName = varDatamartConnection + "-" + varDatamartSchema;
            
            string sqlDatamartPackages = @"SELECT [DatamartConnection],[DatamartSchema],[DatamartTable], st.RunParam1, st.RunParam2, st.RunParam3, st.RunSchedule, st.Parents FROM [Generator].[" + Schema + @"Table] st WHERE [DatamartConnection] = '" + varDatamartConnection + @"' AND [DatamartSchema] = '" + varDatamartSchema + @"' AND [TableType] = 'D' AND [IsActive] =  1 ORDER BY [DatamartTable]";
            DataTable tableDatamartPackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlDatamartPackages);#>
    
            <Package Name="<#=varOverallPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>" >
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                </Parameters>
    
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditBatchActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditBatchActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64"  Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64"  Namespace="Audit">-1</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varOverallPackageName#></Variable>
                </Variables>
    
                <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="BatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5" VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6" VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7" VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8" VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9" VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
                    
                    <Container Name="SC Load Dimensions <#=varName#>" ConstraintMode="Parallel">
                        <Tasks>
                            <#foreach (DataRow rowDatamartPackages in tableDatamartPackages.Rows) { 
                                string varDatamartTable = rowDatamartPackages["DatamartTable"].ToString();
                                string varParents = rowDatamartPackages["Parents"].ToString();
                                string varPackageName = "Load Dim-" + varDatamartConnection + "-" + varDatamartSchema + "-" + varDatamartTable + ".dtsx";
                                string varRunParam1 = rowDatamartPackages["RunParam1"].ToString();
                                string varRunParam2 = rowDatamartPackages["RunParam2"].ToString();
                                string varRunParam3 = rowDatamartPackages["RunParam3"].ToString();
                                string varRunSchedule = rowDatamartPackages["RunSchedule"].ToString();
                                //string varPackageRun = "\"" + varRunSchedule + "\" == \"D\" ? FALSE: \"" + varRunSchedule + "\" == \"W\" &amp;&amp; FINDSTRING(\"" + varRunParam1 + "\",(DT_WSTR,3)((DATEPART(\"DW\",GETDATE()) == 0) ? \"sun\" : (DATEPART(\"DW\",GETDATE()) == 1) ? \"mon\" : (DATEPART(\"DW\",GETDATE()) == 2) ? \"tue\" : (DATEPART(\"DW\",GETDATE()) == 3) ? \"wed\" : (DATEPART(\"DW\",GETDATE()) == 4) ? \"thu\" : (DATEPART(\"DW\",GETDATE()) == 5) ? \"fri\" : (DATEPART(\"DW\",GETDATE()) == 6) ? \"sat\" : \"NULL\"),1) > 0 ? FALSE : \"" + varRunSchedule + "\" == \"M\" &amp;&amp; FINDSTRING(\"" + varRunParam1 + "\",(DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2),1) > 0 ? FALSE:  \"" + varRunSchedule + "\" == \"Q\" &amp;&amp; FINDSTRING(\"" + varRunParam2 + "\",(DT_WSTR,3)( (DATEPART(\"m\",GETDATE()) == 1) ? \"jan\" : (DATEPART(\"m\",GETDATE()) == 2) ? \"feb\" : (DATEPART(\"m\",GETDATE()) == 3) ? \"mar\" : (DATEPART(\"m\",GETDATE()) == 4) ? \"apr\" : (DATEPART(\"m\",GETDATE()) == 5) ? \"may\" : (DATEPART(\"m\",GETDATE()) == 6) ? \"jun\" : (DATEPART(\"m\",GETDATE()) == 7) ? \"jul\" : (DATEPART(\"m\",GETDATE()) == 8) ? \"sep\" : (DATEPART(\"m\",GETDATE()) == 9) ? \"aug\" : (DATEPART(\"m\",GETDATE()) == 10) ? \"okt\" : (DATEPART(\"m\",GETDATE()) == 11) ? \"nov\" : (DATEPART(\"m\",GETDATE()) == 12) ? \"dec\" : \"NULL\"),1) > 0 &amp;&amp; \"" + varRunParam1 + "\" == (DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2) ? FALSE : \"" + varRunSchedule + "\" == \"Y\" &amp;&amp; FINDSTRING(\"" + varRunParam2 + "\",(DT_WSTR,3)( (DATEPART(\"m\",GETDATE()) == 1) ? \"jan\" : (DATEPART(\"m\",GETDATE()) == 2) ? \"feb\" : (DATEPART(\"m\",GETDATE()) == 3) ? \"mar\" : (DATEPART(\"m\",GETDATE()) == 4) ? \"apr\" : (DATEPART(\"m\",GETDATE()) == 5) ? \"may\" : (DATEPART(\"m\",GETDATE()) == 6) ? \"jun\" : (DATEPART(\"m\",GETDATE()) == 7) ? \"jul\" : (DATEPART(\"m\",GETDATE()) == 8) ? \"sep\" : (DATEPART(\"m\",GETDATE()) == 9) ? \"aug\" : (DATEPART(\"m\",GETDATE()) == 10) ? \"okt\" : (DATEPART(\"m\",GETDATE()) == 11) ? \"nov\" : (DATEPART(\"m\",GETDATE()) == 12) ? \"dec\" : \"NULL\"),1) > 0 &amp;&amp; \"" + varRunParam1 + "\" == (DT_WSTR, 2)RIGHT(\"0\" + (DT_STR,4,1252) DATEPART(\"d\",GETDATE()),2) ? FALSE : TRUE";
								string varPackageRun = "FALSE";
								#>
                                <ExecutePackage Name="<#=varPackageName#>">
                                    <#if (varParents.Length > 0 && 1==1) {#>
                                    <PrecedenceConstraints LogicalType="And">
                                        <Inputs>
                                            <#var varParent = varParents.Split(',');
                                            foreach (string i in varParent) {
                                                string varParentPackage = "Load Dim-" + varDatamartConnection + "-" + varDatamartSchema + "-" + i + ".dtsx";#>
                                            <Input OutputPathName="<#=varParentPackage#>.Output"/>
                                            <#}#>
                                        </Inputs>
                                    </PrecedenceConstraints>
                                    <#}#>
                                    <ExternalProjectPackage Package="<#=varPackageName#>"/>
                                    <ParameterBindings>
                                        <ParameterBinding VariableName="Audit.AuditBatchID" Name="BatchID" />
                                        <ParameterBinding VariableName="Audit.AuditProcessLogID" Name="ProcessLogParentID" />
                                        <#if (varParents.Length > 0 && 1==2) {
                                            var varParent = varParents.Split(',');
                                            foreach (string i in varParent) {
                                                string varParentPackage = "Load Dim-" + varDatamartConnection + "-" + varDatamartSchema + "-" + i + ".dtsx";#>
                                            <ParameterBinding VariableName="Audit.AuditProcessLogID" Name="<#=varParentPackage#>" />
                                        <#}
                                    }#>
                                    </ParameterBindings>
                                    <Expressions>
                                        <Expression PropertyName="Disable"><#=varPackageRun#></Expression>
                                    </Expressions>
                                </ExecutePackage>
                            <#}#>
                        </Tasks>
                    </Container>
                    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>
                
                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                            <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                                <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="2" VariableName="System.PackageName" Direction="Input" DataType="String"/>
                                    <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                    <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                                </Parameters>
                            </ExecuteSQL>
                        </Tasks>
                    </Event>
                </Events>
            </Package>
        <#}#>
    </Packages>
</Biml>