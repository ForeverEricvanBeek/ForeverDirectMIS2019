<#@ template language ="C#" tier="1"#>
<#@ import namespace="System.Data" #>

<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <#@ property name="Schema" type="String" #>
    <#@include file="ProjectSettings.cs"#>
    <FileFormats>
        <#string sqlSourceFlatFile = @"SELECT [Name] ,[Options]
        FROM [Generator].[Connection]
        WHERE [Type] = 'FlatFile' 
        AND [IsActive] = 1
        AND 0 = 1   
        ";
        DataTable tableSourceFlatFile = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceFlatFile);
        foreach (DataRow rowSourceFlatFile in tableSourceFlatFile.Rows) {
            string varSourceFlatFileName = rowSourceFlatFile["Name"].ToString();
            string varSourceFlatFileOptions = rowSourceFlatFile["Options"].ToString();
            string varFlatFileAttributes = "";
            string[] varFlatFileOptions = varSourceFlatFileOptions.Split(varOptionSeparator,StringSplitOptions.RemoveEmptyEntries);
            string varRowDelimiter = "";
            string varColumnDelimiter = "";
            foreach (string varFlatFileOption in varFlatFileOptions) {
                string[] varAttributes = varFlatFileOption.Split(varColumnSeparator,StringSplitOptions.RemoveEmptyEntries);
                string varAttributeName = (string)varAttributes[0];
                string varAttributeValue = (string)varAttributes[1];
                if (varFlatFileAttributesList.IndexOf("-"+varAttributeName+"-") != -1) {
                    varFlatFileAttributes = varFlatFileAttributes + " " + varAttributeName + "=\"" + varAttributeValue +"\"";
                }
                if (varAttributeName == "RowDelimiter") { 
                    varRowDelimiter = varAttributeValue; 
                }
                if (varAttributeName == "ColumnDelimiter") { 
                    varColumnDelimiter = varAttributeValue;
                }
            }#>
        
            <FlatFileFormat Name="<#=varSourceFlatFileName#>_FFF" <#=varFlatFileAttributes#>>
                <Columns>
                    <#string sqlSourceFlatFileColumn = "SELECT [SourceColumnName],[SourceColumnType],[SourceColumnLength],[SourceColumnPrecision],[SourceColumnScale],CASE WHEN MAX([SourceColumnPosition]) OVER (PARTITION BY [SourceConnection]) = [SourceColumnPosition] THEN 1 ELSE 0 END [IsLastColumn] FROM [Generator].[SourceExtractionColumn] WHERE [SourceConnection] = '"+varSourceFlatFileName+"' AND IsActive = 1 ORDER BY [SourceColumnPosition]";
                    DataTable tableSourceFlatFileColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceFlatFileColumn);
                    foreach (DataRow rowSourceFlatFileColumn in tableSourceFlatFileColumn.Rows) {
                        string varSourceFlatFileColumnName = rowSourceFlatFileColumn["SourceColumnName"].ToString();
                        string varSourceFlatFileColumnType = rowSourceFlatFileColumn["SourceColumnType"].ToString();
                        int varSourceFlatFileColumnLength = (int)rowSourceFlatFileColumn["SourceColumnLength"];
                        int varSourceFlatFileColumnPrecision = (int)rowSourceFlatFileColumn["SourceColumnPrecision"];
                        int varSourceFlatFileColumnScale = (int)rowSourceFlatFileColumn["SourceColumnScale"];
                        int varSourceFlatFileColumnIsLastColumn = (int)rowSourceFlatFileColumn["IsLastColumn"];
                        string varDelimiter = varColumnDelimiter;
                        if (varSourceFlatFileColumnIsLastColumn == 1)  {
                            varDelimiter = varRowDelimiter;
                        }#>
                        <Column Name="<#=varSourceFlatFileColumnName#>" DataType="<#=varSourceFlatFileColumnType#>" Length="<#=varSourceFlatFileColumnLength#>" Precision="<#=varSourceFlatFileColumnPrecision#>" Scale="<#=varSourceFlatFileColumnScale#>" Delimiter="<#=varDelimiter#>" InputLength="<#=varSourceFlatFileColumnLength#>" TextQualified="true" CodePage="1252" />
                    <#}#>
                </Columns>
            </FlatFileFormat>
        <#}#>
    </FileFormats>
    
    <Connections>
        <#string ProjectConnections = @"SELECT c.[Name] AS ConnectionName
                          ,c.[ConnectionString]
                          ,c.[Options]
                          ,c.[IsProjectConnection]
                          ,c.[Type]
              FROM [Generator].[Connection] c 
              WHERE c.[IsActive] = 1
              AND c.[Name] in ('Staging','StagingIFS','DWH','DWH_Control','" + Schema + @"')
             ";
        DataTable Connections=ExternalDataAccess.GetDataTable(conGeneratorConnectionString,ProjectConnections);
        foreach (DataRow Connection in Connections.Rows) {
            string ConnectionName = Connection["ConnectionName"].ToString();
            string ConnectionString = Connection["ConnectionString"].ToString();
            string ConnectionOptions = Connection["Options"].ToString();
            bool ConnectionIsProjectConn = (bool)Connection["IsProjectConnection"];
            string ConnectionType = Connection["Type"].ToString();
            string ConnectionExpression = @"@[$Project::Con" + ConnectionName + "]";
            string ConnectionSSISOptions = "";
            if (ConnectionIsProjectConn) {
                ConnectionSSISOptions = ProjectConnectionOption;
            }
            switch (ConnectionType) {
                case "FlatFile":#>
                    <FlatFileConnection Name="<#=ConnectionName#>" FileFormat="<#=ConnectionName#>_FFF" FilePath="<#=ConnectionString#>">
                        <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                    </FlatFileConnection>
                    <#break;
                case "Excel2007":
                case "Excel97":#>
                    <ExcelConnection Name="<#=ConnectionName#>" ConnectionString="<#=ConnectionString#>" <#=ConnectionSSISOptions#> >
                        <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                    </ExcelConnection>
                    <#break;
                case "CSV": #>
                    <FlatFileConnection Name="<#=ConnectionName#>" FileFormat="<#=ConnectionName#>_FFF" FilePath="<#=ConnectionString#>"/>
                    <#break;
                case "ODBC":#>
                    <AdoNetConnection Name="<#=ConnectionName#>" ConnectionString="<#=ConnectionString#>" Provider="System.Data.Odbc.OdbcConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" <#=ConnectionSSISOptions#> >
                        <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                    </AdoNetConnection>
                    <#break;
                case "XML_Enkel": 
                case "XML_Kewill": 
                case "XML":#>
                    <FileConnection Name="<#=ConnectionName#>" FilePath="<#=ConnectionString#>" RelativePath="true" />
                    <FileConnection Name="<#=ConnectionName#>_XSD"  FilePath="<#=ConnectionOptions#>" RelativePath="true" />
                    <#break;
                default:#>
                    <Connection Name="<#=ConnectionName#>" ConnectionString="<#=ConnectionString#>" <#=ConnectionSSISOptions#> >
                        <Expressions><Expression PropertyName="<#=ConnectionName#>.ConnectionString"><#=ConnectionExpression#></Expression></Expressions>
                    </Connection>
                    <#break;
            }               
        }#>
    </Connections>
    
    <Databases>
        <#foreach (DataRow Connection in Connections.Rows) {
            string ConnectionType = Connection["Type"].ToString();
            string ConnectionName = Connection["ConnectionName"].ToString();
            switch (ConnectionType) {
                case "XML_Enkel": 
                case "XML_Kewill": 
                case "XML":
                case "CSV":
                    ConnectionType = ConnectionType;
                    break;
                default:#>
                    <Database Name="<#=ConnectionName#>" ConnectionName="<#=ConnectionName#>" />
                    <#break;
            }
        }#>     
    </Databases>
    
    <Schemas>
        <# 
        string SQLDBSchemas = @"SELECT DISTINCT 
             st.[TargetSchema]
            ,st.[TargetConnection]
        FROM [Generator].[SourceExtractionTable] st
        WHERE st.IsActive = 1 AND st.IsStaging = 0
        ";
        DataTable DBSchemas=ExternalDataAccess.GetDataTable(conGeneratorConnectionString,SQLDBSchemas);
        foreach (DataRow DBSchema in DBSchemas.Rows) {
            string TargetSchema =  DBSchema["TargetSchema"].ToString();
            string TargetConnection =  DBSchema["TargetConnection"].ToString();#>
            <Schema Name="<#=TargetSchema#>" DatabaseName="<#=TargetConnection#>" />
        <#}#>     
    </Schemas>
    
    <Projects>
        <PackageProject Name="<#=stagingProjectName#>" ProtectionLevel="<#=ProjectProtectionLevel#>">
            <Parameters>
                <Parameter Name="ServerName" DataType="String" IsRequired="true"><#=projectServerName#></Parameter>
                <Parameter Name="InstanceName" DataType="String" IsRequired="true"><#=projectDatabaseInstanceName#></Parameter>
                <Parameter Name="DirWork" DataType="String" IsRequired="true"><#=projectWorkDir#></Parameter>
                <Parameter Name="DirImport" DataType="String" IsRequired="true"><#=ImportDir#></Parameter>
                <Parameter Name="DirArchive" DataType="String" IsRequired="true"><#=ArchiveDir#></Parameter>
                <Parameter Name="DirError" DataType="String" IsRequired="true"><#=ErrorDir#></Parameter>
                <#foreach (DataRow Connection in Connections.Rows) {
                    string ConnectionName = Connection["ConnectionName"].ToString();
                    string ConnectionString = Connection["ConnectionString"].ToString();
                    string ConnectionIsProjectConn = Connection["IsProjectConnection"].ToString();
                    string ConnectionType = Connection["Type"].ToString();#>
                    <Parameter Name="Con<#=ConnectionName#>" DataType="String" IsRequired="true"><#=ConnectionString#></Parameter>
                <#}#>
            </Parameters>
            <Packages>
                <#string sqlPackage = @"SELECT [DatamartConnection] AS [Connection]
                              ,[DatamartSchema] AS [Schema]
                              ,[DatamartTable] AS [Table]
                              ,'Load Dim' AS [PackagePrefix]
                  FROM [Generator].[" + Schema + @"Table]
                    WHERE [TableType] =  'D' 
                    AND [IsActive] =  1
                    AND [Generate] =  1
                    UNION
                    SELECT DISTINCT 
                              [DatamartConnection]
                             ,[DatamartSchema]
                             ,'Total'
                             ,'CTRL-Dimensions'
                    FROM [Generator].[" + Schema + @"Table] 
                    WHERE [TableType] = 'D' 
                    AND [IsActive] = 1
                   UNION
                   SELECT [DatamartConnection] AS [Connection]
                              ,[DatamartSchema] AS [Schema]
                              ,[DatamartTable] AS [Table]
                              ,'Load Fact' AS [PackagePrefix]
                  FROM [Generator].[" + Schema + @"Table]
                    WHERE [TableType] =  'F' 
                    AND [IsActive] =  1
                    AND [Generate] =  1
                    UNION
                    SELECT DISTINCT 
                              [DatamartConnection]
                             ,[DatamartSchema]
                             ,'Total'
                             ,'CTRL-Facts'
                    FROM [Generator].[" + Schema + @"Table] 
                    WHERE [TableType] = 'F' 
                    AND [IsActive] = 1
                   ";
                DataTable SSISPackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlPackage);
                foreach (DataRow SSISPackage in SSISPackages.Rows) {
                    string varConnection = SSISPackage["Connection"].ToString();
                    string varSchema = SSISPackage["Schema"].ToString();
                    string varTable = SSISPackage["Table"].ToString();
                    string varPackagePrefix = SSISPackage["PackagePrefix"].ToString();
                    string varPackageName = varPackagePrefix + "-" + varConnection + "-" + varSchema + "-" + varTable;#>
                    <Package PackageName="<#=varPackageName#>" />
                <#}#>               
            </Packages>
        </PackageProject>
    </Projects>
</Biml>