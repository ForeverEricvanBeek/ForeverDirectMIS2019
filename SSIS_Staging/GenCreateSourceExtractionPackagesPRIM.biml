<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <#@ template language="C#" hostspecific="true" tier="3"#>
    <#@ import namespace="System.Data" #>
    <#@ import namespace="Varigence.Languages.Biml.Connection" #>
    <#@ import namespace="Varigence.Biml.Extensions" #>
    <#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
    <#@ include file="ProjectSettings.cs" #>
    <!--
    if Type <> 'F' then
    	x Create package
    		x Create temp table with primary key columns
    		Fill table with all records
    		Count records
    		Compare records with DWH
    		Flag as deleted when key has no match
    		Count deleted records
    		Delete temp table
    end if
    		What about archived or purged records
    -->	
    <!-- declare packages -->
    <Packages>
 <# // PrimaryKey constraint wordt per tabel opgehaald.
        string sqlSourceExtractionTable = @"with COLUMN_CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE)
                                            AS (
                                                  select 
                                              TC.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS
                                              , TC.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS
                                              , CCL.COLUMN_NAME COLLATE SQL_Latin1_General_CP1_CS_AS
                                              , CASE 
                                                 WHEN COL.DATA_TYPE = 'nvarchar' THEN COL.DATA_TYPE + '(' + CAST(COL.CHARACTER_MAXIMUM_LENGTH AS nvarchar) + ')'
                                            	 ELSE COL.DATA_TYPE
                                              END COLLATE SQL_Latin1_General_CP1_CS_AS AS DATE_TYPE  
                                            from [StagingIFS].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC
                                            JOIN [StagingIFS].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCL
                                            ON	TC.CONSTRAINT_CATALOG = CCL.CONSTRAINT_CATALOG
                                            AND	TC.CONSTRAINT_SCHEMA = CCL.CONSTRAINT_SCHEMA
                                            AND TC.CONSTRAINT_NAME = CCL.CONSTRAINT_NAME
                                            INNER JOIN [StagingIFS].[INFORMATION_SCHEMA].[COLUMNS] COL
                                            on COL.TABLE_SCHEMA = TC.TABLE_SCHEMA
                                            AND COL.TABLE_NAME = TC.TABLE_NAME
                                            AND COL.COLUMN_NAME = CCL.COLUMN_NAME
                                            )
                                            ,CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, PK, COLS) AS (
                                            select distinct 
                                              T1.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS
                                              , T1.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS ,
                                            STUFF((SELECT  ',' + T2.COLUMN_NAME + ' ' + T2.DATA_TYPE
                                            from COLUMN_CONSTRAINTS T2
                                            where T1.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS = T2.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS AND T1.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS = T2.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS
                                            FOR XML PATH('')),1 ,1, '')    PK
                                            , STUFF((SELECT  ',' + T2.COLUMN_NAME
                                                from COLUMN_CONSTRAINTS T2
                                                where T1.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS = T2.TABLE_SCHEMA COLLATE SQL_Latin1_General_CP1_CS_AS AND T1.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS = T2.TABLE_NAME COLLATE SQL_Latin1_General_CP1_CS_AS
                                                FOR XML PATH('')),1 ,1, '')    COLS
                                            from COLUMN_CONSTRAINTS T1
                                            )
                                                SELECT   
                                                    ST.[SourceConnection]
                                                    ,ST.[SourceSchema]
                                                    ,ST.[SourceTable]
                                                    ,SC.[Type] AS [SourceType]
                                                    ,SC.[Options]
                                                    ,SC.[ConnectionString]
                                                    ,ST.[ExtractionType]
                                                    ,ST.[TargetConnection]
                                                    ,ST.[TargetSchema]
                                                    ,ST.[TargetTable]
                                                    ,ST.[IncrementalSchema]
                                                    ,ST.[IncrementalTable]
                                                    ,ST.[IncrementalUpdateColumn]
                                                    ,ST.[IncrementalKeyColumn]
                                                    ,ST.[IsStaging] 
                                                    ,CS.PK						AS [PrimaryKey]
                                                    , CS.COLS AS [ALLCOLUMNS]
                                                    ,'PRIM' AS PackagePrefix
                                                    ,ST.[WhereStatement]
                                                FROM      [Generator].[SourceExtractionTable] ST
                                                LEFT JOIN [Generator].[Connection]            SC
                                                ON        ST.[SourceConnection] = SC.[Name]
                                                LEFT JOIN CONSTRAINTS CS
                                            ON		    ST.[TargetSchema] = CS.[TABLE_SCHEMA]
                                                AND		ST.[TargetTable]  = CS.[TABLE_NAME]
                                                WHERE   ST.[IsActive] = 1
                                            ";
        DataTable tableSourceExtractionTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionTable);
        foreach (DataRow rowSourceExtractionTable in tableSourceExtractionTable.Rows)
        {
            string varExtractionSourceConnection = rowSourceExtractionTable["SourceConnection"].ToString();
            string varExtractionSourceSchema = rowSourceExtractionTable["SourceSchema"].ToString();
            string varExtractionSourceTable = rowSourceExtractionTable["SourceTable"].ToString();
            string varExtractionSourceType = rowSourceExtractionTable["SourceType"].ToString();
            string varExtractionOptions = rowSourceExtractionTable["Options"].ToString();
            string varExtractionConnectionString = rowSourceExtractionTable["ConnectionString"].ToString();
            string varExtractionType = rowSourceExtractionTable["ExtractionType"].ToString();
            string varExtractionTargetConnection = rowSourceExtractionTable["TargetConnection"].ToString();
            string varExtractionTargetSchema = rowSourceExtractionTable["TargetSchema"].ToString();
            string varExtractionTargetTable = rowSourceExtractionTable["TargetTable"].ToString();
            string varExtractionIncrementalSchema = rowSourceExtractionTable["IncrementalSchema"].ToString();
            string varExtractionIncrementalTable = rowSourceExtractionTable["IncrementalTable"].ToString();
            string varExtractionModifiedDate = rowSourceExtractionTable["IncrementalUpdateColumn"].ToString();
            string varExtractionIncrementalKey = rowSourceExtractionTable["IncrementalKeyColumn"].ToString();
            string varExtractionTargetTablePK = rowSourceExtractionTable["PrimaryKey"].ToString();
            string varSQLStatementColumns = rowSourceExtractionTable["ALLCOLUMNS"].ToString();
            string varExtractionWhereStatement = rowSourceExtractionTable["WhereStatement"].ToString();
            if (varExtractionWhereStatement.Length > 0) {
                varExtractionWhereStatement = "AND "+varExtractionWhereStatement;
            }
            
            string ConnectionStringXSD = varExtractionOptions.Replace("\\","\\\\");
            string ConnectionStringXSD2 = @"@[$Project::DirImport]" + @"+"""+  varExtractionOptions.Replace("\\","\\\\")+ @"""";
            
            bool varIsStaging = (bool)rowSourceExtractionTable["IsStaging"];
            string varExtractionPackagePrefix = rowSourceExtractionTable["PackagePrefix"].ToString();
            
            string varTargetConnection = varExtractionTargetConnection;
            string varTargetSchema = varExtractionTargetSchema;
            string varTargetTable = varExtractionTargetTable;
            string varTargetName = varTargetConnection+"-"+varExtractionTargetSchema+"-"+varExtractionTargetTable;
            string varIncrementalName = varTargetConnection+"-"+varExtractionIncrementalSchema+"-"+varExtractionIncrementalTable;
            string varOutputPathName = "";
            string varTableBeginCharacter = varSQLServTableBeginCharacter;
            string varTableCloseCharacter = varSQLServTableCloseCharacter;
            string varColumnBeginCharacter = varSQLServColumnBeginCharacter;
            string varColumnCloseCharacter = varSQLServColumnCloseCharacter;
            
            varTableBeginCharacter = varOracleObjectBeginEndCharacter;
            varTableCloseCharacter = varOracleObjectBeginEndCharacter;
            varColumnBeginCharacter = varOracleObjectBeginEndCharacter;
            varColumnCloseCharacter = varOracleObjectBeginEndCharacter;

            //Add name qualifier to the table names
            string varExtractionTargetSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionTargetSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionTargetTable      + varSQLServTableCloseCharacter;
            string varExtractionIncrementalSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionIncrementalSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionIncrementalTable + varSQLServTableCloseCharacter;
            string varIncrementalSourceSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionIncrementalSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionIncrementalTable + varSQLServTableCloseCharacter;
            string varIncrementalTargetSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionTargetSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionTargetTable      + varSQLServTableCloseCharacter;
            string varTargetSchemaPlus = varSQLServTableBeginCharacter + varTargetSchema + varSQLServTableCloseCharacter;
            string varTargetTablePlus = varSQLServTableBeginCharacter + varTargetTable + varSQLServTableCloseCharacter;
            string varTargetSchemaTablePlus = varTargetSchemaPlus + "." + varTargetTablePlus;
            string varTargetSchemaTablePrim = varTargetSchemaPlus + "." + "[PRIM_" + varTargetTablePlus.Substring(1);

            string varSQLRowCountTargetTable = "SELECT count(*) FROM " + varExtractionTargetSchemaTablePlus;
            string varSQLMaxIncrementalKeyTargetTable = "";
            string varSQLCreateTargetTable = "CREATE TABLE " + varTargetSchemaTablePrim + "(" + varExtractionTargetTablePK + ") ON [PRIMARY]";
            string varExtractionSourceSchemaPlus = varTableBeginCharacter + varExtractionSourceSchema + varTableCloseCharacter +".";
            
            if (varExtractionSourceSchema == "") {
                varExtractionSourceSchemaPlus = "";
            }
            
            string varExtractionSourceTablePlus = varTableBeginCharacter + varExtractionSourceTable  + varTableCloseCharacter;
            string varName = varExtractionSourceConnection + "-" + varExtractionSourceSchema + "-" + varExtractionSourceTable;
            
            string varPackageName    = varExtractionPackagePrefix + "-" + varName;
            
            string varExtractionSQLStatement = "SELECT " + varSQLStatementColumns + " FROM " + varExtractionSourceSchemaPlus + varExtractionSourceTablePlus + " WHERE 1=1 " + varExtractionWhereStatement;
            #>
            
            <Package Name="<#=varPackageName#>" ConstraintMode="Linear" ProtectionLevel="<#=ProjectProtectionLevel#>">
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                </Parameters>
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64" Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64" Namespace="Audit">0</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                    <Variable Name="RowCountExtract" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountTarget" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountError" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="MaxIncrementalKey" DataType="String" Namespace="RC">0</Variable>
                    <Variable Name="LastExtractionDate" DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                    <Variable Name="LastExtractionID" DataType="String" Namespace="User">0</Variable>
                    <Variable Name="ExtractionType" DataType="String" Namespace="User"><#=varExtractionType#></Variable>
                    <Variable Name="sFullFilePath" DataType="String" Namespace="User">E:\DWHWork\Input\test.csv</Variable>
                    <Variable Name="sSourceFolder" DataType="String" Namespace="User"></Variable>
                    <Variable Name="SourceExtractionSQL" DataType="String" Namespace="User"><#=varExtractionSQLStatement#></Variable> 
                </Variables>
                    
              <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?,@ExtractionType = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="BatchID" Direction="Input"   DataType="Int64"/>
                            <Parameter Name="3" VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5" VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6" VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7" VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8" VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9" VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                            <Parameter Name="14" VariableName="User.ExtractionType" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
                    
                    <Container Name="SC Extract <#=varName#>" ConstraintMode="Linear">
                        <Tasks>
                            <ExecuteSQL Name="SQL Create table <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                <DirectInput><#=varSQLCreateTargetTable#></DirectInput>
                            </ExecuteSQL>
                                
                            <#string varTaskName = "Dataflow Extract " + varName;
                            string varSQLPackageTaskColumn = @"SELECT [ColumnName],[ColumnId] FROM [dbo].[PackageTaskColumn] WHERE [PackageName] = '" + varPackageName + @"' AND [TaskName] = '" + varTaskName + @"'";
							#>
                            
                            <Dataflow Name="<#=varTaskName#>">
                                <Transformations>
                                    <OleDbSource Name="OLEDB Source <#=varName#>" ConnectionName="<#=varExtractionSourceConnection#>" ValidateExternalMetadata="true">
                                        <ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
                                        <VariableInput VariableName="User.SourceExtractionSQL" />
                                    </OleDbSource>
                                </Transformations>
                            </Dataflow>
                        </Tasks>
                    </Container>
                    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?,@LastExtractionDate = ?,@RowCountExtract = ?,@RowCountTarget = ?,@RowCountError = ?,@LastExtractionID = ?</DirectInput>
                        <Parameters>
                        <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                        <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                        <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                        <Parameter Name="4" VariableName="User.LastExtractionDate" Direction="Input" DataType="String" />
                        <Parameter Name="5" VariableName="RC.RowCountExtract" Direction="Input" DataType="Int32" />
                        <Parameter Name="6" VariableName="RC.RowCountTarget" Direction="Input" DataType="Int32" />
                        <Parameter Name="7" VariableName="RC.RowCountError" Direction="Input" DataType="Int32" />
                        <Parameter Name="8" VariableName="User.LastExtractionID" Direction="Input" DataType="String" />
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>

                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                            <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                                <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="2" VariableName="User.PackageName" Direction="Input" DataType="String"/>
                                    <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                    <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                                </Parameters>
                            </ExecuteSQL>
                        </Tasks>
                    </Event>
                </Events>
            </Package>
        <#}#>    
    </Packages>
</Biml>