<#@ template language="C#" hostspecific="true" tier="3"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Languages.Biml.Connection" #>
<#@ import namespace="Varigence.Biml.Extensions" #>
<#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
<#@ include file="ProjectSettings.cs" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Packages>
        <#string sqlSourceExtractionTable = @"with COLUMN_CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME) AS (select TC.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, TC.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS, COLUMN_NAME Collate SQL_Latin1_General_CP1_CS_AS from [StagingPK].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC JOIN [StagingPK].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCL ON TC.CONSTRAINT_CATALOG = CCL.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = CCL.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CCL.CONSTRAINT_NAME),CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, PK) AS (select distinct T1.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, T1.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS, STUFF((SELECT  ',' + T2.COLUMN_NAME from COLUMN_CONSTRAINTS T2 where T1.TABLE_SCHEMA = T2.TABLE_SCHEMA AND T1.TABLE_NAME = T2.TABLE_NAME FOR XML PATH('')),1 ,1, '') PK from COLUMN_CONSTRAINTS T1)SELECT 'Staging' AS [SourceConnection],ST.[TargetSchema] AS [SourceSchema],ST.[TargetTable] AS [SourceTable],SC.[Type] AS [SourceType],SC.[Options],SC.[ConnectionString],ST.[ExtractionType],'DWH' AS [TargetConnection],ST.[TargetSchema],ST.[TargetTable],ST.[IncrementalSchema],ST.[IncrementalTable],ST.[IncrementalUpdateColumn],ST.[IncrementalKeyColumn],ST.[IsStaging] ,ST.[DeleteStaging],ST.SourceSchema AS AlternativeSchema,CS.PK AS [PrimaryKey],'CL_FIND' AS PackagePrefix, ST.CleansingFrom, ST.CleansingType, ST.CleansingDate, ST.CleansingDateType FROM [Generator].[SourceExtractionTable] ST LEFT JOIN [Generator].[Connection] SC ON ST.[SourceConnection] = SC.[Name] LEFT JOIN CONSTRAINTS CS ON ST.[TargetSchema] = CS.[TABLE_SCHEMA] AND ST.[TargetTable]  = CS.[TABLE_NAME] WHERE ST.[IsActive] = 1 AND ST.IsStaging = 0 AND ST.CleansingType IN ('PK','PK_F') AND ST.IsActiveCleansing = 1";
        DataTable tableSourceExtractionTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionTable);
        foreach (DataRow rowSourceExtractionTable in tableSourceExtractionTable.Rows) {
            string varCleansingType = rowSourceExtractionTable["CleansingType"].ToString();
            string varCleansingDate = rowSourceExtractionTable["CleansingDate"].ToString();
            string varCleansingDateType = rowSourceExtractionTable["CleansingDateType"].ToString();
            string varTargetConnection = rowSourceExtractionTable["TargetConnection"].ToString();
            string varTargetSchema = rowSourceExtractionTable["TargetSchema"].ToString();
            string varTargetTable = rowSourceExtractionTable["TargetTable"].ToString();
            string varTargetName = varTargetConnection + "-" + rowSourceExtractionTable["TargetSchema"].ToString() + "-" + rowSourceExtractionTable["TargetTable"].ToString();
            string varIncrementalName = varTargetConnection + "-" + rowSourceExtractionTable["IncrementalSchema"].ToString() + "-" + rowSourceExtractionTable["IncrementalTable"].ToString();
            string varOutputPathName = "";
            string varName = rowSourceExtractionTable["TargetConnection"].ToString() + "-" + rowSourceExtractionTable["SourceSchema"].ToString() + "-" + rowSourceExtractionTable["SourceTable"].ToString();
            string varTaskName = "Dataflow Load " + varName;
            string varPackageName = rowSourceExtractionTable["PackagePrefix"].ToString() + "-" + varTargetSchema + "-" + varTargetTable;
            
            string varSourceDatabase = @"StagingPK";

    string varSQLPackageTaskColumn = @"SELECT [ColumnName], [ColumnId] FROM [dbo].[PackageTaskColumn] WHERE [PackageName] = '" + varPackageName + @"' AND [TaskName] = '" + varTaskName + @"'";
    string MergeTempTable = "DECLARE @" + varTargetTable + "_TEMP TABLE (";
    string VarPrimKeyJoin = "";
    string VarPrimKeyJoin2 = "";
    string varPrimKeyColumsPK = "";
    string varPrimKeyColumsPKDeleted = "";
    string varPrimKeyColumsPKNew = "";
    string varPrimKeyColumsPKChanged = "";
    string varPrimKeyColumsPK_UNION = "";

    string varDeletedInsertColumns = "";
    string varDeletedINsertColumnsSource = "";
    
    string sqlsourcecolumns = @"select COL.TABLE_NAME, COL.COLUMN_NAME	AS SOURCE_COLUMN_NAME, CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN DWC.DWHColumnExpression1 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME, CASE WHEN DWC.DWHColumnExpression2 IS NOT NULL THEN DWC.DWHColumnExpression2 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME2, CASE WHEN CCU.CONSTRAINT_NAME IS NOT NULL THEN 1 else 0 end AS [PrimaryKey], CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN 1 ELSE 0 END AS ExpressionColumn, COL.ORDINAL_POSITION, CASE WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')'WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')' WHEN COL.DATA_TYPE = 'numeric' THEN '[' + COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')' WHEN COL.DATA_TYPE = 'decimal' THEN '[' + COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')' WHEN COL.DATA_TYPE = 'datetime2' THEN '[' + COL.DATA_TYPE + '] (' + CAST(COL.DATETIME_PRECISION AS NVARCHAR(10)) + ')' ELSE '[' + COL.DATA_TYPE + ']' END + CASE WHEN COL.IS_NULLABLE = 'YES' THEN ' NULL' ELSE ' NOT NULL' END AS DATATYPE from DWH.INFORMATION_SCHEMA.COLUMNS COL LEFT JOIN [DWH].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC ON TC.TABLE_NAME = COL.TABLE_NAME AND TC.TABLE_SCHEMA = COL.TABLE_SCHEMA LEFT JOIN [DWH].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCU ON TC.CONSTRAINT_CATALOG = CCU.CONSTRAINT_CATALOG AND TC.CONSTRAINT_SCHEMA = CCU.CONSTRAINT_SCHEMA AND TC.CONSTRAINT_NAME = CCU.CONSTRAINT_NAME AND COL.COLUMN_NAME = CCU.COLUMN_NAME LEFT JOIN DWH_Control.Generator.DWHExtractionColumn DWC ON DWC.DWHSchema = COL.TABLE_SCHEMA AND DWC.DWHTable = COL.TABLE_NAME AND DWC.DWHColumnName = COL.COLUMN_NAME where COL.TABLE_NAME= '" + varTargetTable + @"' and COL.TABLE_SCHEMA = '" + varTargetSchema + @"' order by COL.TABLE_NAME, COL.ORDINAL_POSITION";
    DataTable tablesourcecolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlsourcecolumns);
    foreach (DataRow rowsourcecolumns in tablesourcecolumns.Rows) {
        string VarSourceColumnName = rowsourcecolumns["SOURCE_COLUMN_NAME"].ToString();
        if (rowsourcecolumns["PrimaryKey"].ToString() == "1" && VarSourceColumnName != "Eff_Date") {
            VarPrimKeyJoin = VarPrimKeyJoin + " MS.["+ VarSourceColumnName +"] = MSPK.["+ rowsourcecolumns["TARGET_COLUMN_NAME"].ToString() +"] AND ";
            VarPrimKeyJoin2 = VarPrimKeyJoin2 + " ["+ VarSourceColumnName +"] = MSPK.["+ rowsourcecolumns["TARGET_COLUMN_NAME"].ToString() + "1] AND ";
            varPrimKeyColumsPKDeleted += " MS.["+ VarSourceColumnName +"] AS ["+ VarSourceColumnName + "1], ";
            varPrimKeyColumsPKNew += " MSPK.["+ VarSourceColumnName +"] AS ["+ VarSourceColumnName + "], ";
            varPrimKeyColumsPKChanged += " MS.["+ VarSourceColumnName +"] AS ["+ VarSourceColumnName + "], ";
            varPrimKeyColumsPK_UNION +=  " ["+ VarSourceColumnName +"], ";
            varDeletedInsertColumns += VarSourceColumnName + ", ";
            varDeletedINsertColumnsSource += VarSourceColumnName + "1, ";
        }
    }
    string varCleanFromDateTypeDay = "";
    string varCleanFromDateTypeMonth = "";
    if (varCleansingDateType == "String") {
        varCleanFromDateTypeDay = "CONVERT(NVARCHAR(8),DATEADD(DAY,-?,GETDATE()),112) + '000000'";
        varCleanFromDateTypeMonth = "CONVERT(NVARCHAR(8),DATEADD(MONTH,-?,GETDATE()),112) + '000000'";
    } else {
        varCleanFromDateTypeDay = "CAST(DATEADD(DAY, - ?, GETDATE()) AS DATE)";
        varCleanFromDateTypeMonth = "CAST(DATEADD(MONTH, - ?, GETDATE()) AS DATE)";
    }

    string MergeDeletedSQlStatement = "\"" + @"WITH CTE_DELETED AS (SELECT " + varPrimKeyColumsPKDeleted + @" MS." + varCleansingDate + @"  AS " + varCleansingDate + @"1 FROM DWH." + varTargetSchema + @"." + varTargetTable + @" MS LEFT JOIN " + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" MSPK ON "+ VarPrimKeyJoin + @" 1=1 WHERE MS.IsDeleted = 'N' AND MS.ActInd = 'Y' AND MS.Eff_Date &lt;= DATEADD(DAY,-?,GETDATE())";
        	if (varCleansingType == "PK") {
        	    MergeDeletedSQlStatement = MergeDeletedSQlStatement + @"
        	AND " + @"MS." + varCleansingDate + " >= " + varCleanFromDateTypeMonth;
        	}
        	MergeDeletedSQlStatement = MergeDeletedSQlStatement + @" AND MSPK.BatchID IS NULL) INSERT INTO " + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" (" + varDeletedInsertColumns + varCleansingDate + @", Issue, BatchID, ProcessLogID) SELECT " + varDeletedINsertColumnsSource + varCleansingDate + @"1,'3',-1,-1 FROM CTE_DELETED" + "\"";

    string MergeNewSQlStatement = "\"" + @"WITH CTE_NEW AS (SELECT " + varPrimKeyColumsPKNew + @" MSPK.Issue FROM " + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" MSPK LEFT JOIN	DWH." + varTargetSchema + @"." + varTargetTable + @" MS ON "+ VarPrimKeyJoin + @" MS.ActInd = 'Y' AND MS.IsDeleted = 'N'";
        	if (varCleansingType == "PK") {
        	    MergeNewSQlStatement = MergeNewSQlStatement + @" AND " + @"MS." + varCleansingDate + " &lt;=  " + varCleanFromDateTypeDay + @" AND MS." + varCleansingDate + " >=  " + varCleanFromDateTypeMonth + @" WHERE MSPK." + varCleansingDate + " &lt;=  " + varCleanFromDateTypeDay;
        	}
        	if (varCleansingType == "PK") {
        	    MergeNewSQlStatement = MergeNewSQlStatement + " AND MS.OBJVERSION IS NULL";
        	} else {
        	    MergeNewSQlStatement = MergeNewSQlStatement + " WHERE MS.OBJVERSION IS NULL";   
        	}
        MergeNewSQlStatement = MergeNewSQlStatement + @" AND (MSPK.Issue &lt;> 3)) UPDATE CTE_NEW SET Issue = 1" + "\"";

    string MergeChangedSQlStatement = "\"" + @"WITH CTE_CHANGED AS (SELECT " + varPrimKeyColumsPKChanged + @" MSPK.Issue FROM DWH." + varTargetSchema + @"." + varTargetTable + @" MS LEFT JOIN " + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" MSPK ON "+ VarPrimKeyJoin + @" 1=1";
        	if (varCleansingType == "PK") {
        	    MergeChangedSQlStatement = MergeChangedSQlStatement + @" AND MS." + varCleansingDate + " &lt;> MSPK." + varCleansingDate;
        	}
        	MergeChangedSQlStatement = MergeChangedSQlStatement + @" AND (MSPK.Issue &lt;> 3) WHERE MS.ActInd = 'Y' AND MS.IsDeleted = 'N' AND MS.Eff_Date &lt;= DATEADD(DAY,-?,GETDATE())";
        	if (varCleansingType == "PK") {
        	    MergeChangedSQlStatement = MergeChangedSQlStatement + @" AND " + @"MS." + varCleansingDate + " >= " + varCleanFromDateTypeMonth;
        	}
            MergeChangedSQlStatement = MergeChangedSQlStatement + @" AND MSPK.BatchID IS NOT NULL) UPDATE CTE_CHANGED SET Issue = 2" + "\"";
        
    string MergeArchiveSQlStatement = "\"" + @"WITH CTE_DELETED_ARC AS (SELECT " + varPrimKeyColumsPKDeleted + @" MS." + varCleansingDate + @"  AS " + varCleansingDate + @"1 FROM DWH." + varTargetSchema + @"_ARC." + varTargetTable + @" MS LEFT JOIN" + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" MSPK ON "+ VarPrimKeyJoin + @"  1=1 WHERE MS.IsDeleted = 'N' AND MS.ActInd = 'Y' AND MS.Eff_Date &lt;= DATEADD(DAY,-?,GETDATE())";
        	if (varCleansingType == "PK") {
        	    MergeArchiveSQlStatement = MergeArchiveSQlStatement + @" AND " + @"MS." + varCleansingDate + " >= " + varCleanFromDateTypeMonth;
        	}
        	MergeArchiveSQlStatement = MergeArchiveSQlStatement + @" AND MSPK.BatchID IS NULL) INSERT INTO " + varSourceDatabase + @"." + varTargetSchema + @"." + varTargetTable + @" (" + varDeletedInsertColumns + varCleansingDate + @", Issue, BatchID, ProcessLogID) SELECT " + varDeletedINsertColumnsSource + varCleansingDate + @"1,'4',-1,-1 FROM CTE_DELETED_ARC" + "\"";
    #>
    
        <Package Name="<#=varPackageName#>" ConstraintMode="Linear" ProtectionLevel="<#=ProjectProtectionLevel#>">
            <Variables>
                <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                <Variable Name="SourceExtractionSQL" DataType="String" Namespace="User"></Variable>
                <Variable Name="DaysBack" DataType="Int32" Namespace="User" EvaluateAsExpression="true">@[$Project::DaysBack]</Variable>
                <Variable Name="CleanMonths" DataType="Int32" Namespace="User" EvaluateAsExpression="true">@[$Project::CleanMonths]</Variable>
                <Variable Name="MergeDeletedSQlStatement" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=MergeDeletedSQlStatement#></Variable>    
                <Variable Name="MergeNewSQlStatement" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=MergeNewSQlStatement#></Variable>   
                <Variable Name="MergeChangedSQlStatement" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=MergeChangedSQlStatement#></Variable>    
                <Variable Name="MergeArchiveSQlStatement" DataType="String" Namespace="User" EvaluateAsExpression="true"><#=MergeArchiveSQlStatement#></Variable>
            </Variables>

            <Tasks>
                <Container Name="SC Load <#=varName#>" ConstraintMode="Linear">
                    <Tasks>
                        <ExecuteSQL Name="SQL find deleted in source <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                            <VariableInput VariableName="User.MergeDeletedSQlStatement" />
                            <Parameters>
                                <Parameter Name="0" VariableName="User.DaysBack" DataType="Int32" />
                                <#if (varCleansingType == "PK") {#>
                                    <Parameter Name="1" VariableName="User.CleanMonths" DataType="Int32" />
                                <#}#>
                            </Parameters>
                        </ExecuteSQL>

                        <ExecuteSQL Name="SQL find new in source <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                            <VariableInput VariableName="User.MergeNewSQlStatement" />
                            <Parameters>
                            <#if (varCleansingType == "PK") {#>
                                <Parameter Name="0" VariableName="User.DaysBack" DataType="Int32" />
                                <Parameter Name="1" VariableName="User.CleanMonths" DataType="Int32" />
                                <Parameter Name="2" VariableName="User.DaysBack" DataType="Int32" />
                            <#}#>
                            </Parameters>
                        </ExecuteSQL>
                        
                        <ExecuteSQL Name="SQL find changed in source <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                            <VariableInput VariableName="User.MergeChangedSQlStatement" />
                            <Parameters>
                                <Parameter Name="0" VariableName="User.DaysBack" DataType="Int32" />
                                <#if (varCleansingType == "PK") {#>
                                    <Parameter Name="1" VariableName="User.CleanMonths" DataType="Int32" />
                                <#}#>
                            </Parameters>
                        </ExecuteSQL>
                    </Tasks>
                </Container>
            </Tasks>
        </Package>
    <#}
    string sqlTargetSchemas = @"SELECT DISTINCT [TargetConnection] ,[TargetSchema] ,'Total' AS [TargetTable] ,'CTRL_CL_FIND' AS PackagePrefix ,[IsStaging] FROM [Generator].[SourceExtractionTable] st WHERE st.[IsActive] = 1 AND st.IsStaging = 0 AND st.CleansingType IN ('PK','PK_F') AND st.IsActiveCleansing = 1";
    DataTable tableTargetSchemas = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlTargetSchemas);
    foreach (DataRow rowTargetSchemas in tableTargetSchemas.Rows) {
        string varTargetSchema = rowTargetSchemas["TargetSchema"].ToString();
        string varName = rowTargetSchemas["TargetConnection"].ToString() + "-" + rowTargetSchemas["TargetSchema"].ToString() + "-" + rowTargetSchemas["TargetTable"].ToString();
        string varPackageName = rowTargetSchemas["PackagePrefix"].ToString() + "-" + rowTargetSchemas["TargetSchema"].ToString() + "-" + rowTargetSchemas["TargetTable"].ToString();#>
        <Package Name="<#=varPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>" >
            <Variables>
                <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
            </Variables>
            <Tasks>
                <Container Name="SC Extract <#=varName#>" ConstraintMode="Parallel">
                    <Tasks>
                    <#string sqlSourcePackages = @"SELECT [SourceConnection],[Type] AS ConnectionType,[TargetSchema] AS[SourceSchema],[TargetTable] AS [SourceTable],'CL_FIND' AS PackagePrefix FROM [Generator].[SourceExtractionTable] st JOIN [Generator].[Connection] con ON [st].[SourceConnection] = [con].[Name] WHERE [TargetSchema] = '" + varTargetSchema + @"'  AND [st].[IsActive] = 1  AND st.IsStaging = 0 AND st.CleansingType IN ('PK','PK_F') AND st.IsActiveCleansing = 1 ORDER BY [SourceTable]";
                    DataTable tableSourcePackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourcePackages);
                    foreach (DataRow rowSourcePackages in tableSourcePackages.Rows) { 
                        string varPackage = rowSourcePackages["PackagePrefix"].ToString() + "-" + rowSourcePackages["SourceSchema"].ToString() + "-" + rowSourcePackages["SourceTable"].ToString()+ ".dtsx";#>
                        <ExecutePackage Name="<#=varPackage#>">
                            <ExternalProjectPackage Package="<#=varPackage#>"/>
                        </ExecutePackage>
                    <#}#>
                    </Tasks>
                </Container>
            </Tasks>
        </Package>
    <#}#>
    </Packages>
</Biml>