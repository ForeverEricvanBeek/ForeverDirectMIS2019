<#@ template language="C#" hostspecific="true" tier="3"#>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Languages.Biml.Connection" #>
<#@ import namespace="Varigence.Biml.Extensions" #>
<#@ import namespace="Varigence.Biml.CoreLowerer.SchemaManagement"#>
<#@ include file="ProjectSettings.cs" #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
    <Packages>
        <#string sqlSourceExtractionTable = @"with COLUMN_CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME) AS (
                                                    select TC.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, TC.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS, COLUMN_NAME Collate SQL_Latin1_General_CP1_CS_AS
                                                    from [Staging].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC
                                                    JOIN [Staging].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCL
                                                    ON	TC.CONSTRAINT_CATALOG	= CCL.CONSTRAINT_CATALOG
                                                    AND	TC.CONSTRAINT_SCHEMA	= CCL.CONSTRAINT_SCHEMA
                                                    AND TC.CONSTRAINT_NAME		= CCL.CONSTRAINT_NAME
                                                    )
                                                    ,CONSTRAINTS(TABLE_SCHEMA, TABLE_NAME, PK) AS (
                                                    select distinct T1.TABLE_SCHEMA Collate SQL_Latin1_General_CP1_CS_AS, T1.TABLE_NAME Collate SQL_Latin1_General_CP1_CS_AS,
                                                    STUFF((SELECT  ',' + T2.COLUMN_NAME
                                                    from COLUMN_CONSTRAINTS T2
                                                    where T1.TABLE_SCHEMA = T2.TABLE_SCHEMA AND T1.TABLE_NAME = T2.TABLE_NAME
                                                    FOR XML PATH('')),1 ,1, '') PK
                                                    from COLUMN_CONSTRAINTS T1
                                                    )
                                                    SELECT 'Staging' AS [SourceConnection]
                                                    ,ST.[TargetSchema] AS [SourceSchema]
                                                    ,ST.[TargetTable] AS [SourceTable]
                                                    ,SC.[Type] AS [SourceType]
                                                    ,SC.[Options]
                                                    ,SC.[ConnectionString]
                                                    ,ST.[ExtractionType]
                                                    ,'DWH' AS [TargetConnection]
                                                    ,ST.[TargetSchema]
                                                    ,ST.[TargetTable]
                                                    ,ST.[IncrementalSchema]
                                                    ,ST.[IncrementalTable]
                                                    ,ST.[IncrementalUpdateColumn]
                                                    ,ST.[IncrementalKeyColumn]
                                                    ,ST.[IsStaging] 
                                                    ,ST.[DeleteStaging]
                                                    ,CS.PK AS [PrimaryKey]
                                                    ,'DWH' AS PackagePrefix
                                                    FROM      [Generator].[SourceExtractionTable] ST
                                                    LEFT JOIN [Generator].[Connection] SC
                                                    ON        ST.[SourceConnection] = SC.[Name]
                                                    LEFT JOIN CONSTRAINTS CS
                                                    ON		ST.[TargetSchema] = CS.[TABLE_SCHEMA]
                                                    AND		ST.[TargetTable]  = CS.[TABLE_NAME]
                                                    WHERE     ST.[IsActive] = 1 
                                                    AND       ST.IsStaging = 0
                                                    AND		  ST.TargetSchema = 'SCHAEFER'
                                                    ";
        DataTable tableSourceExtractionTable = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionTable);
        foreach (DataRow rowSourceExtractionTable in tableSourceExtractionTable.Rows) {
            string varExtractionSourceConnection  = rowSourceExtractionTable["SourceConnection"].ToString();
            string varExtractionSourceSchema = rowSourceExtractionTable["SourceSchema"].ToString();
            string varExtractionSourceTable = rowSourceExtractionTable["SourceTable"].ToString();
            string varExtractionSourceType = rowSourceExtractionTable["SourceType"].ToString();
            string varExtractionOptions = rowSourceExtractionTable["Options"].ToString();
            string varExtractionConnectionString = rowSourceExtractionTable["ConnectionString"].ToString();
            string varExtractionType = rowSourceExtractionTable["ExtractionType"].ToString();
            string varExtractionTargetConnection = rowSourceExtractionTable["TargetConnection"].ToString();
            string varExtractionTargetSchema = rowSourceExtractionTable["TargetSchema"].ToString();
            string varExtractionTargetTable = rowSourceExtractionTable["TargetTable"].ToString();
            string varExtractionIncrementalSchema = rowSourceExtractionTable["IncrementalSchema"].ToString();
            string varExtractionIncrementalTable = rowSourceExtractionTable["IncrementalTable"].ToString();
            string varExtractionModifiedDate = rowSourceExtractionTable["IncrementalUpdateColumn"].ToString();
            string varExtractionIncrementalKey = rowSourceExtractionTable["IncrementalKeyColumn"].ToString();
            string varExtractionTargetTablePK = rowSourceExtractionTable["PrimaryKey"].ToString();
            bool varExtractionDeleteStaging = (bool)rowSourceExtractionTable["DeleteStaging"];
            string varExtractionPackagePrefix = rowSourceExtractionTable["PackagePrefix"].ToString();
            string varTargetConnection = varExtractionTargetConnection;
            string varTargetSchema = varExtractionTargetSchema;
            string varTargetTable = varExtractionTargetTable;
            string varTargetName = varTargetConnection+"-"+varExtractionTargetSchema+"-"+varExtractionTargetTable;
            string varIncrementalName = varTargetConnection+"-"+varExtractionIncrementalSchema+"-"+varExtractionIncrementalTable;
            string varOutputPathName = "";
            string varTableBeginCharacter = varSQLServTableBeginCharacter;
            string varTableCloseCharacter = varSQLServTableCloseCharacter;
            string varColumnBeginCharacter = varSQLServColumnBeginCharacter;
            string varColumnCloseCharacter = varSQLServColumnCloseCharacter;
    
            varTableBeginCharacter = varSQLServTableBeginCharacter;
            varTableCloseCharacter = varSQLServTableCloseCharacter;
            varColumnBeginCharacter = varSQLServColumnBeginCharacter;
            varColumnCloseCharacter = varSQLServColumnCloseCharacter;
        
            string varExtractionTargetSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionTargetSchema      + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionTargetTable      + varSQLServTableCloseCharacter;
            string varExtractionIncrementalSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionIncrementalSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionIncrementalTable + varSQLServTableCloseCharacter;
            string varIncrementalSourceSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionIncrementalSchema + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionIncrementalTable + varSQLServTableCloseCharacter;
            string varIncrementalTargetSchemaTablePlus = varSQLServTableBeginCharacter + varExtractionTargetSchema      + varSQLServTableCloseCharacter + "." + varSQLServTableBeginCharacter + varExtractionTargetTable      + varSQLServTableCloseCharacter;
            string varTargetSchemaPlus = varSQLServTableBeginCharacter + varTargetSchema + varSQLServTableCloseCharacter;
            string varTargetTablePlus = varSQLServTableBeginCharacter + varTargetTable   + varSQLServTableCloseCharacter;
            string varTargetSchemaTablePlus = varTargetSchemaPlus    + "." + varTargetTablePlus;
            string varSQLRowCountTargetTable = "SELECT count(*) FROM " + varExtractionTargetSchemaTablePlus;
            string varSQLRowCountSourceTable = "SELECT count(*) FROM [Staging]." + varExtractionTargetSchemaTablePlus;
            string varSQLTruncateTargetTable = "TRUNCATE TABLE " + varTargetSchemaTablePlus;
            string varSQLSelectSourceExtractionControl = "SELECT CONVERT(VARCHAR, MAX([LastLoadDate]), 120) \nFROM [Control].[DWHControl] \nWHERE [SourceConnection] = '"+varExtractionSourceConnection+"' \nAND [SourceSchema] = '"+varExtractionTargetSchema+"' \nAND [SourceTable] = '"+varExtractionTargetTable+"'";
            string varSQLTruncateTargetTableStaging = "TRUNCATE TABLE [Staging]." + varTargetSchemaTablePlus;
            string varSQLUpdateDWHControl = "MERGE [Control].[DWHControl] T   \n USING (Select '"+varExtractionSourceConnection+"' as [SourceConnection] \n , '"+varExtractionTargetSchema+"' as [SourceSchema] \n , '"+varExtractionTargetTable+"' as [SourceTable] \n , '"+varExtractionType+"' as [ExtractionType] \n , ? as [BatchID]  \n , ? as [RowCountExtract]  \n , ? as [RowCountTarget]  \n , ? as [RowCountError]  \n , ? as [LastLoadDate]  \n ) S  \n ON  T.[SourceConnection] = S.[SourceConnection] AND  T.[SourceSchema] = S.[SourceSchema]  AND T.[SourceTable] = S.[SourceTable]  \n WHEN NOT MATCHED BY TARGET THEN INSERT VALUES ( S.[SourceConnection] \n , S.[SourceSchema] \n , S.[SourceTable] \n , S.[ExtractionType] \n , S.[BatchID] \n , S.[RowCountExtract] \n , S.[RowCountTarget] \n , S.[RowCountError] \n , S.[LastLoadDate]   )   \n WHEN MATCHED  THEN \n UPDATE \n SET \n  [ExtractionType] = S.[ExtractionType] \n , [BatchID] = S.[BatchID] \n , [RowCountExtract] = S.[RowCountExtract] \n , [RowCountTarget] = S.[RowCountTarget] \n , [RowCountError] = S.[RowCountError] \n , [LastLoadDate] = S.[LastLoadDate] ;";
            
            string varExtractionSourceSchemaPlus = varTableBeginCharacter + varExtractionSourceSchema + varTableCloseCharacter +".";
            if (varExtractionSourceSchema == "") {
                varExtractionSourceSchemaPlus = "";
            }
            string varExtractionSourceTablePlus = varTableBeginCharacter + varExtractionSourceTable  + varTableCloseCharacter;
            string varName = varExtractionTargetConnection + "-" + varExtractionSourceSchema + "-" + varExtractionSourceTable;
            string varPackageName = varExtractionPackagePrefix + "-" + varTargetSchema + "-" + varTargetTable;
    
            string sqlSourceExtractionColumn = @"SELECT sc.[SourceColumnName]
                                                     ,sc.[SourceColumnExpression]
                                                     ,sc.[SourceColumnType]
                                                     ,sc.[SourceColumnLength]
                                                     ,sc.[SourceColumnPrecision]
                                                     ,sc.[SourceColumnScale]
                                                     ,sc.[TargetColumnName]
                                                     ,sc.[TargetColumnType]
                                                     ,sc.[TargetColumnLength]
                                                     ,sc.[TargetColumnPrecision]
                                                     ,sc.[TargetColumnScale]
                                                     ,CASE WHEN sc.[SourceColumnType] <> [TargetColumnType] OR sc.[SourceColumnLength] <> [TargetColumnLength] OR sc.[SourceColumnPrecision] <> [TargetColumnPrecision] OR sc.[SourceColumnScale] <> [TargetColumnScale] THEN 1 ELSE 0 END AS [ColumnConversionNecessary]
                                                     ,dc.[DataTypeExpression]
                                                    FROM         [Generator].[SourceExtractionColumn] sc 
                                                    LEFT JOIN    [Generator].[DataTypeConversion]     dc
                                                    ON           [TargetColumnType] collate SQL_Latin1_General_CP1_CS_AS =  [DataType] collate SQL_Latin1_General_CP1_CS_AS
                                                    WHERE        sc.[SourceConnection] = '" + varExtractionSourceConnection + @"'
                                                    AND          sc.[SourceSchema] = '" + varExtractionSourceSchema + @"' 
                                                    AND          sc.[SourceTable] = '" + varExtractionSourceTable + @"' 
                                                    AND          sc.[SourceColumnName] IS NOT NULL
                                                    AND          sc.[IsActive] = 1 AND 1=2
                                                    ORDER BY     sc.[SourceColumnPosition]
                                                    ";
            DataTable tableSourceExtractionColumn = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourceExtractionColumn);
            int varSourceExtractionColumnCount = tableSourceExtractionColumn.Rows.Count;
            string varSQLStatementColumns = "";
            foreach (DataRow rowSourceExtractionColumn in tableSourceExtractionColumn.Rows) {
                string varSourceColumnName = rowSourceExtractionColumn["SourceColumnExpression"].ToString();
                int varSourceColumnConversionNecessary = (int)rowSourceExtractionColumn["ColumnConversionNecessary"];
                varSQLStatementColumns += ", " + varSourceColumnName;
            }
            
            if (varSQLStatementColumns.Length > 0) {
                varSQLStatementColumns = varSQLStatementColumns.Substring(2, varSQLStatementColumns.Length - 2);
            } else {
                varSQLStatementColumns = "*";
            }
            string varExtractionSQLStatement = "";
            string varExtractionDateConversion = "";
        
            switch (varExtractionSourceType) {
                case "SQLServer":
                    varExtractionDateConversion = "CONVERT(DATETIME2(7), &apos;&quot; + @[User::LastExtractionDate] + &quot;&apos;, 120)";
                    break;
                case "Oracle":
                    varExtractionDateConversion = "TO_DATE(&apos;&quot; + @[User::LastExtractionDate] + &quot;&apos;, &apos;yyyy-mm-dd hh24:mi:ss&apos;)";
                    break;
                case "ODBC":
                    varExtractionDateConversion = "CAST(&apos;&quot; + @[User::LastExtractionDate] + &quot;&apos; AS TIMESTAMP)";
                    break;
                default:
                    varExtractionDateConversion = "CAST(&apos;&quot; + @[User::LastExtractionDate] + &quot;&apos; AS TIMESTAMP)";
                    break;
            }
        
            varExtractionSQLStatement = "SELECT " + varSQLStatementColumns + " FROM " + varExtractionSourceSchemaPlus + varExtractionSourceTablePlus;
            #>
    
            <Package Name="<#=varPackageName#>" ConstraintMode="Linear" ProtectionLevel="<#=ProjectProtectionLevel#>">
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                </Parameters>
    
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64" Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64" Namespace="Audit">-1</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                    <Variable Name="RowCountExtract" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountTarget" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="RowCountError" DataType="Int32" Namespace="RC">0</Variable>
                    <Variable Name="LastExtractionDate" DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                    <Variable Name="ExtractionType" DataType="String" Namespace="User"><#=varExtractionType#></Variable>
                    <Variable Name="SourceExtractionSQL" DataType="String" Namespace="User"><#=varExtractionSQLStatement#></Variable>
                    <Variable Name="SelectionDate" DataType="String" Namespace="User">2000-01-01 00:00:00</Variable>
                </Variables>
    
                <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?,@ExtractionType = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0"  VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1"  VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2"  VariableName="BatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3"  VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4"  VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5"  VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6"  VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7"  VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8"  VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9"  VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                            <Parameter Name="14" VariableName="User.ExtractionType" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
    
                    <Container Name="SC Load <#=varName#>" ConstraintMode="Linear">
                        <Tasks>
                            <ExecuteSQL Name="SQL Get last extraction date <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <DirectInput><#=varSQLSelectSourceExtractionControl#></DirectInput>
                                <Results><Result Name="0" VariableName="User.LastExtractionDate" /></Results>
                            </ExecuteSQL>
                            <#string varTaskName = "Dataflow Load " + varName;
                            string varSQLPackageTaskColumn = @"SELECT [ColumnName]
                                                                	   ,[ColumnId]
                                                                FROM       [dbo].[PackageTaskColumn]
                                                                WHERE      [PackageName] = '" + varPackageName + @"' 
                                                                AND        [TaskName]    = '" + varTaskName + @"'
                                                                ";
                            if (varExtractionType == "FS") {
                                string varSQLDeleteStatement = "";
                                string[] varKeyColumns = varExtractionIncrementalKey.Split(varKeyColumnSeparator,StringSplitOptions.RemoveEmptyEntries);
                                string varJoinCondition = "";
                                foreach (string varKeyColumn in varKeyColumns) {
                                    varJoinCondition += "AND tar.[" + varKeyColumn + "] = inc.[" + varKeyColumn + "] \n";
                                }
                                if (varJoinCondition.Length > 0) {
                                    varJoinCondition = varJoinCondition.Substring(4, varJoinCondition.Length - 5);
                                }
                                string varSQLSelectionDate = "select CONVERT(VARCHAR, MAX(DATEADD(DD,-1,StartDateTime)), 120)  from [DWH_Control].[Logging].[BatchLog] where BatchID = ?" ;#>
    
                                <ExecuteSQL Name="SQL Get Selection Date  <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow" Disabled="false" >
                                    <DirectInput><#=varSQLSelectionDate#></DirectInput>
                                    <Results><Result Name="0" VariableName="User.SelectionDate" /></Results>
                                    <Parameters><Parameter Name="0" VariableName="Audit.AuditBatchID" DataType="Int64" /></Parameters>
                                </ExecuteSQL>
                                
                                <#varSQLDeleteStatement = "DELETE FROM "+varIncrementalTargetSchemaTablePlus ;
                                varSQLDeleteStatement = varSQLDeleteStatement + " WHERE cast("+varExtractionModifiedDate+" As Date) = cast( ? As Date) ";#>
    
                                <ExecuteSQL Name="SQL Delete target <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <DirectInput><#=varSQLDeleteStatement#></DirectInput>
                                    <Parameters><Parameter Name="0" VariableName="User.SelectionDate" DataType="String" /></Parameters>
                                </ExecuteSQL>
                            <#} 
    
                            if (varExtractionType == "TI") {#>
                                <ExecuteSQL Name="SQL Truncate target <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <DirectInput><#=varSQLTruncateTargetTable#></DirectInput>
                                </ExecuteSQL>
                            <#}#>
    
                            <ExecuteSQL Name="SQL Source row count <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <DirectInput><#=varSQLRowCountSourceTable#></DirectInput>
                                <Results><Result Name="0" VariableName="RC.RowCountExtract" /></Results>
                            </ExecuteSQL>
    
                            <#string MergeTempTable = "DECLARE @" + varTargetTable + "_TEMP TABLE (";
                            string MergeSQlStatement = "";
                            if (varExtractionType == "MN" || varExtractionType == "MI") {
                                MergeSQlStatement = "INSERT INTO DWH."+ varTargetSchema + "."+ varTargetTable + " SELECT ";
                            } else {
                                MergeSQlStatement = "INSERT INTO @" + varTargetTable + "_TEMP SELECT ";
                            }
                            string SQLHashStringSource = "";
                            string SQLHashStringTarget = "";
                            string VarPrimKeyJoin = "";
                            string VarFuncColumn = "";
                            string VarFuncColumnSource = "";
                            
                            string sqlsourcecolumns = @"select 
                                                            COL.TABLE_NAME
                                                            , COL.COLUMN_NAME	AS SOURCE_COLUMN_NAME
                                                            , CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN DWC.DWHColumnExpression1 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME
                                                            , CASE WHEN DWC.DWHColumnExpression2 IS NOT NULL THEN DWC.DWHColumnExpression2 ELSE COL.COLUMN_NAME END	AS TARGET_COLUMN_NAME2
                                                            , CASE WHEN CCU.CONSTRAINT_NAME IS NOT NULL THEN 1 else 0 end AS [PrimaryKey]
                                                            , CASE WHEN DWC.DWHColumnExpression1 IS NOT NULL THEN 1 ELSE 0 END AS ExpressionColumn
                                                            , COL.ORDINAL_POSITION
                                                            , CASE
                                                            WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')'WHEN COL.DATA_TYPE IN ('nvarchar','varchar','char') THEN '[' + COL.DATA_TYPE + '] (' + CASE WHEN COL.CHARACTER_MAXIMUM_LENGTH = -1 THEN 'MAX' ELSE CAST(COL.CHARACTER_MAXIMUM_LENGTH AS NVARCHAR(10)) END + ')'
                                                            WHEN COL.DATA_TYPE = 'numeric' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')'
                                                            WHEN COL.DATA_TYPE = 'decimal' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.NUMERIC_PRECISION AS NVARCHAR(10)) + ',' + CAST(COL.NUMERIC_SCALE AS NVARCHAR(10)) +  ')'
                                                            WHEN COL.DATA_TYPE = 'datetime2' THEN '[' +  COL.DATA_TYPE + '] (' + CAST(COL.DATETIME_PRECISION AS NVARCHAR(10)) + ')'
                                                            ELSE '[' + COL.DATA_TYPE + ']'
                                                            END + CASE WHEN COL.IS_NULLABLE = 'YES' THEN ' NULL' ELSE ' NOT NULL' END AS DATATYPE
                                                        from		DWH.INFORMATION_SCHEMA.COLUMNS COL
                                                        LEFT JOIN	[DWH].[INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] TC
                                                        ON			TC.TABLE_NAME = COL.TABLE_NAME
                                                        AND			TC.TABLE_SCHEMA = COL.TABLE_SCHEMA
                                                        LEFT JOIN	[DWH].[INFORMATION_SCHEMA].[CONSTRAINT_COLUMN_USAGE] CCU
                                                        ON			TC.CONSTRAINT_CATALOG	= CCU.CONSTRAINT_CATALOG
                                                        AND			TC.CONSTRAINT_SCHEMA	= CCU.CONSTRAINT_SCHEMA
                                                        AND			TC.CONSTRAINT_NAME		= CCU.CONSTRAINT_NAME 
                                                        AND			COL.COLUMN_NAME			= CCU.COLUMN_NAME
                                                        LEFT JOIN	DWH_Control.Generator.DWHExtractionColumn DWC
                                                        ON			DWC.DWHSchema			= COL.TABLE_SCHEMA
                                                        AND			DWC.DWHTable			= COL.TABLE_NAME
                                                        AND			DWC.DWHColumnName		= COL.COLUMN_NAME
                                                        where		COL.TABLE_NAME= '" + varTargetTable + @"'
                                                        and			COL.TABLE_SCHEMA = '" + varTargetSchema + @"'
                                                        order by 
                                                        COL.TABLE_NAME
                                                        , COL.ORDINAL_POSITION
                                                        ";
                            DataTable tablesourcecolumns = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlsourcecolumns);
                            foreach (DataRow rowsourcecolumns in tablesourcecolumns.Rows) {
                                string VarSourceColumnName = rowsourcecolumns["SOURCE_COLUMN_NAME"].ToString();
                                string VarTargetColumnName = rowsourcecolumns["TARGET_COLUMN_NAME"].ToString();
                                string VarTempColumnName = rowsourcecolumns["DATATYPE"].ToString();
                                string VarTargetColumnNameExp = rowsourcecolumns["TARGET_COLUMN_NAME2"].ToString();
                                string VarColumnPK = rowsourcecolumns["PrimaryKey"].ToString();
                                string VarColumnExpression = rowsourcecolumns["ExpressionColumn"].ToString();
                                if (VarSourceColumnName == "ProcessLogID") {
                                    MergeSQlStatement = MergeSQlStatement + "["+ VarSourceColumnName +"] ";
                                    MergeTempTable = MergeTempTable + "[" + VarSourceColumnName + "]" + VarTempColumnName + ")";
                                } else {
                                    MergeSQlStatement = MergeSQlStatement + "["+ VarSourceColumnName +"], ";
                                    MergeTempTable = MergeTempTable + "[" + VarSourceColumnName + "]" + VarTempColumnName + ",";
                                }
                                if (VarSourceColumnName != "SOURCE_DATE" && VarSourceColumnName != "Eff_Date" && VarSourceColumnName != "End_Date" && VarSourceColumnName != "ActInd" && VarSourceColumnName != "IsDeleted"&& VarSourceColumnName != "BatchID" && VarSourceColumnName != "ProcessLogID") {
                                    if (VarColumnExpression == "1") {
                                        VarFuncColumn = VarFuncColumn + VarTargetColumnName +", ";
                                        VarFuncColumnSource = VarFuncColumnSource + VarTargetColumnNameExp +" AS " + VarSourceColumnName + ", ";
                                    } else {
                                        SQLHashStringSource = SQLHashStringSource + " ISNULL(CAST(S.["+ VarTargetColumnName +"] AS VARCHAR(100)),'') + ";
                                        SQLHashStringTarget = SQLHashStringTarget + " ISNULL(CAST(T.["+ VarSourceColumnName +"] AS VARCHAR(100)),'') + ";
                                        VarFuncColumn = VarFuncColumn + "["+ VarTargetColumnName +"], ";
                                        VarFuncColumnSource = VarFuncColumnSource + "S.["+ VarTargetColumnName +"], ";
                                    }
                                }
                                if (VarColumnPK == "1" && VarSourceColumnName != "Eff_Date") {
                                    VarPrimKeyJoin = VarPrimKeyJoin + " T.["+ VarSourceColumnName +"] = S.["+ VarTargetColumnName +"] AND ";
                                }
                            }
                            
                            SQLHashStringSource = "(SELECT SUBSTRING(HashBytes('MD5'," +  SQLHashStringSource + "''), 3, 32))  ";
                            SQLHashStringTarget = "(SELECT SUBSTRING(HashBytes('MD5'," +  SQLHashStringTarget + "''), 3, 32))  ";
                            string quote = "<>";
                            if(varExtractionType == "MN" ) {
                                MergeSQlStatement = MergeSQlStatement + "FROM (MERGE DWH."+varTargetSchema + "."+ varTargetTable + " T " +
                                                                        	"USING Staging."+varTargetSchema + "."+ varTargetTable + " S " +
                                                                        	" ON "+ VarPrimKeyJoin + " 1=1 "+ 
                                                                        	" WHEN NOT MATCHED BY TARGET THEN INSERT VALUES ( "+
                                                                        	VarFuncColumn + "  ? , ? ) "+
                                                                        	" WHEN MATCHED THEN DELETE"+              
                                                                        	" OUTPUT $action   AS action, "+
                                                                        	VarFuncColumnSource + "  ? AS BatchID, ? as ProcessLogID ) AS MERGE_OUT WHERE MERGE_OUT.action = 'DELETE'; ";
                            } else if (varExtractionType == "MI" ) {
                                MergeSQlStatement = MergeSQlStatement + "FROM (MERGE DWH."+varTargetSchema + "."+ varTargetTable + " T " +
                                                                        	"USING Staging."+varTargetSchema + "."+ varTargetTable + " S " +
                                                                        	" ON "+ VarPrimKeyJoin + " 1=1 "+ 
                                                                        	" WHEN NOT MATCHED BY TARGET THEN INSERT VALUES ( "+
                                                                        	VarFuncColumn + "  ? , ? ) "+
                                                                        	" WHEN MATCHED THEN DELETE"+              
                                                                        	" OUTPUT $action   AS action, "+
                                                                        	VarFuncColumnSource + "  ? AS BatchID, ? as ProcessLogID ) AS MERGE_OUT WHERE MERGE_OUT.action = 'DELETE'; ";
                            } else if (varExtractionType == "I" ) {
                                MergeTempTable = MergeTempTable + MergeSQlStatement;                                
                                MergeSQlStatement = MergeTempTable + @"FROM (MERGE DWH."+varTargetSchema + @"."+ varTargetTable + @" T 
                                                                    	USING Staging." +varTargetSchema + "."+ varTargetTable + @" S 
                                                                    	ON "+ VarPrimKeyJoin + @" 1=1 AND  T.ActInd = 'Y' AND T.IsDeleted = 'N' 
                                                                    	WHEN NOT MATCHED BY TARGET THEN INSERT VALUES ( "+
                                                                    	VarFuncColumn + @" GETDATE()-1, '31-DEC-9999', 'Y','N', ? , ? ) "+
                                                                    	@" WHEN MATCHED 
                                                                    	AND ( " + SQLHashStringSource + " <> " + SQLHashStringTarget + @" OR T.IsDeleted = 'Y') 
                                                                    	THEN UPDATE SET T.ActInd = 'N' , T.End_Date = GETDATE()-2 
                                                                    	OUTPUT $action   AS action, 
                                                                    	"+ VarFuncColumnSource + @" GETDATE()-1 AS Eff_Date , '31-DEC-9999' AS End_Date  , 'Y' AS ActInd , 
                                                                    	CASE WHEN S.BatchID IS NULL THEN 'Y'	ELSE 'N' END AS IsDeleted, ? AS BatchID, ? as ProcessLogID ) AS MERGE_OUT 
                                                                    	WHERE MERGE_OUT.action = 'UPDATE' AND IsDeleted <> 'Y'; INSERT INTO  DWH." + varTargetSchema + "." + varTargetTable + " SELECT * FROM @" + varTargetTable + "_TEMP;";
                            } else {
                                MergeTempTable = MergeTempTable + MergeSQlStatement;
                                MergeSQlStatement = MergeTempTable +    @"FROM (MERGE DWH."+varTargetSchema + @"."+ varTargetTable + @" T 
                                                                        	USING Staging." +varTargetSchema + "."+ varTargetTable + @" S 
                                                                        	ON "+ VarPrimKeyJoin + @" 1=1 AND  T.ActInd = 'Y' AND T.IsDeleted = 'N' 
                                                                        	WHEN NOT MATCHED BY TARGET THEN INSERT VALUES ( "+
                                                                        	VarFuncColumn + @" GETDATE()-1, '31-DEC-9999', 'Y','N', ? , ? ) "+
                                                                        	@" WHEN MATCHED 
                                                                        	AND ( " + SQLHashStringSource + " <> " + SQLHashStringTarget + @" OR T.IsDeleted = 'Y') 
                                                                        	 THEN UPDATE SET T.ActInd = 'N' , T.End_Date = GETDATE()-2 
                                                                        	WHEN NOT MATCHED BY SOURCE AND  T.ActInd = 'Y'  AND T.IsDeleted <> 'Y'  
                                                                        	 THEN UPDATE SET T.ActInd = 'N' , T.IsDeleted = 'Y' , T.End_Date     =  GETDATE()-2 OUTPUT $action   AS action, 
                                                                        	"+ VarFuncColumnSource + @" GETDATE()-1 AS Eff_Date , '31-DEC-9999' AS End_Date  , 'Y' AS ActInd , 
                                                                        	CASE WHEN S.BatchID IS NULL THEN 'Y'	ELSE 'N' END AS IsDeleted, ? AS BatchID, ? as ProcessLogID ) AS MERGE_OUT 
                                                                        	WHERE MERGE_OUT.action = 'UPDATE' AND IsDeleted <> 'Y'; INSERT INTO  DWH." + varTargetSchema + "." + varTargetTable + " SELECT * FROM @" + varTargetTable + "_TEMP;";
                            } 
                            
                            if (varExtractionType == "FS") {
                                string varInsertSQLStaement = "INSERT INTO DWH."+varTargetSchema + "."+ varTargetTable  + " SELECT CONVERT(DATETIME2(7),  ? , 120) , " + VarFuncColumn + "  ? , ? FROM Staging."+varTargetSchema + "."+ varTargetTable;#>
                                <ExecuteSQL Name="SQL Load <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <DirectInput><#=@varInsertSQLStaement#></DirectInput>
                                    <Parameters>
                                        <Parameter Name="0" VariableName="User.SelectionDate" DataType="String" />
                                        <Parameter Name="1" VariableName="Audit.AuditBatchID" DataType="Int64" />
                                        <Parameter Name="2" VariableName="Audit.AuditProcessLogID" DataType="Int64"  />
                                    </Parameters>
                                </ExecuteSQL>
                            <#} else {#>
                                <ExecuteSQL Name="SQL Merge <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <DirectInput><![CDATA[<#=@MergeSQlStatement#>]]></DirectInput>
                                    <Parameters>
                                        <Parameter Name="0" VariableName="Audit.AuditBatchID" DataType="Int64" />
                                        <Parameter Name="1" VariableName="Audit.AuditProcessLogID" DataType="Int64" />
                                        <Parameter Name="2" VariableName="Audit.AuditBatchID" DataType="Int64" />
                                        <Parameter Name="3" VariableName="Audit.AuditProcessLogID" DataType="Int64" />
                                    </Parameters>
                                </ExecuteSQL>
                            <#}
    
                            if (varExtractionDeleteStaging) {#>
                                <ExecuteSQL Name="SQL Truncate table <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="None" Disabled="false" >
                                    <DirectInput><#=varSQLTruncateTargetTableStaging#></DirectInput>
                                </ExecuteSQL>
                            <#}#>
    
    
                            <ExecuteSQL Name="SQL Target row count <#=varName#>" ConnectionName ="<#=varTargetConnection#>" ResultSet="SingleRow" Disabled="false" >
                                <DirectInput><#=varSQLRowCountTargetTable#></DirectInput>
                                <Results><Result Name="0" VariableName="RC.RowCountTarget" /></Results>
                            </ExecuteSQL>
    
                            <ExecuteSQL Name="SQL Update contol record <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None" Disabled="false" >
                                <DirectInput><#=varSQLUpdateDWHControl#></DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="BatchID" DataType="Int64" />
                                    <Parameter Name="1" VariableName="RC.RowCountExtract" DataType="Int32" />
                                    <Parameter Name="2" VariableName="RC.RowCountTarget" DataType="Int32" />
                                    <Parameter Name="3" VariableName="RC.RowCountError" DataType="Int32" />
                                    <Parameter Name="4" VariableName="System.StartTime" DataType="DateTime" />
                                </Parameters>
                            </ExecuteSQL>
                        </Tasks>
                    </Container>
    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?,@LastExtractionDate = ?,@RowCountExtract = ?,@RowCountTarget = ?,@RowCountError = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="User.LastExtractionDate" Direction="Input" DataType="String" />
                            <Parameter Name="5" VariableName="RC.RowCountExtract" Direction="Input" DataType="Int32" />
                            <Parameter Name="6" VariableName="RC.RowCountTarget" Direction="Input" DataType="Int32" />
                            <Parameter Name="7" VariableName="RC.RowCountError" Direction="Input" DataType="Int32" />
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>
    
                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                            <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                                <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                                <Parameters>
                                    <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                    <Parameter Name="2" VariableName="System.PackageName" Direction="Input" DataType="String"/>
                                    <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                    <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                                </Parameters>
                            </ExecuteSQL>
                        </Tasks>
                    </Event>
                </Events>
            </Package>
        <#}

        string sqlTargetSchemas = @"SELECT DISTINCT
                                    [TargetConnection]
                                    ,[TargetSchema]
                                    ,'Total' AS [TargetTable]
                                    ,'CTRL_DWH' AS PackagePrefix
                                    ,[IsStaging]
                                    FROM [Generator].[SourceExtractionTable] st
                                    WHERE st.[IsActive] = 1 
                                    AND st.IsStaging = 0
                                    AND st.TargetSchema = 'SCHAEFER'
                                    ";
        DataTable tableTargetSchemas = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlTargetSchemas);
        foreach (DataRow rowTargetSchemas in tableTargetSchemas.Rows) {
            string varTargetConnection = rowTargetSchemas["TargetConnection"].ToString();
            string varTargetSchema = rowTargetSchemas["TargetSchema"].ToString();
            string varTargetTable = rowTargetSchemas["TargetTable"].ToString();
            string varPackagePrefix = rowTargetSchemas["PackagePrefix"].ToString();
            string varTargetIsStaging = rowTargetSchemas["IsStaging"].ToString();
            string varName = varTargetConnection + "-" + varTargetSchema + "-" + varTargetTable;
            string varPackageName = varPackagePrefix + "-" + varTargetSchema + "-" + varTargetTable;#>
    
            <Package Name="<#=varPackageName#>" ConstraintMode="Linear" AutoCreateConfigurationsType="None" ProtectionLevel="<#=ProjectProtectionLevel#>" >
                <Parameters>
                    <Parameter Name="BatchID" DataType="Int64">-1</Parameter>
                    <Parameter Name="ProcessLogParentID" DataType="Int64">0</Parameter>
                </Parameters>
    
                <Variables>
                    <Variable Name="AuditActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionStart" DataType="String" Namespace="Audit">S</Variable>
                    <Variable Name="AuditBatchActionNone" DataType="String" Namespace="Audit">N</Variable>
                    <Variable Name="AuditBatchActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditBatchActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionFinish" DataType="String" Namespace="Audit">F</Variable>
                    <Variable Name="AuditActionError" DataType="String" Namespace="Audit">E</Variable>
                    <Variable Name="AuditProcessLogID" DataType="Int64"  Namespace="Audit">0</Variable>
                    <Variable Name="AuditBatchID" DataType="Int64"  Namespace="Audit">-1</Variable>
                    <Variable Name="PackageName" DataType="String" Namespace="User"><#=varPackageName#></Variable>
                </Variables>
    
                <Tasks>
                    <ExecuteSQL Name="SQL Start Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="SingleRow">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogParentID = ?,@ProcessLogID = ?,@PackageName = ?,@SysPkgID = ?,@SysPkgName = ?,@SysPkgVersionGUID = ?	,@SysPkgVersionMajor = ?,@SysPkgVersionMinor = ?,@SysPkgExecutionMachineName = ?,@SysPkgExecutionUserName = ?,@SysPkgExecutionInstanceGUID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionStart" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="ProcessLogParentID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="4" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="5" VariableName="User.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="6" VariableName="System.PackageID" Direction="Input" DataType="String" />
                            <Parameter Name="7" VariableName="System.PackageName" Direction="Input" DataType="String" />
                            <Parameter Name="8" VariableName="System.VersionGUID" Direction="Input" DataType="String" />
                            <Parameter Name="9" VariableName="System.VersionMajor" Direction="Input" DataType="Int32" />
                            <Parameter Name="10" VariableName="System.VersionMinor" Direction="Input" DataType="Int32" />
                            <Parameter Name="11" VariableName="System.MachineName" Direction="Input" DataType="String" />
                            <Parameter Name="12" VariableName="System.UserName" Direction="Input" DataType="String" />
                            <Parameter Name="13" VariableName="System.ExecutionInstanceGUID" Direction="Input" DataType="String" />
                        </Parameters>
                        <Results>
                            <Result Name="0" VariableName="Audit.AuditBatchID" />
                            <Result Name="1" VariableName="Audit.AuditProcessLogID" />
                        </Results>
                    </ExecuteSQL>
                    
                    <Container Name="SC Extract <#=varName#>" ConstraintMode="Parallel">
                        <Tasks>
                            <#string sqlSourcePackages  = @"SELECT    [SourceConnection]
                             ,[Type] AS ConnectionType
                             ,[TargetSchema] AS[SourceSchema]
                             ,[TargetTable] AS [SourceTable]
                             ,'DWH' AS PackagePrefix
                            FROM      [Generator].[SourceExtractionTable] st 
                            JOIN	  [Generator].[Connection] con 	
                            ON		  [st].[SourceConnection] = [con].[Name]
                            WHERE     [TargetSchema] = '" + varTargetSchema + @"' 
                            AND       [st].[IsActive] = 1  AND st.IsStaging = 0 
                            ORDER BY  [SourceTable]
                            ";
                            DataTable tableSourcePackages = ExternalDataAccess.GetDataTable(conGeneratorConnectionString, sqlSourcePackages);
                            foreach (DataRow rowSourcePackages in tableSourcePackages.Rows) { 
                                string varSourceConnection = rowSourcePackages["SourceConnection"].ToString();
                                string varConnectionType = rowSourcePackages["ConnectionType"].ToString();
                                string varSourceSchema = rowSourcePackages["SourceSchema"].ToString();
                                string varSourceTable = rowSourcePackages["SourceTable"].ToString();
                                string varPackagePrfx = rowSourcePackages["PackagePrefix"].ToString();
                                string varPackage = varPackagePrfx + "-" + varSourceSchema + "-" + varSourceTable+ ".dtsx";#>
                                <ExecutePackage Name="<#=varPackage#>">
                                    <ExternalProjectPackage Package="<#=varPackage#>"/>
                                    <ParameterBindings>
                                        <ParameterBinding VariableName="Audit.AuditBatchID" Name="BatchID" />
                                        <ParameterBinding VariableName="Audit.AuditProcessLogID"  Name="ProcessLogParentID" />
                                    </ParameterBindings>
                                </ExecutePackage>
                            <#}#>
                        </Tasks>
                    </Container>
    
                    <ExecuteSQL Name="SQL Finish Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                        <DirectInput>EXECUTE [Logging].[PrcLoggingPackageExecution] @Action = ?,@BatchAction = ?,@BatchID = ?,@ProcessLogID = ?</DirectInput>
                        <Parameters>
                            <Parameter Name="0" VariableName="Audit.AuditActionFinish" Direction="Input" DataType="String"/>
                            <Parameter Name="1" VariableName="Audit.AuditBatchActionNone" Direction="Input" DataType="String"/>
                            <Parameter Name="2" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                            <Parameter Name="3" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                        </Parameters>
                    </ExecuteSQL>
                </Tasks>
    
                <Events>
                    <Event Name="Package Error" ConstraintMode="Linear" EventType="OnError">
                        <Tasks>
                        <ExecuteSQL Name="SQL Error Audit Package <#=varName#>" ConnectionName ="<#=SystemConnection#>" ResultSet="None">
                            <DirectInput>exec [Logging].[PrcLogMessage]@ProcessLogID = ?,@BatchID = ?,@SourceName = ?,@EventCode = ?,@EventDescription = ?</DirectInput>
                            <Parameters>
                                <Parameter Name="0" VariableName="Audit.AuditProcessLogID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="1" VariableName="Audit.AuditBatchID" Direction="Input" DataType="Int64"/>
                                <Parameter Name="2" VariableName="User.PackageName" Direction="Input" DataType="String"/>
                                <Parameter Name="3" VariableName="System.ErrorCode" Direction="Input" DataType="Int32"/>
                                <Parameter Name="4" VariableName="System.ErrorDescription" Direction="Input" DataType="String" />
                            </Parameters>
                        </ExecuteSQL>
                        </Tasks>
                    </Event>
                </Events>
            </Package>
  
      <#}#>

    </Packages>
</Biml>